{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap a4a3c31b9fe286f57124","webpack:///./src/bezier-accelerator.js","webpack:///./src/simple-accelerator.js","webpack:///./src/bezier-cubic.js","webpack:///./src/bezier-functions.js","webpack:///./src/bezier-quadratic.js","webpack:///./src/index.js","webpack:///./~/newton-raphson/index.js"],"names":["BezierAccelerator","v0","vF","tF","dF","cb","V","T","D","P0","P1","P2","P3","callBack","p1X","p1Y","func","complete","t","res","xValue","Error","tmpX","obj","distance","yValue","velocity","slopeValue","SimpleAccelerator","vAverage","acceleration","v","d","BezierCubic","p0","p1","p2","p3","quadratic","bezFunc","derivative","dydt","dxdt","dydx","CubicBezier","QuadraticBezier","bezObj","functionOfX","f","xFromT","fPrime","xFromTDerivative","tValue","yFromT","slopeAtT","maxIterations","tolerance","console","log","BezierQuadratic","linear","logger","s","enabled","Accelerator","options","undefined","defaults","tickInterval","allowOverwrite","debug","actual","Object","assign","time","elapsedTimeChangingVelocity","totalDistance","changingVelocity","isWaiting","bezAccelerator","currentVelocity","delta","deltaTime","advanceByTimeInterval","_advanceTimeAndDistanceWhileCoasting","currentWaitingTime","requiredWaitingTime","resolvePromiseFunction","decelerator","getDistanceAndVelocity","tmp","tmpV","distanceBeforeVelocityChange","timeForChange","newVelocity","getPosition","kill","distanceForChange","Promise","resolve","delay","reject","trigger"],"mappings":"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","file":"accelerate.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"accelerate\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"accelerate\"] = factory();\n\telse\n\t\troot[\"accelerate\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 5);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap a4a3c31b9fe286f57124","import { QuadraticBezier, CubicBezier } from './bezier-functions';\n/**\n * This class performs velocity changes on objects in 1-dimensional motion\n *\n * Provides two exposed methods\n *\n * -    getDistance(x)\n * -    isComplete()\n *\n * It does NOT keep track of the moving object outside of the velocity change\n * window\n *\n * Elapsed time is measured from the start of the velocity change\n *\n * You can only use an instance of this class once. Once the velocity change is\n * complete any call to getDistance() will result in an error. This is because\n * the values that define the bezier function used to describe the acceleration\n * are passed in via the constructor and those values cannot be changed (and hence the bezier curve cannot be changed)\n * without creating a new object\n *\n */\nexport default class BezierAccelerator\n{\n    /**\n     * Constructs the object.\n     *\n     * @param  {number}    v0  The initial velocity - velocity before the acceleration\n     * @param  {number}    vF  The final velocity to be atained\n     * @param  {number}    tF  The time interval over which the acceleration is to be completed\n     * @param  {number}    dF  The distance the object is to travel over the period of the acceleration\n     *\n     * @param  {Function}  cb  { parameter_description } NOTE - not tested\n     */\n    constructor(v0, vF, tF, dF, cb = null)\n    {\n        // just changing the notation to what I am using\n        const V = v0;\n        const T = tF;\n        const D = dF;\n        let P0 = [];\n        let P1 = [];\n        let P2 = [];\n        let P3 = [];\n\n        this.callBack = cb;\n\n        /**\n         * This if statement is selecting the \"best\" bezier function for the set of defining values\n         * given. The motivation for this is to ensure that the most common deceleration case\n         *\n         *  -   going from a high velocity to zero velocity\n         *\n         *  uses a curve that results in a uniform deceleration. This is achieved by slecting the\n         *  Quadratic bezier for this particular circunstance.\n         *\n         *  It is possible to handle this particular case with a Cubic Bezier but the result would be that the\n         *  motion decelerates too much and has to speed up or reverse course at the end\n         *\n         */\n        if ((v0 > 0) && (vF === 0) && ((T * v0) > (D)))\n        {\n            // this is the one special case where a cubic will not do the job\n            P0 = [0.0, 0.0];\n            const p1X = (D - (vF * T)) / (v0 - vF);\n            const p1Y = (v0 * p1X);\n            P1 = [p1X, p1Y];\n            P2 = [T, D];\n\n            this.func = QuadraticBezier(P0, P1, P2);\n        }\n        else\n        {\n            P0 = [0.0, 0.0];\n            P1 = [T / 3.0, V * T / 3.0];\n            P2 = [(2.0 / 3.0) * T, D - (vF * T / 3.0)];\n            P3 = [T, D];\n            this.func = CubicBezier(P0, P1, P2, P3);\n        }\n\n        this.complete = false;\n\n        this.V = v0;\n        this.vF = vF;\n        this.T = tF;\n        this.D = dF;\n\n        this.P0 = P0;\n        this.P1 = P1;\n        this.P2 = P2;\n        this.P3 = P3;\n    }\n\n    /**\n     * Function that is the tangent line at P0\n     *\n     * @param  {number}  t  independent variable\n     * @return {number}  return value\n     */\n    tangentInitial(t)\n\t{\n        return this.V * t;\n    }\n\n    /**\n     * Function that is the tangent line at P3\n     *\n     * @return {Array}  { description_of_the_return_value }\n     */\n    dotPositions()\n    {\n        return [this.P0, this.P1, this.P2, this.P3];\n    }\n\n\t/**\n     * This function draws the trajectory of the final velocity.Used only for debugging and demonstration\n     * not part of the final exposed package\n     *\n     * @param  {float}  t  the independent\n     * @return {float}  the function return value\n     */\n    tangentFinal(t)\n\t{\n        const res =  (this.vF * t) + (this.D - (this.vF * this.T));\n\n        return res;\n    }\n\n    /**\n     * Gets an object that contains the distance that has been traveled after xValue time units of the acceleration,\n     * and the velocity of travel at that same time\n     *\n     * NOTE :: This is one of only two methods exposed by the class that are not simply for debugging.\n     *\n     * @param  {number}  xValue  a number in the range  0..tF the elapsed time\n     *                           of the velocity change\n     * @return {object}   Of type\n     *                      { distance : , velocity : }\n     */\n    getDistanceAndVelocity(xValue)\n    {\n        if (this.complete)\n        {\n            throw new Error('Accelerator: velocity change is complete. Cannot call this function');\n        }\n\n        let tmpX = xValue;\n\n        if ((xValue >= this.T) && (!this.complete))\n        {\n            this.complete = true;\n            if (typeof this.callBack === 'function')\n            {\n                this.callBack();\n            }\n\n            tmpX =this.T;\n        }\n\n        const obj = this.func(tmpX);\n\n        return { distance : obj.yValue, velocity : obj.slopeValue };\n    }\n    /**\n     * Returns true if the acceleration is complete false other wise\n     *\n     * This is the second method exposed by the class that is not purely debuggin\n     *\n     * @return     {boolean}  True if complete, False otherwise.\n     */\n    isComplete()\n    {\n        return this.complete;\n    }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/bezier-accelerator.js","/**\n * This class performs velocity changes on objects in 1-dimensional motion,\n * but unlike the Bezier uses only the elapsed time OR distance as a constraint - not both.\n *\n * Hence one of the values dF or tF passed to the constructor MUST be set to false\n * to signify 'not provided'\n *\n * Hence the usual rules of physics can be applied and a constant acceleration\n * applied.\n *\n * Provides two exposed methods\n *\n * -    getDistance(x)\n * -    isComplete()\n *\n * It does NOT keep track of the moving object outside of the velocity change\n * window\n *\n * Elapsed time is measured from the start of the velocity change\n *\n * You can only use an instance of this class once. Once the velocity change is\n * complete any call to getDistance() will result in an error. This is because\n * the values that define the bezier function used to describe the acceleration\n * are passed in via the constructor and those values cannot be changed (and hence the bezier curve cannot be changed)\n * without creating a new object\n *\n */\nexport default class SimpleAccelerator\n{\n    /**\n     * Constructs the object.\n     *\n     * @param  {number}    v0  The initial velocity - velocity before the acceleration\n     * @param  {number}    vF  The final velocity to be atained\n     * @param  {number}    tF  The time interval over which the acceleration is to be completed\n     * @param  {float}     dF  is the distance that the object should move while changing velocity\n     *\n     * @param  {Function}  cb  { parameter_description } NOTE - not tested\n     */\n    constructor(v0, vF, tF, dF, cb = null)\n    {\n        // just changing the notation to what I am using\n\n        this.callBack = cb;\n        this.complete = false;\n        this.V = v0;\n        this.vF = vF;\n        this.D = dF;\n        this.T = tF;\n        if ((dF === null) && (tF === null))\n        {\n            throw new Error(`Only one of dF tF can be null tF:${tF} dF:${dF}`);\n        }\n        else if ((dF !== null) && (tF !== null))\n        {\n            throw new Error(`Exactly one of dF, tF MUST be false tF:${tF} dF:${dF}`);\n        }\n        else if (dF !== null)\n        {\n            const vAverage = (vF - v0) / 2.0;\n            const t = dF / vAverage;\n\n            this.acceleration = (vF - v0) / t;\n            this.T = t;\n        }\n        else // dF === null, tF !== null\n        {\n            this.acceleration = (vF - v0) / tF;\n            this.D = (v0 * tF) + (0.5 * this.acceleration * tF * tF);\n        }\n    }\n\n    /**\n     * Gets an object that contains the distance that has been traveled after xValue time units of the acceleration,\n     * and the velocity of travel at that same time\n     *\n     * NOTE :: This is one of only two methods exposed by the class that are not simply for debugging.\n     *\n     * @param  {number}  xValue  a number in the range  0..tF the elapsed time\n     *                           of the velocity change\n     * @return {object}   Of type\n     *                      { distance : , velocity : }\n     */\n    getDistanceAndVelocity(xValue)\n    {\n        if (this.complete)\n        {\n            throw new Error('Accelerator: velocity change is complete. Cannot call this function');\n        }\n\n        if ((xValue >= this.T) && (!this.complete))\n        {\n            this.complete = true;\n            if ((typeof this.callBack === 'function'))\n            {\n                this.callBack();\n            }\n        }\n        const v = this.V + (xValue * this.acceleration);\n        const d = (this.V * xValue) + (0.5 * this.acceleration * xValue * xValue);\n\n        // console.log(`SimpleAccelerator xValue:${xValue}`\n        //     +` isComplete:${this.complete}`\n        //     +` this.T ${this.T}`\n        //     +` d:${d}  v:${v}`\n        //     )\n\n        return { distance : d, velocity : v };\n    }\n    /**\n     * Returns true if the acceleration is complete false other wise\n     *\n     * This is the second method exposed by the class that is not purely debuggin\n     *\n     * @return     {boolean}  True if complete, False otherwise.\n     */\n    isComplete()\n    {\n        return this.complete;\n    }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/simple-accelerator.js","/**\n * Class for bezier cubic class.\n */\nexport class BezierCubic\n{\n    /**\n     * Constructs the object.\n     *\n     * @param  {array}  P0  Inital Point\n     * @param  {array}  P1  First attraction point\n     * @param  {array}  P2  Second attraction point\n     * @param  {array}  P3  End point\n     */\n    constructor(P0, P1, P2, P3)\n    {\n        this.P0 = P0;\n        this.P1 = P1;\n        this.P2 = P2;\n        this.P3 = P3;\n    }\n\n    /**\n     * The derivative of a bezier function - calcs the derivative on a single coordinate\n     *\n     * @private\n     *\n     * @param  {number}  t   parameter value at which to calc the bezier coordinate\n     * @param  {number}  p0  coordinate value from P0\n     * @param  {number}  p1  coordinate value from P1\n     * @param  {number}  p2  coordinate value from P2\n     * @param  {number}  p3  coordinate value from P3\n     * @return {number}  { description_of_the_return_value }\n     */\n    derivative(t, p0, p1, p2, p3)\n    {\n        function quadratic(p0, p1, p2, t)\n        {\n            const res = (p0 * (1.0 - t) * (1.0 - t)) + (2.0 * p1 * (1.0 - t) * t) + (p2 * t * t);\n\n            return res;\n        }\n        const res = 3.0 * (quadratic(p1, p2, p3, t) - quadratic(p0, p1, p2, t));\n\n        return res;\n    }\n    /**\n     * Calculates the x or y coordinate of a bezier curve given a value of the parameterization\n     *\n     * @private\n     *\n     * @param  {number}  t   parameter value\n     * @param  {number}  p0  The p 0\n     * @param  {number}  p1  The p 1\n     * @param  {number}  p2  The p 2\n     * @param  {number}  p3  The p 3\n     * @return {number}  { description_of_the_return_value }\n     */\n    bezFunc(t, p0, p1, p2, p3)\n    {\n        const res =   (p0 * (1 - t) * (1 - t) * (1 - t))\n                    + (3.0 * p1 * (1 - t) * (1 - t) * t)\n                    + (3.0 * p2 * (1 - t) * t * t)\n                    + (p3 * t * t * t);\n\n        return res;\n    }\n\n    /**\n     * Calculates an x value from a value t of the curves parameterization\n     *\n     * @param  {number}  t  parameter value\n     * @return {number}  corresponding x value\n     */\n    xFromT(t)\n    {\n        const res = this.bezFunc(t, this.P0[0], this.P1[0], this.P2[0], this.P3[0]);\n\n        return res;\n    }\n\n    /**\n     * Calculates the derivative of xFromT\n     *\n     * @param  {number}  t value of parameter\n     * @return {number}  slope of the xFromT curve at the value of t\n     */\n    xFromTDerivative(t)\n    {\n        const res = this.derivative(t, this.P0[0], this.P1[0], this.P2[0], this.P3[0]);\n\n        return res;\n    }\n\n    /**\n     * Calculates the y value of the point on the bezier curve corresponding to the\n     * parameter value t\n     *\n     * @param  {number}  t  parameter value\n     * @return {number}  y value corresponding to the value of t{ description_of_the_return_value }\n     */\n    yFromT(t)\n    {\n        const res = this.bezFunc(t, this.P0[1], this.P1[1], this.P2[1], this.P3[1]);\n\n        return res;\n    }\n        /**\n     * This function computes the slope of the bezier curve at the parameter value t.\\\n     * This is also the value of the derivate dy/dx at that value of t\n     *\n     * @param      {float}  t       parameter value\n     * @return     {float}  slope\n     */\n    slopeAtT(t)\n    {\n        const dydt = this.derivative(t, this.P0[1], this.P1[1], this.P2[1], this.P3[1]);\n        const dxdt = this.derivative(t, this.P0[0], this.P1[0], this.P2[0], this.P3[0]);\n        const dydx = (dydt / dxdt);\n\n        return dydx;\n    }\n\n}\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/bezier-cubic.js","import { BezierCubic } from './bezier-cubic';\nimport { BezierQuadratic } from './bezier-quadratic';\nimport newtonRaphson from 'newton-raphson';\n/*\n * One of the challenges with bezier curves is that the equations that describe these curves are parametric.\n * This means that each point on the curve, say (x,y), is is a function of some \"parameter\" which is unfortunately\n * for this application usually called 't'.\n *\n * I have continued this use of 't' for the parameter but please note this is NOT time.\n * In the discussion below and this module\n * the variable x is time and the variable y is distance\n *\n * However to be useful in this application we need to find a way of expressing the curve as a set of points\n * where the y coordinate is a function of the x cordinate, that is, points on the curve are of the form\n *\n *      [x, someFunction(x)]\n *\n * Thats what this module does. The two exported functions take the options that define a bezier curve and create\n * and return a function so that [x, returnedFunction(x)] are on the bezier curve.\n *\n * This process unfortunately requires solving non-linear equations. Thats where newton-Raphson comes in.\n *\n * That returned function is what needs to be used to bild accelerators\n */\n\n/**\n * This function returns a function which is a bezier Cubic curve as a\n * function of x so that (x, f(x)) is a point on the bezier curve.\n * Bezier functions are defined as curves (x(t), y(t)) for a parameter t between 0 .. 1\n * but cannot be rephrased as (x, f(x)). Getting itin this f(x) form takes computational work\n *\n * @param  {array}                      P0  The p 0\n * @param  {array}                      P1  The p 1\n * @param  {array}                      P2  The p 2\n * @param  {array}                      P3  The p 3\n * @return {function}                   returns a function that represents the bezier curve as a function of x\n */\nexport function CubicBezier(P0, P1, P2, P3)\n{\n    const bezObj = new BezierCubic(P0, P1, P2, P3);\n\n    /**\n     * Evaluates the bezier function and returns yValue and slope of the point\n     * on the curve corresponding to the given xValue\n     *\n     * @param      {number}  xValue the independent variable\n     * @return     {Object}  Returns object containing yValue and slopeValue\n     */\n    function functionOfX(xValue)\n    {\n        // find the t value that corresponds to the x value\n        // get it by newton raphson\n\n        function f(t)\n        {\n            return (bezObj.xFromT(t) - xValue);\n        }\n        function fPrime(t)\n        {\n            return bezObj.xFromTDerivative(t);\n        }\n\n        const tValue = newtonRaphson(f, fPrime, 0.5, null);\n\n        if (tValue === false)\n        {\n            throw new Error('cannot find t for x in CubicBezier');\n        }\n        // const checkXValue = bezObj.xFromT(tValue);\n        // console.log(`xValue: ${xValue}  tValue: ${tValue} checkXValue: ${checkXValue}`)\n\n        // let xValue = bezObj.xFromT(t)\n        const yValue = bezObj.yFromT(tValue);\n        const slopeValue = bezObj.slopeAtT(tValue);\n\n        if (yValue === 0)\n        {\n            // console.log('CubicBezier: yValue is zero'); // eslint-disable-line\n        }\n\n        return { yValue, slopeValue };\n    }\n\n    return functionOfX;\n}\n/**\n * This function returns a function which is a bezier Quadratuc curve as a\n * function of x so that (x, f(x)) is a point on the bezier curve\n *\n * @param  {number}                          P0  The p 0\n * @param  {number}                          P1  The p 1\n * @param  {number}                          P2  The p 2\n * @return {function}  Returns a function which gives the bezier curve as a function of x\n */\nexport function QuadraticBezier(P0, P1, P2)\n {\n    const bezObj = new BezierQuadratic(P0, P1, P2);\n\n    /**\n     * Evaluates the bezier function and returns yValue and slope of the point\n     * on the curve corresponding to the given xValue\n     *\n     * @param      {number}  xValue independent variable\n     * @return     {Object}  Returns object containing yValue and slopeValue\n     */\n    function functionOfX(xValue)\n    {\n        function f(t)\n        {\n            return (bezObj.xFromT(t) - xValue);\n        }\n\n        function fPrime(t)\n        {\n            return bezObj.xFromTDerivative(t);\n        }\n\n        const tValue = newtonRaphson(f, fPrime, 0.5, {maxIterations: 50, tolerance:0.001});\n\n        if (tValue === false)\n        {\n            console.log([P0, P1, P2]); // eslint-disable-line\n            throw new Error(`cannot find t for x in QuadraticBezier xValue:${xValue}`);\n        }\n        // const checkXValue = bezObj.xFromT(tValue);\n        // console.log(`xValue: ${xValue}  tValue: ${tValue} checkXValue: ${checkXValue}`)\n\n        // let x = bezObj.xFromT(t);\n        const yValue = bezObj.yFromT(tValue);\n        const slopeValue = bezObj.slopeAtT(tValue);\n\n        if (yValue === 0)\n        {\n            console.log('CubicBezier: yValue is zero'); // eslint-disable-line\n        }\n\n        return { yValue, slopeValue };\n    }\n\n    return functionOfX;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/bezier-functions.js","/**\n * Class for bezier quadratic class.\n */\nexport class BezierQuadratic\n{\n    /**\n     * Constructs the object.\n     *\n     * @param  {Float}  P0  Initial point\n     * @param  {Float}  P1  Attraction point\n     * @param  {Float}  P2  End point\n     */\n    constructor(P0, P1, P2)\n    {\n        this.P0 = P0;\n        this.P1 = P1;\n        this.P2 = P2;\n\n        // if(P0.length !== 2 || P1.length !== 2 || P2.length !== 2){\n        //     debugger\n        // }\n\n        // const arr = P0.concat(P1,P2)\n        // console.log(arr)\n    }\n    /**\n    * The derivative of the bezier curve\n    *\n    * @param {number} t the curve parameter\n    * @param {number} p0 a coordinate of the point P0\n    * @param {number} p1 a coordinate of the point P1\n    * @param {number} p2 a coordinate of the point P2\n    *\n    * @return {number} derivative at t\n    */\n    derivative(t, p0, p1, p2)\n    {\n        function linear(p0, p1, t)\n        {\n            const res = (p0 * (1.0 - t)) + (p1 * t);\n\n            return res;\n        }\n\n        const res = 2.0 * (linear(p1, p2, t) - linear(p0, p1, t));\n\n        return res;\n    }\n\n    /**\n    * The coordinate (x or y) of a point on the bezier curve as a function of the\n    * variable that parameterizes the curve\n    *\n    * @param {number} t the curve parameter\n    * @param {number} p0 a coordinate of the point P0\n    * @param {number} p1 a coordinate of the point P1\n    * @param {number} p2 a coordinate of the point P2\n    *\n    * @return {number} coordinate value at t\n    */\n    bezFunc(t, p0, p1, p2)\n    {\n        const res =   (p0 * (1 - t) * (1 - t)) + (2.0 * p1 * (1 - t) * t) + (p2 * t * t);\n\n        return res;\n    }\n\n    /**\n    * The value of the x coordinate of a point on the bezier curve as a function of the\n    * variable that parameterizes the curve\n    *\n    * @param {number} t the curve parameter\n    *\n    * @return {number} coordinate value at t\n    */\n    xFromT(t)\n    {\n        const res = this.bezFunc(t, this.P0[0], this.P1[0], this.P2[0]);\n\n        return res;\n    }\n\n    /**\n    * The value of the derivative of xFromT as a function of the\n    * variable that parameterizes the curve\n    *\n    * @param {number} t the curve parameter\n    *\n    * @return {number} derivative of XFromT at t\n    */\n    xFromTDerivative(t)\n    {\n        const res = this.derivative(t, this.P0[0], this.P1[0], this.P2[0]);\n\n        return res;\n    }\n\n    /**\n    * The value of the y coordinate of a point on the bezier curve as a function of the\n    * variable that parameterizes the curve\n    *\n    * @param {number} t the curve parameter\n    *\n    * @return {number} coordinate value at t\n    */\n    yFromT(t)\n    {\n        const res = this.bezFunc(t, this.P0[1], this.P1[1], this.P2[1]);\n\n        return res;\n    }\n    /**\n     * This function computes the slope of the bezier curve at the parameter value t.\\\n     * This is also the value of the derivate dy/dx at that value of t\n     *\n     * @param      {float}  t       parameter value\n     * @return     {float}  slope\n     */\n    slopeAtT(t)\n    {\n        const dydt = this.derivative(t, this.P0[1], this.P1[1], this.P2[1]);\n        const dxdt = this.derivative(t, this.P0[0], this.P1[0], this.P2[0]);\n        const dydx = (dydt / dxdt);\n\n        return dydx;\n    }\n}\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/bezier-quadratic.js","import BezierAccelerator from './bezier-accelerator.js';\nimport SimpleAccelerator from './simple-accelerator.js';\n\nfunction logger(s)\n{\n    const enabled = false;\n\n    if (enabled)\n    /* eslint-disable no-console */\n        { console.log(s); }\n    /* eslint-enable no-console */\n}\n/*\n* TODO\n*   -   does not correctly support advancing by a time interval that jumps over the end of an acceleration\n*/\n\n/**\n * This class seeks to keep track of the 1 dimensional motion of an object that is subject to\n * multiple velocity changes.\n *\n * The two relevant properties of this object are position and velocity which can be obtained\n * at any time with methods getPosition() and getVelocity()\n *\n * A starting velocity is set via the constructor.\n *\n * Time is advanced, and the position and velocity updated, by calling the method\n *\n *  advanceByTimeInterval(timeInterval)\n *\n * with a timeInterval or deltaTime which is a time interval since the last update and is in SECONDS not FRAMES\n *\n *  An alternative advance() method is provided that works in 'ticks' where the tick value in seconds is\n *  defined via the constructor()\n *\n * An acceleration (either positive or negative) can be scheduled by calling the method accelerate(vF, tF, dF)\n * this call will have no effect on the position or velocity until the next call to advance() or advanceByTimeINterval()\n *\n * That method will apply the acceleration on successive calls until the ending condition is encountered\n * tF seconds of acceleration have elapsed AND the body has traveled dF distance during the acceleration\n *\n * On finishing the acceleration the advance() or advanceByTimeInterval() method will call the resolve() function\n * of the promise returned by call to accelerate() that setup the acceleration\n */\nexport default class Accelerator\n{\n    /**\n     * Constructs the object.\n     *\n     * @param  {Float}  v0       The initial Velocity\n     * @param  {Object} options  The options\n     */\n    constructor(v0, options = {})\n    {\n        if (v0 === null || v0 === undefined || typeof v0 !== 'number')\n        {\n            throw new Error('Initial velocity not defined');\n        }\n\n        const defaults = {\n            tickInterval : 1 / 60, // @FIX this is going away\n            allowOverwrite : true,\n            debug: false,\n        };\n\n        const actual = Object.assign({}, defaults, options);\n\n        this.tickInterval = actual.tickInterval;\n        this.allowOverwrite = actual.allowOverwrite;\n        this.debug = actual.debug;\n\n        this.time = 0.0;\n        this.elapsedTimeChangingVelocity = 0.0;\n        this.totalDistance = 0.0;\n        this.changingVelocity = false;\n        this.isWaiting = false;\n        this.bezAccelerator = null;\n        this.currentVelocity = v0;\n    }\n    /**\n     * Advance objects time by the equivalent of delta * PIXI tick value\n     *\n     * @param  {float}  delta   The delta\n     * @return {Float}  Total distance traveled after this time interval is added to\n     *                  total time of travel. Just for convenience as could get this with position()\n     */\n    advance(delta)\n    {\n        const deltaTime = delta * this.tickInterval;\n\n        return this.advanceByTimeInterval(deltaTime);\n    }\n\n    /**\n     * Advance the moving objects time by a time interval\n     *\n     * @param  {Float}  deltaTime  Interval since the last call to this method\n     * @return {Float}  Total distance traveled after this time interval is added to\n     *                  total time of travel. Just for convenience as could get this with position()\n     */\n    advanceByTimeInterval(deltaTime)\n    {\n        if (!this.changingVelocity && !this.isWaiting)\n        {\n            this._advanceTimeAndDistanceWhileCoasting(deltaTime);\n        }\n        else if (!this.changingVelocity && this.isWaiting)\n        {\n            // this.time += deltaTime; - this will be done in _advanceTimeAndDistance\n            this.currentWaitingTime += deltaTime;\n            if (this.currentWaitingTime >= this.requiredWaitingTime)\n            {\n                this.isWaiting = false;\n                if (typeof this.resolvePromiseFunction === 'function')\n                {\n                    this.resolvePromiseFunction();\n                }\n            }\n            this._advanceTimeAndDistanceWhileCoasting(deltaTime);\n        }\n        else\n        {\n            this.time += deltaTime;\n            this.elapsedTimeChangingVelocity += deltaTime;\n\n            const obj = this.decelerator.getDistanceAndVelocity(this.elapsedTimeChangingVelocity);\n            const tmp = obj.distance;\n            const tmpV = obj.velocity;\n\n            /**\n             * This is a crude estimate of the velocity. At some point I should work out a formular\n             * rather than do this approximation\n             */\n\n             /**\n              * Trying a new calculation of velocity\n              */\n            // this.currentVelocity = deltaDistance / (deltaTime);\n            this.currentVelocity = tmpV;\n\n            this.totalDistance = this.distanceBeforeVelocityChange + tmp;\n\n            logger(\n                `Mover::advanceByTime  elapsedTimeChangingVelocity: ${this.elapsedTimeChangingVelocity}`\n                + ` timeForChange: ${this.timeForChange}`\n                + ` DVdistance: ${tmp} `\n                + ` totalDistance: ${this.totalDistance}`\n                + ` velocity: ${this.currentVelocity}`\n                + ` tmpV: ${tmpV}`\n                );\n\n            /**\n             * There are a number of ways of detecting an end of an acceleration.\n             *\n             *  1.  we could ask the bezAccelerator with => if ( this.decelerator.isComplete() )\n             *  2.  we could use the test below => if (this.elapsedTimeChangingVelocity >= this.timeForChange)\n             *  3.  we could use the callback provided for in the BezAccelerator constructor. This approach\n             *      would require code something like below in _accelerateNoDelay\n             *\n             *          const promise = new Promise( (resolve) =>\n             *          {\n             *              this.decelerator = new BezierAccelerator(v0, vF, tF, dF, () => {\n             *                  resolve()\n             *              });\n             *          }\n             *          this.resolvePromiseFunction = promise\n             *          return promise;\n             *\n             *  @NOTE - how to do kill() in this last situation. Maybe have a kill method on\n             *  the BezierAccelerator ??\n             *\n             * @NOTE : I tried this solution but it gave me some type of race condition\n             * that I could not track down. To do with the fact that the promise does not get resolved until AFTER\n             * the tick handler exits and advance() needs to know we are done BEFORE the promise then function\n             * is called. The problem arose unit testing Kill()\n             *\n             */\n            if (this.elapsedTimeChangingVelocity >= this.timeForChange)\n            {\n                // Not sure why we need this - Brendon\n\n                logger(`Mover::advanceTimeBy::velocity increase DONE newVelocity:${this.newVelocity}`);\n                /**\n                 * This next line is to force the velocity to the specific vF value at the end of the\n                 * acceleration. The calculation of currentVelocity during an acceleration is only a crude\n                 * approximation and would not get the right final velocity\n                 */\n                this.currentVelocity = this.newVelocity;\n                this.changingVelocity = false;\n                if (typeof this.resolvePromiseFunction === 'function')\n                {\n                    this.resolvePromiseFunction();\n                }\n            }\n        }\n\n        if (this.debug)\n        {\n            console.log(this.getPosition());\n        }\n\n        return this.getPosition();\n    }\n\n    /**\n     * Gets the current position of the moving object\n     *\n     * @return {Float}  returns the current position of the moving object\n     */\n    getPosition()\n    {\n        return this.totalDistance;\n    }\n\n    setPosition(d)\n    {\n        this.totalDistance = d;\n    }\n\n    /**\n     * Gets the current velocity of the moving object\n     *\n     * @return {Float}  returns the current velocity of the moving object\n     */\n    getVelocity()\n    {\n        return this.currentVelocity;\n    }\n\n    /**\n     * Sets the velocity. This cannot bet set during an acceleration\n     *\n     * @param  {Float}  v  The currenct velocity\n     */\n    setVelocity(v)\n    {\n        if (this.changingVelocity)\n        {\n            throw new Error('cannot setVelocity during an acceleration');\n        }\n        this.currentVelocity = v;\n    }\n\n    /**\n     * Instructs the object to start a velocity change\n     *\n     * @param  {float}    vF     - is the velocity the object is to change to\n     * @param  {float}    tF     - is the time interval over which the change is to take place\n     * @param  {float}    dF     - is the distance that the object should move while changing velocity\n     * @return {Promise}  Promise which will be resolved when the acceleration\n     *                    has completed\n     *\n    accelerate(vF, tF, dF)\n    {\n        return this._accelerateNoDelay(vF, tF, dF);\n    }\n    */\n    /**\n     * Implements the guts of the accelerate action. Sets up the necessary properties\n     * and returns a promise.\n     *\n     * Under some circumstances it is permissible to start an acceleration even when one is already\n     * active. This depends on the property this.allowOverwrite\n     *\n     * When permited an overwrite (new acceleration when one is already active)\n     *  -   stops the current acceleration and resolves the associated promise\n     *  -   sets up a new acceleration using the current velocity, total time and total\n     *      distance left over from the kill'd\n     *      acceleration as the initial velocity and starting time and distance\n     *      for the new acceleration\n     *\n     *\n     * @param  {Float}   vF  is the velocity the object is to change to\n     *\n     * @param  {Float}   tF  is the time interval over which the change is to take place\n     * @param  {Float}   dF  is the distance that the object should move while changing velocity\n     *\n     * One of dF or tF can be set to null to apply an unconstrained acceleration. In such a\n     * case the Bezier accelerator is not used but rather a simple accelerator\n     *\n     * @return {Promise}  Promise which will be resolved when the acceleration\n     *                    has completed\n     */\n    accelerate(vF, tF, dF)\n    {\n        logger(`Accelerator::accelerate ${vF} ${tF} ${dF}`);\n        if (!this.allowOverwrite)\n        {\n            if (this.changingVelocity)\n            {\n                throw new Error('cannot have two accelerations underway at the same time');\n            }\n            if (this.isWaiting)\n            {\n                throw new Error('cannot have commence acceleration while wait is underway');\n            }\n        }\n        else\n        {\n            this.kill();\n        }\n\n        const v0 = this.currentVelocity;\n\n        this.distanceBeforeVelocityChange = this.totalDistance;\n        this.changingVelocity = true;\n        this.elapsedTimeChangingVelocity = 0.0;\n        this.timeForChange = tF;\n        this.newVelocity = vF;\n        this.distanceForChange = dF;\n\n        if ((tF !== null) && (dF !== null))\n        {\n            this.decelerator = new BezierAccelerator(v0, vF, tF, dF);\n        }\n        else\n        {\n            this.decelerator = new SimpleAccelerator(v0, vF, tF, dF);\n        }\n\n        return new Promise((resolve) =>\n        {\n            this.resolvePromiseFunction = resolve;\n        });\n    }\n\n    /**\n     * Lets a timeinterval pass during which the accelerator moves along at a constant velocity.\n     *\n     * @param  {Float}   delay  The time interval\n     * @return {Promise}  After waiting\n     */\n    wait(delay)\n    {\n        return new Promise((resolve, reject) =>\n        {\n            if (!delay || delay <= 0)\n            {\n                resolve();\n\n                return;\n            }\n\n            if (this.changingVelocity)\n            {\n                reject('Accelerator: cannot wait while acceleration is underway');\n\n                return;\n            }\n\n            if (this.isWaiting)\n            {\n                reject('cannot have commence acceleration while wait is underway');\n\n                return;\n            }\n            this.isWaiting = true;\n            this.requiredWaitingTime = delay;\n            this.currentWaitingTime = 0.0;\n            this.resolvePromiseFunction = resolve;\n        });\n    }\n\n    /**\n     * Stops any current acceleration or wait & resolves the promise\n     *\n     * @param  {boolean}  trigger  Whether or not to trigger the completion handler\n     */\n    kill(trigger=true)\n    {\n        if (this.changingVelocity)\n        {\n            this.changingVelocity = false;\n            if (trigger && typeof this.resolvePromiseFunction === 'function')\n            {\n                this.resolvePromiseFunction();\n            }\n        }\n        else if (this.isWaiting)\n        {\n            this.isWaiting = false;\n            if (trigger && typeof this.resolvePromiseFunction === 'function')\n            {\n                this.resolvePromiseFunction();\n            }\n        }\n        else\n        {\n            // console.log(`WARNING: Accelerator - kill not necessary when no acceleration active`);\n        }\n    }\n\n    /**\n     * Advances total time & distance when NO acceleration is active\n     *\n     * @private\n     *\n     * @param  {Float}  deltaTime  The delta time\n     */\n    _advanceTimeAndDistanceWhileCoasting(deltaTime)\n    {\n        this.time += deltaTime;\n        this.totalDistance += this.currentVelocity * deltaTime;\n        logger(`\\nMover::advanceTimeBy_VelocityNotChanging `\n            + ` velocity:${this.currentVelocity}`\n            + ` distance:${this.totalDistance}`\n            + ` time: ${this.time}`\n            + `deltaTime:${deltaTime}`);\n    }\n\n}\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.js","(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define([], factory);\n    } else if (typeof exports === 'object') {\n        module.exports = factory();\n    } else {\n        root.newtonRaphson = factory();\n  }\n}(this, function () {\n  return function findRoot(f, fprime, guess, options) {\n    options = options || {};\n    var tolerance = options.tolerance || 0.00000001;\n    var epsilon = options.epsilon || 0.0000000000001;\n    var maxIterations = options.maxIterations || 20;\n    var haveWeFoundSolution = false; \n    var newtonX;\n   \n    for (var i = 0; i < maxIterations; ++i) {\n      var denominator = fprime(guess);\n      if (Math.abs(denominator) < epsilon) {\n        return false\n      }\n   \n      result = guess - (f(guess) / denominator);\n      \n      var resultWithinTolerance = Math.abs(result - guess) < tolerance;\n      if (resultWithinTolerance) { \n        return result\n      }\n\n      guess = result;\n    }\n    \n    return false;\n  }\n}));\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/newton-raphson/index.js\n// module id = 6\n// module chunks = 0"],"sourceRoot":""}