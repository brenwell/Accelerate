{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///accelerate.min.js","webpack:///webpack/bootstrap 65c6836098e8aaa92b81","webpack:///./src/bezier-accelerator.js","webpack:///./src/simple-accelerator.js","webpack:///./src/bezier-cubic.js","webpack:///./src/bezier-functions.js","webpack:///./src/bezier-quadratic.js","webpack:///./src/index.js","webpack:///./~/newton-raphson/index.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","i","l","call","m","c","value","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","length","descriptor","writable","key","protoProps","staticProps","_bezierFunctions","BezierAccelerator","v0","vF","tF","dF","cb","arguments","undefined","V","T","D","P0","P1","P2","P3","callBack","p1X","p1Y","func","QuadraticBezier","CubicBezier","complete","t","xValue","Error","obj","distance","yValue","velocity","slopeValue","default","SimpleAccelerator","vAverage","acceleration","v","BezierCubic","p0","p1","p2","p3","quadratic","bezFunc","derivative","functionOfX","f","bezObj","xFromT","fPrime","xFromTDerivative","tValue","_newtonRaphson2","yFromT","slopeAtT","_bezierCubic","console","log","_bezierQuadratic","BezierQuadratic","_newtonRaphson","linear","_interopRequireDefault","_bezierAccelerator","_bezierAccelerator2","_simpleAccelerator","_simpleAccelerator2","Accelerator","options","defaults","tickInterval","allowOverwrite","actual","assign","time","elapsedTimeChangingVelocity","totalDistance","changingVelocity","isWaiting","bezAccelerator","currentVelocity","delta","deltaTime","advanceByTimeInterval","currentWaitingTime","requiredWaitingTime","resolvePromiseFunction","_advanceTimeAndDistanceWhileCoasting","decelerator","getDistanceAndVelocity","tmp","tmpV","distanceBeforeVelocityChange","timeForChange","newVelocity","_this","kill","distanceForChange","Promise","resolve","delay","_this2","reject","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","apply","fprime","guess","tolerance","epsilon","maxIterations","denominator","Math","abs","result"],"mappings":"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","file":"accelerate.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"accelerate\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"accelerate\"] = factory();\n\telse\n\t\troot[\"accelerate\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"accelerate\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"accelerate\"] = factory();\n\telse\n\t\troot[\"accelerate\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// identity function for calling harmony imports with the correct context\n/******/ \t__webpack_require__.i = function(value) { return value; };\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 5);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _bezierFunctions = __webpack_require__(3);\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * This class performs velocity changes on objects in 1-dimensional motion\n *\n * Provides two exposed methods\n *\n * -    getDistance(x)\n * -    isComplete()\n *\n * It does NOT keep track of the moving object outside of the velocity change\n * window\n *\n * Elapsed time is measured from the start of the velocity change\n *\n * You can only use an instance of this class once. Once the velocity change is\n * complete any call to getDistance() will result in an error. This is because\n * the values that define the bezier function used to describe the acceleration\n * are passed in via the constructor and those values cannot be changed (and hence the bezier curve cannot be changed)\n * without creating a new object\n *\n */\nvar BezierAccelerator = function () {\n    /**\n     * Constructs the object.\n     *\n     * @param  {number}    v0  The initial velocity - velocity before the acceleration\n     * @param  {number}    vF  The final velocity to be atained\n     * @param  {number}    tF  The time interval over which the acceleration is to be completed\n     * @param  {number}    dF  The distance the object is to travel over the period of the acceleration\n     *\n     * @param  {Function}  cb  { parameter_description } NOTE - not tested\n     */\n    function BezierAccelerator(v0, vF, tF, dF) {\n        var cb = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n\n        _classCallCheck(this, BezierAccelerator);\n\n        // just changing the notation to what I am using\n        var V = v0;\n        var T = tF;\n        var D = dF;\n        var P0 = [];\n        var P1 = [];\n        var P2 = [];\n        var P3 = [];\n\n        this.callBack = cb;\n\n        /**\n         * This if statement is selecting the \"best\" bezier function for the set of defining values\n         * given. The motivation for this is to ensure that the most common deceleration case\n         *\n         *  -   going from a high velocity to zero velocity\n         *\n         *  uses a curve that results in a uniform deceleration. This is achieved by slecting the\n         *  Quadratic bezier for this particular circunstance.\n         *\n         *  It is possible to handle this particular case with a Cubic Bezier but the result would be that the\n         *  motion decelerates too much and has to speed up or reverse course at the end\n         *\n         */\n        if (v0 > 0 && vF === 0 && T * v0 > D) {\n            // this is the one special case where a cubic will not do the job\n            P0 = [0.0, 0.0];\n            P2 = [T, D];\n            var p1X = (D - vF * T) / (v0 - vF);\n            var p1Y = v0 * p1X;\n\n            this.func = (0, _bezierFunctions.QuadraticBezier)(P0, [p1X, p1Y], P2);\n        } else {\n            P0 = [0.0, 0.0];\n            P1 = [T / 3.0, V * T / 3.0];\n            P2 = [2.0 / 3.0 * T, D - vF * T / 3.0];\n            P3 = [T, D];\n            this.func = (0, _bezierFunctions.CubicBezier)(P0, P1, P2, P3);\n        }\n\n        this.complete = false;\n\n        this.V = v0;\n        this.vF = vF;\n        this.T = tF;\n        this.D = dF;\n\n        this.P0 = P0;\n        this.P1 = P1;\n        this.P2 = P2;\n        this.P3 = P3;\n    }\n\n    /**\n     * Function that is the tangent line at P0\n     *\n     * @param  {number}  t  independent variable\n     * @return {number}  return value\n     */\n\n\n    _createClass(BezierAccelerator, [{\n        key: 'tangentInitial',\n        value: function tangentInitial(t) {\n            return this.V * t;\n        }\n\n        /**\n         * Function that is the tangent line at P3\n         *\n         * @return {Array}  { description_of_the_return_value }\n         */\n\n    }, {\n        key: 'dotPositions',\n        value: function dotPositions() {\n            return [this.P0, this.P1, this.P2, this.P3];\n        }\n\n        /**\n            * This function draws the trajectory of the final velocity.Used only for debugging and demonstration\n            * not part of the final exposed package\n            *\n            * @param  {float}  t  the independent\n            * @return {float}  the function return value\n            */\n\n    }, {\n        key: 'tangentFinal',\n        value: function tangentFinal(t) {\n            var res = this.vF * t + (this.D - this.vF * this.T);\n\n            return res;\n        }\n\n        /**\n         * Gets an object that contains the distance that has been traveled after xValue time units of the acceleration,\n         * and the velocity of travel at that same time\n         *\n         * NOTE :: This is one of only two methods exposed by the class that are not simply for debugging.\n         *\n         * @param  {number}  xValue  a number in the range  0..tF the elapsed time\n         *                           of the velocity change\n         * @return {object}   Of type\n         *                      { distance : , velocity : }\n         */\n\n    }, {\n        key: 'getDistanceAndVelocity',\n        value: function getDistanceAndVelocity(xValue) {\n            if (this.complete) {\n                throw new Error('Accelerator: velocity change is complete. Cannot call this function');\n            }\n\n            if (xValue >= this.T && !this.complete) {\n                this.complete = true;\n                if (typeof this.callBack === 'function') {\n                    this.callBack();\n                }\n            }\n\n            var obj = this.func(xValue);\n\n            return { distance: obj.yValue, velocity: obj.slopeValue };\n        }\n        /**\n         * Returns true if the acceleration is complete false other wise\n         *\n         * This is the second method exposed by the class that is not purely debuggin\n         *\n         * @return     {boolean}  True if complete, False otherwise.\n         */\n\n    }, {\n        key: 'isComplete',\n        value: function isComplete() {\n            return this.complete;\n        }\n    }]);\n\n    return BezierAccelerator;\n}();\n\nexports.default = BezierAccelerator;\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * This class performs velocity changes on objects in 1-dimensional motion,\n * but unlike the Bezier uses only the elapsed time OR distance as a constraint - not both.\n *\n * Hence one of the values dF or tF passed to the constructor MUST be set to false\n * to signify 'not provided'\n *\n * Hence the usual rules of physics can be applied and a constant acceleration\n * applied.\n *\n * Provides two exposed methods\n *\n * -    getDistance(x)\n * -    isComplete()\n *\n * It does NOT keep track of the moving object outside of the velocity change\n * window\n *\n * Elapsed time is measured from the start of the velocity change\n *\n * You can only use an instance of this class once. Once the velocity change is\n * complete any call to getDistance() will result in an error. This is because\n * the values that define the bezier function used to describe the acceleration\n * are passed in via the constructor and those values cannot be changed (and hence the bezier curve cannot be changed)\n * without creating a new object\n *\n */\nvar SimpleAccelerator = function () {\n    /**\n     * Constructs the object.\n     *\n     * @param  {number}    v0  The initial velocity - velocity before the acceleration\n     * @param  {number}    vF  The final velocity to be atained\n     * @param  {number}    tF  The time interval over which the acceleration is to be completed\n     * @param  {float}     dF  is the distance that the object should move while changing velocity\n     *\n     * @param  {Function}  cb  { parameter_description } NOTE - not tested\n     */\n    function SimpleAccelerator(v0, vF, tF, dF) {\n        var cb = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n\n        _classCallCheck(this, SimpleAccelerator);\n\n        // just changing the notation to what I am using\n\n        this.callBack = cb;\n        this.complete = false;\n        this.V = v0;\n        this.vF = vF;\n        this.D = dF;\n        this.T = tF;\n        if (dF === null && tF === null) {\n            throw new Error('Only one of dF tF can be null tF:' + tF + ' dF:' + dF);\n        } else if (dF !== null && tF !== null) {\n            throw new Error('Exactly one of dF, tF MUST be false tF:' + tF + ' dF:' + dF);\n        } else if (dF !== null) {\n            var vAverage = (vF - v0) / 2.0;\n            var t = dF / vAverage;\n\n            this.acceleration = (vF - v0) / t;\n            this.T = t;\n        } else // dF === null, tF !== null\n            {\n                this.acceleration = (vF - v0) / tF;\n                this.D = v0 * tF + 0.5 * this.acceleration * tF * tF;\n            }\n    }\n\n    /**\n     * Gets an object that contains the distance that has been traveled after xValue time units of the acceleration,\n     * and the velocity of travel at that same time\n     *\n     * NOTE :: This is one of only two methods exposed by the class that are not simply for debugging.\n     *\n     * @param  {number}  xValue  a number in the range  0..tF the elapsed time\n     *                           of the velocity change\n     * @return {object}   Of type\n     *                      { distance : , velocity : }\n     */\n\n\n    _createClass(SimpleAccelerator, [{\n        key: 'getDistanceAndVelocity',\n        value: function getDistanceAndVelocity(xValue) {\n            if (this.complete) {\n                throw new Error('Accelerator: velocity change is complete. Cannot call this function');\n            }\n\n            if (xValue >= this.T && !this.complete) {\n                this.complete = true;\n                if (typeof this.callBack === 'function') {\n                    this.callBack();\n                }\n            }\n            var v = this.V + xValue * this.acceleration;\n            var d = this.V * xValue + 0.5 * this.acceleration * xValue * xValue;\n\n            // console.log(`SimpleAccelerator xValue:${xValue}`\n            //     +` isComplete:${this.complete}`\n            //     +` this.T ${this.T}`\n            //     +` d:${d}  v:${v}`\n            //     )\n\n            return { distance: d, velocity: v };\n        }\n        /**\n         * Returns true if the acceleration is complete false other wise\n         *\n         * This is the second method exposed by the class that is not purely debuggin\n         *\n         * @return     {boolean}  True if complete, False otherwise.\n         */\n\n    }, {\n        key: 'isComplete',\n        value: function isComplete() {\n            return this.complete;\n        }\n    }]);\n\n    return SimpleAccelerator;\n}();\n\nexports.default = SimpleAccelerator;\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * Class for bezier cubic class.\n */\nvar BezierCubic = exports.BezierCubic = function () {\n    /**\n     * Constructs the object.\n     *\n     * @param  {array}  P0  Inital Point\n     * @param  {array}  P1  First attraction point\n     * @param  {array}  P2  Second attraction point\n     * @param  {array}  P3  End point\n     */\n    function BezierCubic(P0, P1, P2, P3) {\n        _classCallCheck(this, BezierCubic);\n\n        this.P0 = P0;\n        this.P1 = P1;\n        this.P2 = P2;\n        this.P3 = P3;\n    }\n\n    /**\n     * The derivative of a bezier function - calcs the derivative on a single coordinate\n     *\n     * @private\n     *\n     * @param  {number}  t   parameter value at which to calc the bezier coordinate\n     * @param  {number}  p0  coordinate value from P0\n     * @param  {number}  p1  coordinate value from P1\n     * @param  {number}  p2  coordinate value from P2\n     * @param  {number}  p3  coordinate value from P3\n     * @return {number}  { description_of_the_return_value }\n     */\n\n\n    _createClass(BezierCubic, [{\n        key: \"derivative\",\n        value: function derivative(t, p0, p1, p2, p3) {\n            function quadratic(p0, p1, p2, t) {\n                var res = p0 * (1.0 - t) * (1.0 - t) + 2.0 * p1 * (1.0 - t) * t + p2 * t * t;\n\n                return res;\n            }\n            var res = 3.0 * (quadratic(p1, p2, p3, t) - quadratic(p0, p1, p2, t));\n\n            return res;\n        }\n        /**\n         * Calculates the x or y coordinate of a bezier curve given a value of the parameterization\n         *\n         * @private\n         *\n         * @param  {number}  t   parameter value\n         * @param  {number}  p0  The p 0\n         * @param  {number}  p1  The p 1\n         * @param  {number}  p2  The p 2\n         * @param  {number}  p3  The p 3\n         * @return {number}  { description_of_the_return_value }\n         */\n\n    }, {\n        key: \"bezFunc\",\n        value: function bezFunc(t, p0, p1, p2, p3) {\n            var res = p0 * (1 - t) * (1 - t) * (1 - t) + 3.0 * p1 * (1 - t) * (1 - t) * t + 3.0 * p2 * (1 - t) * t * t + p3 * t * t * t;\n\n            return res;\n        }\n\n        /**\n         * Calculates an x value from a value t of the curves parameterization\n         *\n         * @param  {number}  t  parameter value\n         * @return {number}  corresponding x value\n         */\n\n    }, {\n        key: \"xFromT\",\n        value: function xFromT(t) {\n            var res = this.bezFunc(t, this.P0[0], this.P1[0], this.P2[0], this.P3[0]);\n\n            return res;\n        }\n\n        /**\n         * Calculates the derivative of xFromT\n         *\n         * @param  {number}  t value of parameter\n         * @return {number}  slope of the xFromT curve at the value of t\n         */\n\n    }, {\n        key: \"xFromTDerivative\",\n        value: function xFromTDerivative(t) {\n            var res = this.derivative(t, this.P0[0], this.P1[0], this.P2[0], this.P3[0]);\n\n            return res;\n        }\n\n        /**\n         * Calculates the y value of the point on the bezier curve corresponding to the\n         * parameter value t\n         *\n         * @param  {number}  t  parameter value\n         * @return {number}  y value corresponding to the value of t{ description_of_the_return_value }\n         */\n\n    }, {\n        key: \"yFromT\",\n        value: function yFromT(t) {\n            var res = this.bezFunc(t, this.P0[1], this.P1[1], this.P2[1], this.P3[1]);\n\n            return res;\n        }\n        /**\n        * This function computes the slope of the bezier curve at the parameter value t.\\\n        * This is also the value of the derivate dy/dx at that value of t\n        *\n        * @param      {float}  t       parameter value\n        * @return     {float}  slope\n        */\n\n    }, {\n        key: \"slopeAtT\",\n        value: function slopeAtT(t) {\n            var dydt = this.derivative(t, this.P0[1], this.P1[1], this.P2[1], this.P3[1]);\n            var dxdt = this.derivative(t, this.P0[0], this.P1[0], this.P2[0], this.P3[0]);\n            var dydx = dydt / dxdt;\n\n            return dydx;\n        }\n    }]);\n\n    return BezierCubic;\n}();\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.CubicBezier = CubicBezier;\nexports.QuadraticBezier = QuadraticBezier;\n\nvar _bezierCubic = __webpack_require__(2);\n\nvar _bezierQuadratic = __webpack_require__(4);\n\nvar _newtonRaphson = __webpack_require__(6);\n\nvar _newtonRaphson2 = _interopRequireDefault(_newtonRaphson);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*\n * One of the challenges with bezier curves is that the equations that describe these curves are parametric.\n * This means that each point on the curve, say (x,y), is is a function of some \"parameter\" which is unfortunately\n * for this application usually called 't'.\n *\n * I have continued this use of 't' for the parameter but please note this is NOT time.\n * In the discussion below and this module\n * the variable x is time and the variable y is distance\n *\n * However to be useful in this application we need to find a way of expressing the curve as a set of points\n * where the y coordinate is a function of the x cordinate, that is, points on the curve are of the form\n *\n *      [x, someFunction(x)]\n *\n * Thats what this module does. The two exported functions take the options that define a bezier curve and create\n * and return a function so that [x, returnedFunction(x)] are on the bezier curve.\n *\n * This process unfortunately requires solving non-linear equations. Thats where newton-Raphson comes in.\n *\n * That returned function is what needs to be used to bild accelerators\n */\n\n/**\n * This function returns a function which is a bezier Cubic curve as a\n * function of x so that (x, f(x)) is a point on the bezier curve.\n * Bezier functions are defined as curves (x(t), y(t)) for a parameter t between 0 .. 1\n * but cannot be rephrased as (x, f(x)). Getting itin this f(x) form takes computational work\n *\n * @param  {array}                      P0  The p 0\n * @param  {array}                      P1  The p 1\n * @param  {array}                      P2  The p 2\n * @param  {array}                      P3  The p 3\n * @return {function}                   returns a function that represents the bezier curve as a function of x\n */\nfunction CubicBezier(P0, P1, P2, P3) {\n    var bezObj = new _bezierCubic.BezierCubic(P0, P1, P2, P3);\n\n    /**\n     * Evaluates the bezier function and returns yValue and slope of the point\n     * on the curve corresponding to the given xValue\n     *\n     * @param      {number}  xValue the independent variable\n     * @return     {Object}  Returns object containing yValue and slopeValue\n     */\n    function functionOfX(xValue) {\n        // find the t value that corresponds to the x value\n        // get it by newton raphson\n\n        function f(t) {\n            return bezObj.xFromT(t) - xValue;\n        }\n        function fPrime(t) {\n            return bezObj.xFromTDerivative(t);\n        }\n\n        var tValue = (0, _newtonRaphson2.default)(f, fPrime, 0.5, null);\n\n        if (tValue === false) {\n            throw new Error('cannot find t for x in CubicBezier');\n        }\n        // const checkXValue = bezObj.xFromT(tValue);\n        // console.log(`xValue: ${xValue}  tValue: ${tValue} checkXValue: ${checkXValue}`)\n\n        // let xValue = bezObj.xFromT(t)\n        var yValue = bezObj.yFromT(tValue);\n        var slopeValue = bezObj.slopeAtT(tValue);\n\n        if (yValue === 0) {\n            // console.log('CubicBezier: yValue is zero'); // eslint-disable-line\n        }\n\n        return { yValue: yValue, slopeValue: slopeValue };\n    }\n\n    return functionOfX;\n}\n/**\n * This function returns a function which is a bezier Quadratuc curve as a\n * function of x so that (x, f(x)) is a point on the bezier curve\n *\n * @param  {number}                          P0  The p 0\n * @param  {number}                          P1  The p 1\n * @param  {number}                          P2  The p 2\n * @return {function}  Returns a function which gives the bezier curve as a function of x\n */\nfunction QuadraticBezier(P0, P1, P2) {\n    var bezObj = new _bezierQuadratic.BezierQuadratic(P0, P1, P2);\n\n    /**\n     * Evaluates the bezier function and returns yValue and slope of the point\n     * on the curve corresponding to the given xValue\n     *\n     * @param      {number}  xValue independent variable\n     * @return     {Object}  Returns object containing yValue and slopeValue\n     */\n    function functionOfX(xValue) {\n        function f(t) {\n            return bezObj.xFromT(t) - xValue;\n        }\n\n        function fPrime(t) {\n            return bezObj.xFromTDerivative(t);\n        }\n\n        var tValue = (0, _newtonRaphson2.default)(f, fPrime, 0.5, null);\n\n        if (tValue === false) {\n            console.log([P0, P1, P2]); // eslint-disable-line\n            throw new Error('cannot find t for x in QuadraticBezier xValue:' + xValue);\n        }\n        // const checkXValue = bezObj.xFromT(tValue);\n        // console.log(`xValue: ${xValue}  tValue: ${tValue} checkXValue: ${checkXValue}`)\n\n        // let x = bezObj.xFromT(t);\n        var yValue = bezObj.yFromT(tValue);\n        var slopeValue = bezObj.slopeAtT(tValue);\n\n        if (yValue === 0) {\n            console.log('CubicBezier: yValue is zero'); // eslint-disable-line\n        }\n\n        return { yValue: yValue, slopeValue: slopeValue };\n    }\n\n    return functionOfX;\n}\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * Class for bezier quadratic class.\n */\nvar BezierQuadratic = exports.BezierQuadratic = function () {\n    /**\n     * Constructs the object.\n     *\n     * @param  {Float}  P0  Initial point\n     * @param  {Float}  P1  Attraction point\n     * @param  {Float}  P2  End point\n     */\n    function BezierQuadratic(P0, P1, P2) {\n        _classCallCheck(this, BezierQuadratic);\n\n        this.P0 = P0;\n        this.P1 = P1;\n        this.P2 = P2;\n    }\n    /**\n    * The derivative of the bezier curve\n    *\n    * @param {number} t the curve parameter\n    * @param {number} p0 a coordinate of the point P0\n    * @param {number} p1 a coordinate of the point P1\n    * @param {number} p2 a coordinate of the point P2\n    *\n    * @return {number} derivative at t\n    */\n\n\n    _createClass(BezierQuadratic, [{\n        key: \"derivative\",\n        value: function derivative(t, p0, p1, p2) {\n            function linear(p0, p1, t) {\n                var res = p0 * (1.0 - t) + p1 * t;\n\n                return res;\n            }\n\n            var res = 2.0 * (linear(p1, p2, t) - linear(p0, p1, t));\n\n            return res;\n        }\n\n        /**\n        * The coordinate (x or y) of a point on the bezier curve as a function of the\n        * variable that parameterizes the curve\n        *\n        * @param {number} t the curve parameter\n        * @param {number} p0 a coordinate of the point P0\n        * @param {number} p1 a coordinate of the point P1\n        * @param {number} p2 a coordinate of the point P2\n        *\n        * @return {number} coordinate value at t\n        */\n\n    }, {\n        key: \"bezFunc\",\n        value: function bezFunc(t, p0, p1, p2) {\n            var res = p0 * (1 - t) * (1 - t) + 2.0 * p1 * (1 - t) * t + p2 * t * t;\n\n            return res;\n        }\n\n        /**\n        * The value of the x coordinate of a point on the bezier curve as a function of the\n        * variable that parameterizes the curve\n        *\n        * @param {number} t the curve parameter\n        *\n        * @return {number} coordinate value at t\n        */\n\n    }, {\n        key: \"xFromT\",\n        value: function xFromT(t) {\n            var res = this.bezFunc(t, this.P0[0], this.P1[0], this.P2[0]);\n\n            return res;\n        }\n\n        /**\n        * The value of the derivative of xFromT as a function of the\n        * variable that parameterizes the curve\n        *\n        * @param {number} t the curve parameter\n        *\n        * @return {number} derivative of XFromT at t\n        */\n\n    }, {\n        key: \"xFromTDerivative\",\n        value: function xFromTDerivative(t) {\n            var res = this.derivative(t, this.P0[0], this.P1[0], this.P2[0]);\n\n            return res;\n        }\n\n        /**\n        * The value of the y coordinate of a point on the bezier curve as a function of the\n        * variable that parameterizes the curve\n        *\n        * @param {number} t the curve parameter\n        *\n        * @return {number} coordinate value at t\n        */\n\n    }, {\n        key: \"yFromT\",\n        value: function yFromT(t) {\n            var res = this.bezFunc(t, this.P0[1], this.P1[1], this.P2[1]);\n\n            return res;\n        }\n        /**\n         * This function computes the slope of the bezier curve at the parameter value t.\\\n         * This is also the value of the derivate dy/dx at that value of t\n         *\n         * @param      {float}  t       parameter value\n         * @return     {float}  slope\n         */\n\n    }, {\n        key: \"slopeAtT\",\n        value: function slopeAtT(t) {\n            var dydt = this.derivative(t, this.P0[1], this.P1[1], this.P2[1]);\n            var dxdt = this.derivative(t, this.P0[0], this.P1[0], this.P2[0]);\n            var dydx = dydt / dxdt;\n\n            return dydx;\n        }\n    }]);\n\n    return BezierQuadratic;\n}();\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _bezierAccelerator = __webpack_require__(0);\n\nvar _bezierAccelerator2 = _interopRequireDefault(_bezierAccelerator);\n\nvar _simpleAccelerator = __webpack_require__(1);\n\nvar _simpleAccelerator2 = _interopRequireDefault(_simpleAccelerator);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction logger(s) {\n    var enabled = false;\n\n    if (enabled)\n        /* eslint-disable no-console */\n        {\n            console.log(s);\n        }\n    /* eslint-enable no-console */\n}\n/*\n* TODO\n*   -   does not correctly support advancing by a time interval that jumps over the end of an acceleration\n*/\n\n/**\n * This class seeks to keep track of the 1 dimensional motion of an object that is subject to\n * multiple velocity changes.\n *\n * The two relevant properties of this object are position and velocity which can be obtained\n * at any time with methods getPosition() and getVelocity()\n *\n * A starting velocity is set via the constructor.\n *\n * Time is advanced, and the position and velocity updated, by calling the method\n *\n *  advanceByTimeInterval(timeInterval)\n *\n * with a timeInterval or deltaTime which is a time interval since the last update and is in SECONDS not FRAMES\n *\n *  An alternative advance() method is provided that works in 'ticks' where the tick value in seconds is\n *  defined via the constructor()\n *\n * An acceleration (either positive or negative) can be scheduled by calling the method accelerate(vF, tF, dF)\n * this call will have no effect on the position or velocity until the next call to advance() or advanceByTimeINterval()\n *\n * That method will apply the acceleration on successive calls until the ending condition is encountered\n * tF seconds of acceleration have elapsed AND the body has traveled dF distance during the acceleration\n *\n * On finishing the acceleration the advance() or advanceByTimeInterval() method will call the resolve() function\n * of the promise returned by call to accelerate() that setup the acceleration\n */\n\nvar Accelerator = function () {\n    /**\n     * Constructs the object.\n     *\n     * @param  {Float}  v0       The initial Velocity\n     * @param  {Object} options  The options\n     */\n    function Accelerator(v0) {\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n        _classCallCheck(this, Accelerator);\n\n        if (v0 === null || v0 === undefined || typeof v0 !== 'number') {\n            throw new Error('Initial velocity not defined');\n        }\n\n        var defaults = {\n            tickInterval: 1 / 60, // @FIX this is going away\n            allowOverwrite: true\n        };\n\n        var actual = Object.assign({}, defaults, options);\n\n        this.tickInterval = actual.tickInterval;\n        this.allowOverwrite = actual.allowOverwrite;\n\n        this.time = 0.0;\n        this.elapsedTimeChangingVelocity = 0.0;\n        this.totalDistance = 0.0;\n        this.changingVelocity = false;\n        this.isWaiting = false;\n        this.bezAccelerator = null;\n        this.currentVelocity = v0;\n    }\n    /**\n     * Advance objects time by the equivalent of delta * PIXI tick value\n     *\n     * @param  {float}  delta   The delta\n     * @return {Float}  Total distance traveled after this time interval is added to\n     *                  total time of travel. Just for convenience as could get this with position()\n     */\n\n\n    _createClass(Accelerator, [{\n        key: 'advance',\n        value: function advance(delta) {\n            var deltaTime = delta * this.tickInterval;\n\n            return this.advanceByTimeInterval(deltaTime);\n        }\n\n        /**\n         * Advance the moving objects time by a time interval\n         *\n         * @param  {Float}  deltaTime  Interval since the last call to this method\n         * @return {Float}  Total distance traveled after this time interval is added to\n         *                  total time of travel. Just for convenience as could get this with position()\n         */\n\n    }, {\n        key: 'advanceByTimeInterval',\n        value: function advanceByTimeInterval(deltaTime) {\n            if (!this.changingVelocity && !this.isWaiting) {\n                this._advanceTimeAndDistanceWhileCoasting(deltaTime);\n            } else if (!this.changingVelocity && this.isWaiting) {\n                // this.time += deltaTime; - this will be done in _advanceTimeAndDistance\n                this.currentWaitingTime += deltaTime;\n                if (this.currentWaitingTime >= this.requiredWaitingTime) {\n                    this.isWaiting = false;\n                    if (typeof this.resolvePromiseFunction === 'function') {\n                        this.resolvePromiseFunction();\n                    }\n                }\n                this._advanceTimeAndDistanceWhileCoasting(deltaTime);\n            } else {\n                this.time += deltaTime;\n                this.elapsedTimeChangingVelocity += deltaTime;\n\n                var obj = this.decelerator.getDistanceAndVelocity(this.elapsedTimeChangingVelocity);\n                var tmp = obj.distance;\n                var tmpV = obj.velocity;\n\n                /**\n                 * This is a crude estimate of the velocity. At some point I should work out a formular\n                 * rather than do this approximation\n                 */\n\n                /**\n                 * Trying a new calculation of velocity\n                 */\n                // this.currentVelocity = deltaDistance / (deltaTime);\n                this.currentVelocity = tmpV;\n\n                this.totalDistance = this.distanceBeforeVelocityChange + tmp;\n\n                logger('Mover::advanceByTime  elapsedTimeChangingVelocity: ' + this.elapsedTimeChangingVelocity + (' timeForChange: ' + this.timeForChange) + (' DVdistance: ' + tmp + ' ') + (' totalDistance: ' + this.totalDistance) + (' velocity: ' + this.currentVelocity) + (' tmpV: ' + tmpV));\n\n                /**\n                 * There are a number of ways of detecting an end of an acceleration.\n                 *\n                 *  1.  we could ask the bezAccelerator with => if ( this.decelerator.isComplete() )\n                 *  2.  we could use the test below => if (this.elapsedTimeChangingVelocity >= this.timeForChange)\n                 *  3.  we could use the callback provided for in the BezAccelerator constructor. This approach\n                 *      would require code something like below in _accelerateNoDelay\n                 *\n                 *          const promise = new Promise( (resolve) =>\n                 *          {\n                 *              this.decelerator = new BezierAccelerator(v0, vF, tF, dF, () => {\n                 *                  resolve()\n                 *              });\n                 *          }\n                 *          this.resolvePromiseFunction = promise\n                 *          return promise;\n                 *\n                 *  @NOTE - how to do kill() in this last situation. Maybe have a kill method on\n                 *  the BezierAccelerator ??\n                 *\n                 * @NOTE : I tried this solution but it gave me some type of race condition\n                 * that I could not track down. To do with the fact that the promise does not get resolved until AFTER\n                 * the tick handler exits and advance() needs to know we are done BEFORE the promise then function\n                 * is called. The problem arose unit testing Kill()\n                 *\n                 */\n                if (this.elapsedTimeChangingVelocity >= this.timeForChange) {\n                    // Not sure why we need this - Brendon\n\n                    logger('Mover::advanceTimeBy::velocity increase DONE newVelocity:' + this.newVelocity);\n                    /**\n                     * This next line is to force the velocity to the specific vF value at the end of the\n                     * acceleration. The calculation of currentVelocity during an acceleration is only a crude\n                     * approximation and would not get the right final velocity\n                     */\n                    this.currentVelocity = this.newVelocity;\n                    this.changingVelocity = false;\n                    if (typeof this.resolvePromiseFunction === 'function') {\n                        this.resolvePromiseFunction();\n                    }\n                }\n            }\n\n            return this.totalDistance;\n        }\n\n        /**\n         * Gets the current position of the moving object\n         *\n         * @return {Float}  returns the current position of the moving object\n         */\n\n    }, {\n        key: 'getPosition',\n        value: function getPosition() {\n            return this.totalDistance;\n        }\n\n        /**\n         * Gets the current velocity of the moving object\n         *\n         * @return {Float}  returns the current velocity of the moving object\n         */\n\n    }, {\n        key: 'getVelocity',\n        value: function getVelocity() {\n            return this.currentVelocity;\n        }\n\n        /**\n         * Sets the velocity. This cannot bet set during an acceleration\n         *\n         * @param  {Float}  v  The currenct velocity\n         */\n\n    }, {\n        key: 'setVelocity',\n        value: function setVelocity(v) {\n            if (this.changingVelocity) {\n                throw new Error('cannot setVelocity during an acceleration');\n            }\n            this.currentVelocity = v;\n        }\n\n        /**\n         * Instructs the object to start a velocity change\n         *\n         * @param  {float}    vF     - is the velocity the object is to change to\n         * @param  {float}    tF     - is the time interval over which the change is to take place\n         * @param  {float}    dF     - is the distance that the object should move while changing velocity\n         * @return {Promise}  Promise which will be resolved when the acceleration\n         *                    has completed\n         *\n        accelerate(vF, tF, dF)\n        {\n            return this._accelerateNoDelay(vF, tF, dF);\n        }\n        */\n        /**\n         * Implements the guts of the accelerate action. Sets up the necessary properties\n         * and returns a promise.\n         *\n         * Under some circumstances it is permissible to start an acceleration even when one is already\n         * active. This depends on the property this.allowOverwrite\n         *\n         * When permited an overwrite (new acceleration when one is already active)\n         *  -   stops the current acceleration and resolves the associated promise\n         *  -   sets up a new acceleration using the current velocity, total time and total\n         *      distance left over from the kill'd\n         *      acceleration as the initial velocity and starting time and distance\n         *      for the new acceleration\n         *\n         *\n         * @param  {Float}   vF  is the velocity the object is to change to\n         *\n         * @param  {Float}   tF  is the time interval over which the change is to take place\n         * @param  {Float}   dF  is the distance that the object should move while changing velocity\n         *\n         * One of dF or tF can be set to null to apply an unconstrained acceleration. In such a\n         * case the Bezier accelerator is not used but rather a simple accelerator\n         *\n         * @return {Promise}  Promise which will be resolved when the acceleration\n         *                    has completed\n         */\n\n    }, {\n        key: 'accelerate',\n        value: function accelerate(vF, tF, dF) {\n            var _this = this;\n\n            logger('Accelerator::accelerate ' + vF + ' ' + tF + ' ' + dF);\n            if (!this.allowOverwrite) {\n                if (this.changingVelocity) {\n                    throw new Error('cannot have two accelerations underway at the same time');\n                }\n                if (this.isWaiting) {\n                    throw new Error('cannot have commence acceleration while wait is underway');\n                }\n            } else {\n                this.kill();\n            }\n\n            var v0 = this.currentVelocity;\n\n            this.distanceBeforeVelocityChange = this.totalDistance;\n            this.changingVelocity = true;\n            this.elapsedTimeChangingVelocity = 0.0;\n            this.timeForChange = tF;\n            this.newVelocity = vF;\n            this.distanceForChange = dF;\n\n            if (tF !== null && dF !== null) {\n                this.decelerator = new _bezierAccelerator2.default(v0, vF, tF, dF);\n            } else {\n                this.decelerator = new _simpleAccelerator2.default(v0, vF, tF, dF);\n            }\n\n            return new Promise(function (resolve) {\n                _this.resolvePromiseFunction = resolve;\n            });\n        }\n\n        /**\n         * Lets a timeinterval pass during which the accelerator moves along at a constant velocity.\n         *\n         * @param  {Float}   delay  The time interval\n         * @return {Promise}  { description_of_the_return_value }\n         */\n\n    }, {\n        key: 'wait',\n        value: function wait(delay) {\n            var _this2 = this;\n\n            return new Promise(function (resolve, reject) {\n                if (!delay || delay <= 0) {\n                    resolve();\n\n                    return;\n                }\n\n                if (_this2.changingVelocity) {\n                    reject('Accelerator: cannot wait while acceleration is underway');\n\n                    return;\n                }\n\n                if (_this2.isWaiting) {\n                    reject('cannot have commence acceleration while wait is underway');\n\n                    return;\n                }\n                _this2.isWaiting = true;\n                _this2.requiredWaitingTime = delay;\n                _this2.currentWaitingTime = 0.0;\n                _this2.resolvePromiseFunction = resolve;\n            });\n        }\n\n        /**\n         * Stops any current acceleration or wait & resolves the promise\n         */\n\n    }, {\n        key: 'kill',\n        value: function kill() {\n            if (this.changingVelocity) {\n                this.changingVelocity = false;\n                if (typeof this.resolvePromiseFunction === 'function') {\n                    this.resolvePromiseFunction();\n                }\n            } else if (this.isWaiting) {\n                this.isWaiting = false;\n                if (typeof this.resolvePromiseFunction === 'function') {\n                    this.resolvePromiseFunction();\n                }\n            } else {\n                // console.log(`WARNING: Accelerator - kill not necessary when no acceleration active`);\n            }\n        }\n\n        /**\n         * Advances total time & distance when NO acceleration is active\n         *\n         * @private\n         *\n         * @param  {Float}  deltaTime  The delta time\n         */\n\n    }, {\n        key: '_advanceTimeAndDistanceWhileCoasting',\n        value: function _advanceTimeAndDistanceWhileCoasting(deltaTime) {\n            this.time += deltaTime;\n            this.totalDistance += this.currentVelocity * deltaTime;\n            logger('\\nMover::advanceTimeBy_VelocityNotChanging ' + (' velocity:' + this.currentVelocity) + (' distance:' + this.totalDistance) + (' time: ' + this.time) + ('deltaTime:' + deltaTime));\n        }\n    }]);\n\n    return Accelerator;\n}();\n\nexports.default = Accelerator;\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (root, factory) {\n    if (true) {\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else if (typeof exports === 'object') {\n        module.exports = factory();\n    } else {\n        root.newtonRaphson = factory();\n  }\n}(this, function () {\n  return function findRoot(f, fprime, guess, options) {\n    options = options || {};\n    var tolerance = options.tolerance || 0.00000001;\n    var epsilon = options.epsilon || 0.0000000000001;\n    var maxIterations = options.maxIterations || 20;\n    var haveWeFoundSolution = false; \n    var newtonX;\n   \n    for (var i = 0; i < maxIterations; ++i) {\n      var denominator = fprime(guess);\n      if (Math.abs(denominator) < epsilon) {\n        return false\n      }\n   \n      result = guess - (f(guess) / denominator);\n      \n      var resultWithinTolerance = Math.abs(result - guess) < tolerance;\n      if (resultWithinTolerance) { \n        return result\n      }\n\n      guess = result;\n    }\n    \n    return false;\n  }\n}));\n\n/***/ })\n/******/ ]);\n});\n\n\n// WEBPACK FOOTER //\n// accelerate.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 5);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 65c6836098e8aaa92b81","import { QuadraticBezier, CubicBezier } from './bezier-functions';\n/**\n * This class performs velocity changes on objects in 1-dimensional motion\n *\n * Provides two exposed methods\n *\n * -    getDistance(x)\n * -    isComplete()\n *\n * It does NOT keep track of the moving object outside of the velocity change\n * window\n *\n * Elapsed time is measured from the start of the velocity change\n *\n * You can only use an instance of this class once. Once the velocity change is\n * complete any call to getDistance() will result in an error. This is because\n * the values that define the bezier function used to describe the acceleration\n * are passed in via the constructor and those values cannot be changed (and hence the bezier curve cannot be changed)\n * without creating a new object\n *\n */\nexport default class BezierAccelerator\n{\n    /**\n     * Constructs the object.\n     *\n     * @param  {number}    v0  The initial velocity - velocity before the acceleration\n     * @param  {number}    vF  The final velocity to be atained\n     * @param  {number}    tF  The time interval over which the acceleration is to be completed\n     * @param  {number}    dF  The distance the object is to travel over the period of the acceleration\n     *\n     * @param  {Function}  cb  { parameter_description } NOTE - not tested\n     */\n    constructor(v0, vF, tF, dF, cb = null)\n    {\n        // just changing the notation to what I am using\n        const V = v0;\n        const T = tF;\n        const D = dF;\n        let P0 = [];\n        let P1 = [];\n        let P2 = [];\n        let P3 = [];\n\n        this.callBack = cb;\n\n        /**\n         * This if statement is selecting the \"best\" bezier function for the set of defining values\n         * given. The motivation for this is to ensure that the most common deceleration case\n         *\n         *  -   going from a high velocity to zero velocity\n         *\n         *  uses a curve that results in a uniform deceleration. This is achieved by slecting the\n         *  Quadratic bezier for this particular circunstance.\n         *\n         *  It is possible to handle this particular case with a Cubic Bezier but the result would be that the\n         *  motion decelerates too much and has to speed up or reverse course at the end\n         *\n         */\n        if ((v0 > 0) && (vF === 0) && ((T * v0) > (D)))\n        {\n            // this is the one special case where a cubic will not do the job\n            P0 = [0.0, 0.0];\n            P2 = [T, D];\n            const p1X = (D - (vF * T)) / (v0 - vF);\n            const p1Y = (v0 * p1X);\n\n            this.func = QuadraticBezier(P0, [p1X, p1Y], P2);\n        }\n        else\n        {\n            P0 = [0.0, 0.0];\n            P1 = [T / 3.0, V * T / 3.0];\n            P2 = [(2.0 / 3.0) * T, D - (vF * T / 3.0)];\n            P3 = [T, D];\n            this.func = CubicBezier(P0, P1, P2, P3);\n        }\n\n        this.complete = false;\n\n        this.V = v0;\n        this.vF = vF;\n        this.T = tF;\n        this.D = dF;\n\n        this.P0 = P0;\n        this.P1 = P1;\n        this.P2 = P2;\n        this.P3 = P3;\n    }\n\n    /**\n     * Function that is the tangent line at P0\n     *\n     * @param  {number}  t  independent variable\n     * @return {number}  return value\n     */\n    tangentInitial(t)\n\t{\n        return this.V * t;\n    }\n\n    /**\n     * Function that is the tangent line at P3\n     *\n     * @return {Array}  { description_of_the_return_value }\n     */\n    dotPositions()\n    {\n        return [this.P0, this.P1, this.P2, this.P3];\n    }\n\n\t/**\n     * This function draws the trajectory of the final velocity.Used only for debugging and demonstration\n     * not part of the final exposed package\n     *\n     * @param  {float}  t  the independent\n     * @return {float}  the function return value\n     */\n    tangentFinal(t)\n\t{\n        const res =  (this.vF * t) + (this.D - (this.vF * this.T));\n\n        return res;\n    }\n\n    /**\n     * Gets an object that contains the distance that has been traveled after xValue time units of the acceleration,\n     * and the velocity of travel at that same time\n     *\n     * NOTE :: This is one of only two methods exposed by the class that are not simply for debugging.\n     *\n     * @param  {number}  xValue  a number in the range  0..tF the elapsed time\n     *                           of the velocity change\n     * @return {object}   Of type\n     *                      { distance : , velocity : }\n     */\n    getDistanceAndVelocity(xValue)\n    {\n        if (this.complete)\n        {\n            throw new Error('Accelerator: velocity change is complete. Cannot call this function');\n        }\n\n        if ((xValue >= this.T) && (!this.complete))\n        {\n            this.complete = true;\n            if ((typeof this.callBack === 'function'))\n            {\n                this.callBack();\n            }\n        }\n\n        const obj = this.func(xValue);\n\n        return { distance : obj.yValue, velocity : obj.slopeValue };\n    }\n    /**\n     * Returns true if the acceleration is complete false other wise\n     *\n     * This is the second method exposed by the class that is not purely debuggin\n     *\n     * @return     {boolean}  True if complete, False otherwise.\n     */\n    isComplete()\n    {\n        return this.complete;\n    }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/bezier-accelerator.js","/**\n * This class performs velocity changes on objects in 1-dimensional motion,\n * but unlike the Bezier uses only the elapsed time OR distance as a constraint - not both.\n *\n * Hence one of the values dF or tF passed to the constructor MUST be set to false\n * to signify 'not provided'\n *\n * Hence the usual rules of physics can be applied and a constant acceleration\n * applied.\n *\n * Provides two exposed methods\n *\n * -    getDistance(x)\n * -    isComplete()\n *\n * It does NOT keep track of the moving object outside of the velocity change\n * window\n *\n * Elapsed time is measured from the start of the velocity change\n *\n * You can only use an instance of this class once. Once the velocity change is\n * complete any call to getDistance() will result in an error. This is because\n * the values that define the bezier function used to describe the acceleration\n * are passed in via the constructor and those values cannot be changed (and hence the bezier curve cannot be changed)\n * without creating a new object\n *\n */\nexport default class SimpleAccelerator\n{\n    /**\n     * Constructs the object.\n     *\n     * @param  {number}    v0  The initial velocity - velocity before the acceleration\n     * @param  {number}    vF  The final velocity to be atained\n     * @param  {number}    tF  The time interval over which the acceleration is to be completed\n     * @param  {float}     dF  is the distance that the object should move while changing velocity\n     *\n     * @param  {Function}  cb  { parameter_description } NOTE - not tested\n     */\n    constructor(v0, vF, tF, dF, cb = null)\n    {\n        // just changing the notation to what I am using\n\n        this.callBack = cb;\n        this.complete = false;\n        this.V = v0;\n        this.vF = vF;\n        this.D = dF;\n        this.T = tF;\n        if ((dF === null) && (tF === null))\n        {\n            throw new Error(`Only one of dF tF can be null tF:${tF} dF:${dF}`);\n        }\n        else if ((dF !== null) && (tF !== null))\n        {\n            throw new Error(`Exactly one of dF, tF MUST be false tF:${tF} dF:${dF}`);\n        }\n        else if (dF !== null)\n        {\n            const vAverage = (vF - v0) / 2.0;\n            const t = dF / vAverage;\n\n            this.acceleration = (vF - v0) / t;\n            this.T = t;\n        }\n        else // dF === null, tF !== null\n        {\n            this.acceleration = (vF - v0) / tF;\n            this.D = (v0 * tF) + (0.5 * this.acceleration * tF * tF);\n        }\n    }\n\n    /**\n     * Gets an object that contains the distance that has been traveled after xValue time units of the acceleration,\n     * and the velocity of travel at that same time\n     *\n     * NOTE :: This is one of only two methods exposed by the class that are not simply for debugging.\n     *\n     * @param  {number}  xValue  a number in the range  0..tF the elapsed time\n     *                           of the velocity change\n     * @return {object}   Of type\n     *                      { distance : , velocity : }\n     */\n    getDistanceAndVelocity(xValue)\n    {\n        if (this.complete)\n        {\n            throw new Error('Accelerator: velocity change is complete. Cannot call this function');\n        }\n\n        if ((xValue >= this.T) && (!this.complete))\n        {\n            this.complete = true;\n            if ((typeof this.callBack === 'function'))\n            {\n                this.callBack();\n            }\n        }\n        const v = this.V + (xValue * this.acceleration);\n        const d = (this.V * xValue) + (0.5 * this.acceleration * xValue * xValue);\n\n        // console.log(`SimpleAccelerator xValue:${xValue}`\n        //     +` isComplete:${this.complete}`\n        //     +` this.T ${this.T}`\n        //     +` d:${d}  v:${v}`\n        //     )\n\n        return { distance : d, velocity : v };\n    }\n    /**\n     * Returns true if the acceleration is complete false other wise\n     *\n     * This is the second method exposed by the class that is not purely debuggin\n     *\n     * @return     {boolean}  True if complete, False otherwise.\n     */\n    isComplete()\n    {\n        return this.complete;\n    }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/simple-accelerator.js","/**\n * Class for bezier cubic class.\n */\nexport class BezierCubic\n{\n    /**\n     * Constructs the object.\n     *\n     * @param  {array}  P0  Inital Point\n     * @param  {array}  P1  First attraction point\n     * @param  {array}  P2  Second attraction point\n     * @param  {array}  P3  End point\n     */\n    constructor(P0, P1, P2, P3)\n    {\n        this.P0 = P0;\n        this.P1 = P1;\n        this.P2 = P2;\n        this.P3 = P3;\n    }\n\n    /**\n     * The derivative of a bezier function - calcs the derivative on a single coordinate\n     *\n     * @private\n     *\n     * @param  {number}  t   parameter value at which to calc the bezier coordinate\n     * @param  {number}  p0  coordinate value from P0\n     * @param  {number}  p1  coordinate value from P1\n     * @param  {number}  p2  coordinate value from P2\n     * @param  {number}  p3  coordinate value from P3\n     * @return {number}  { description_of_the_return_value }\n     */\n    derivative(t, p0, p1, p2, p3)\n    {\n        function quadratic(p0, p1, p2, t)\n        {\n            const res = (p0 * (1.0 - t) * (1.0 - t)) + (2.0 * p1 * (1.0 - t) * t) + (p2 * t * t);\n\n            return res;\n        }\n        const res = 3.0 * (quadratic(p1, p2, p3, t) - quadratic(p0, p1, p2, t));\n\n        return res;\n    }\n    /**\n     * Calculates the x or y coordinate of a bezier curve given a value of the parameterization\n     *\n     * @private\n     *\n     * @param  {number}  t   parameter value\n     * @param  {number}  p0  The p 0\n     * @param  {number}  p1  The p 1\n     * @param  {number}  p2  The p 2\n     * @param  {number}  p3  The p 3\n     * @return {number}  { description_of_the_return_value }\n     */\n    bezFunc(t, p0, p1, p2, p3)\n    {\n        const res =   (p0 * (1 - t) * (1 - t) * (1 - t))\n                    + (3.0 * p1 * (1 - t) * (1 - t) * t)\n                    + (3.0 * p2 * (1 - t) * t * t)\n                    + (p3 * t * t * t);\n\n        return res;\n    }\n\n    /**\n     * Calculates an x value from a value t of the curves parameterization\n     *\n     * @param  {number}  t  parameter value\n     * @return {number}  corresponding x value\n     */\n    xFromT(t)\n    {\n        const res = this.bezFunc(t, this.P0[0], this.P1[0], this.P2[0], this.P3[0]);\n\n        return res;\n    }\n\n    /**\n     * Calculates the derivative of xFromT\n     *\n     * @param  {number}  t value of parameter\n     * @return {number}  slope of the xFromT curve at the value of t\n     */\n    xFromTDerivative(t)\n    {\n        const res = this.derivative(t, this.P0[0], this.P1[0], this.P2[0], this.P3[0]);\n\n        return res;\n    }\n\n    /**\n     * Calculates the y value of the point on the bezier curve corresponding to the\n     * parameter value t\n     *\n     * @param  {number}  t  parameter value\n     * @return {number}  y value corresponding to the value of t{ description_of_the_return_value }\n     */\n    yFromT(t)\n    {\n        const res = this.bezFunc(t, this.P0[1], this.P1[1], this.P2[1], this.P3[1]);\n\n        return res;\n    }\n        /**\n     * This function computes the slope of the bezier curve at the parameter value t.\\\n     * This is also the value of the derivate dy/dx at that value of t\n     *\n     * @param      {float}  t       parameter value\n     * @return     {float}  slope\n     */\n    slopeAtT(t)\n    {\n        const dydt = this.derivative(t, this.P0[1], this.P1[1], this.P2[1], this.P3[1]);\n        const dxdt = this.derivative(t, this.P0[0], this.P1[0], this.P2[0], this.P3[0]);\n        const dydx = (dydt / dxdt);\n\n        return dydx;\n    }\n\n}\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/bezier-cubic.js","import { BezierCubic } from './bezier-cubic';\nimport { BezierQuadratic } from './bezier-quadratic';\nimport newtonRaphson from 'newton-raphson';\n/*\n * One of the challenges with bezier curves is that the equations that describe these curves are parametric.\n * This means that each point on the curve, say (x,y), is is a function of some \"parameter\" which is unfortunately\n * for this application usually called 't'.\n *\n * I have continued this use of 't' for the parameter but please note this is NOT time.\n * In the discussion below and this module\n * the variable x is time and the variable y is distance\n *\n * However to be useful in this application we need to find a way of expressing the curve as a set of points\n * where the y coordinate is a function of the x cordinate, that is, points on the curve are of the form\n *\n *      [x, someFunction(x)]\n *\n * Thats what this module does. The two exported functions take the options that define a bezier curve and create\n * and return a function so that [x, returnedFunction(x)] are on the bezier curve.\n *\n * This process unfortunately requires solving non-linear equations. Thats where newton-Raphson comes in.\n *\n * That returned function is what needs to be used to bild accelerators\n */\n\n/**\n * This function returns a function which is a bezier Cubic curve as a\n * function of x so that (x, f(x)) is a point on the bezier curve.\n * Bezier functions are defined as curves (x(t), y(t)) for a parameter t between 0 .. 1\n * but cannot be rephrased as (x, f(x)). Getting itin this f(x) form takes computational work\n *\n * @param  {array}                      P0  The p 0\n * @param  {array}                      P1  The p 1\n * @param  {array}                      P2  The p 2\n * @param  {array}                      P3  The p 3\n * @return {function}                   returns a function that represents the bezier curve as a function of x\n */\nexport function CubicBezier(P0, P1, P2, P3)\n{\n    const bezObj = new BezierCubic(P0, P1, P2, P3);\n\n    /**\n     * Evaluates the bezier function and returns yValue and slope of the point\n     * on the curve corresponding to the given xValue\n     *\n     * @param      {number}  xValue the independent variable\n     * @return     {Object}  Returns object containing yValue and slopeValue\n     */\n    function functionOfX(xValue)\n    {\n        // find the t value that corresponds to the x value\n        // get it by newton raphson\n\n        function f(t)\n        {\n            return (bezObj.xFromT(t) - xValue);\n        }\n        function fPrime(t)\n        {\n            return bezObj.xFromTDerivative(t);\n        }\n\n        const tValue = newtonRaphson(f, fPrime, 0.5, null);\n\n        if (tValue === false)\n        {\n            throw new Error('cannot find t for x in CubicBezier');\n        }\n        // const checkXValue = bezObj.xFromT(tValue);\n        // console.log(`xValue: ${xValue}  tValue: ${tValue} checkXValue: ${checkXValue}`)\n\n        // let xValue = bezObj.xFromT(t)\n        const yValue = bezObj.yFromT(tValue);\n        const slopeValue = bezObj.slopeAtT(tValue);\n\n        if (yValue === 0)\n        {\n            // console.log('CubicBezier: yValue is zero'); // eslint-disable-line\n        }\n\n        return { yValue, slopeValue };\n    }\n\n    return functionOfX;\n}\n/**\n * This function returns a function which is a bezier Quadratuc curve as a\n * function of x so that (x, f(x)) is a point on the bezier curve\n *\n * @param  {number}                          P0  The p 0\n * @param  {number}                          P1  The p 1\n * @param  {number}                          P2  The p 2\n * @return {function}  Returns a function which gives the bezier curve as a function of x\n */\nexport function QuadraticBezier(P0, P1, P2)\n {\n    const bezObj = new BezierQuadratic(P0, P1, P2);\n\n    /**\n     * Evaluates the bezier function and returns yValue and slope of the point\n     * on the curve corresponding to the given xValue\n     *\n     * @param      {number}  xValue independent variable\n     * @return     {Object}  Returns object containing yValue and slopeValue\n     */\n    function functionOfX(xValue)\n    {\n        function f(t)\n        {\n            return (bezObj.xFromT(t) - xValue);\n        }\n\n        function fPrime(t)\n        {\n            return bezObj.xFromTDerivative(t);\n        }\n\n        const tValue = newtonRaphson(f, fPrime, 0.5, null);\n\n        if (tValue === false)\n        {\n            console.log([P0, P1, P2]); // eslint-disable-line\n            throw new Error(`cannot find t for x in QuadraticBezier xValue:${xValue}`);\n        }\n        // const checkXValue = bezObj.xFromT(tValue);\n        // console.log(`xValue: ${xValue}  tValue: ${tValue} checkXValue: ${checkXValue}`)\n\n        // let x = bezObj.xFromT(t);\n        const yValue = bezObj.yFromT(tValue);\n        const slopeValue = bezObj.slopeAtT(tValue);\n\n        if (yValue === 0)\n        {\n            console.log('CubicBezier: yValue is zero'); // eslint-disable-line\n        }\n\n        return { yValue, slopeValue };\n    }\n\n    return functionOfX;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/bezier-functions.js","/**\n * Class for bezier quadratic class.\n */\nexport class BezierQuadratic\n{\n    /**\n     * Constructs the object.\n     *\n     * @param  {Float}  P0  Initial point\n     * @param  {Float}  P1  Attraction point\n     * @param  {Float}  P2  End point\n     */\n    constructor(P0, P1, P2)\n    {\n        this.P0 = P0;\n        this.P1 = P1;\n        this.P2 = P2;\n    }\n    /**\n    * The derivative of the bezier curve\n    *\n    * @param {number} t the curve parameter\n    * @param {number} p0 a coordinate of the point P0\n    * @param {number} p1 a coordinate of the point P1\n    * @param {number} p2 a coordinate of the point P2\n    *\n    * @return {number} derivative at t\n    */\n    derivative(t, p0, p1, p2)\n    {\n        function linear(p0, p1, t)\n        {\n            const res = (p0 * (1.0 - t)) + (p1 * t);\n\n            return res;\n        }\n\n        const res = 2.0 * (linear(p1, p2, t) - linear(p0, p1, t));\n\n        return res;\n    }\n\n    /**\n    * The coordinate (x or y) of a point on the bezier curve as a function of the\n    * variable that parameterizes the curve\n    *\n    * @param {number} t the curve parameter\n    * @param {number} p0 a coordinate of the point P0\n    * @param {number} p1 a coordinate of the point P1\n    * @param {number} p2 a coordinate of the point P2\n    *\n    * @return {number} coordinate value at t\n    */\n    bezFunc(t, p0, p1, p2)\n    {\n        const res =   (p0 * (1 - t) * (1 - t)) + (2.0 * p1 * (1 - t) * t) + (p2 * t * t);\n\n        return res;\n    }\n\n    /**\n    * The value of the x coordinate of a point on the bezier curve as a function of the\n    * variable that parameterizes the curve\n    *\n    * @param {number} t the curve parameter\n    *\n    * @return {number} coordinate value at t\n    */\n    xFromT(t)\n    {\n        const res = this.bezFunc(t, this.P0[0], this.P1[0], this.P2[0]);\n\n        return res;\n    }\n\n    /**\n    * The value of the derivative of xFromT as a function of the\n    * variable that parameterizes the curve\n    *\n    * @param {number} t the curve parameter\n    *\n    * @return {number} derivative of XFromT at t\n    */\n    xFromTDerivative(t)\n    {\n        const res = this.derivative(t, this.P0[0], this.P1[0], this.P2[0]);\n\n        return res;\n    }\n\n    /**\n    * The value of the y coordinate of a point on the bezier curve as a function of the\n    * variable that parameterizes the curve\n    *\n    * @param {number} t the curve parameter\n    *\n    * @return {number} coordinate value at t\n    */\n    yFromT(t)\n    {\n        const res = this.bezFunc(t, this.P0[1], this.P1[1], this.P2[1]);\n\n        return res;\n    }\n    /**\n     * This function computes the slope of the bezier curve at the parameter value t.\\\n     * This is also the value of the derivate dy/dx at that value of t\n     *\n     * @param      {float}  t       parameter value\n     * @return     {float}  slope\n     */\n    slopeAtT(t)\n    {\n        const dydt = this.derivative(t, this.P0[1], this.P1[1], this.P2[1]);\n        const dxdt = this.derivative(t, this.P0[0], this.P1[0], this.P2[0]);\n        const dydx = (dydt / dxdt);\n\n        return dydx;\n    }\n}\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/bezier-quadratic.js","import BezierAccelerator from './bezier-accelerator.js';\nimport SimpleAccelerator from './simple-accelerator.js';\n\nfunction logger(s)\n{\n    const enabled = false;\n\n    if (enabled)\n    /* eslint-disable no-console */\n        { console.log(s); }\n    /* eslint-enable no-console */\n}\n/*\n* TODO\n*   -   does not correctly support advancing by a time interval that jumps over the end of an acceleration\n*/\n\n/**\n * This class seeks to keep track of the 1 dimensional motion of an object that is subject to\n * multiple velocity changes.\n *\n * The two relevant properties of this object are position and velocity which can be obtained\n * at any time with methods getPosition() and getVelocity()\n *\n * A starting velocity is set via the constructor.\n *\n * Time is advanced, and the position and velocity updated, by calling the method\n *\n *  advanceByTimeInterval(timeInterval)\n *\n * with a timeInterval or deltaTime which is a time interval since the last update and is in SECONDS not FRAMES\n *\n *  An alternative advance() method is provided that works in 'ticks' where the tick value in seconds is\n *  defined via the constructor()\n *\n * An acceleration (either positive or negative) can be scheduled by calling the method accelerate(vF, tF, dF)\n * this call will have no effect on the position or velocity until the next call to advance() or advanceByTimeINterval()\n *\n * That method will apply the acceleration on successive calls until the ending condition is encountered\n * tF seconds of acceleration have elapsed AND the body has traveled dF distance during the acceleration\n *\n * On finishing the acceleration the advance() or advanceByTimeInterval() method will call the resolve() function\n * of the promise returned by call to accelerate() that setup the acceleration\n */\nexport default class Accelerator\n{\n    /**\n     * Constructs the object.\n     *\n     * @param  {Float}  v0       The initial Velocity\n     * @param  {Object} options  The options\n     */\n    constructor(v0, options = {})\n    {\n        if (v0 === null || v0 === undefined || typeof v0 !== 'number')\n        {\n            throw new Error('Initial velocity not defined');\n        }\n\n        const defaults = {\n            tickInterval : 1 / 60, // @FIX this is going away\n            allowOverwrite : true,\n        };\n\n        const actual = Object.assign({}, defaults, options);\n\n        this.tickInterval = actual.tickInterval;\n        this.allowOverwrite = actual.allowOverwrite;\n\n        this.time = 0.0;\n        this.elapsedTimeChangingVelocity = 0.0;\n        this.totalDistance = 0.0;\n        this.changingVelocity = false;\n        this.isWaiting = false;\n        this.bezAccelerator = null;\n        this.currentVelocity = v0;\n    }\n    /**\n     * Advance objects time by the equivalent of delta * PIXI tick value\n     *\n     * @param  {float}  delta   The delta\n     * @return {Float}  Total distance traveled after this time interval is added to\n     *                  total time of travel. Just for convenience as could get this with position()\n     */\n    advance(delta)\n    {\n        const deltaTime = delta * this.tickInterval;\n\n        return this.advanceByTimeInterval(deltaTime);\n    }\n\n    /**\n     * Advance the moving objects time by a time interval\n     *\n     * @param  {Float}  deltaTime  Interval since the last call to this method\n     * @return {Float}  Total distance traveled after this time interval is added to\n     *                  total time of travel. Just for convenience as could get this with position()\n     */\n    advanceByTimeInterval(deltaTime)\n    {\n        if (!this.changingVelocity && !this.isWaiting)\n        {\n            this._advanceTimeAndDistanceWhileCoasting(deltaTime);\n        }\n        else if (!this.changingVelocity && this.isWaiting)\n        {\n            // this.time += deltaTime; - this will be done in _advanceTimeAndDistance\n            this.currentWaitingTime += deltaTime;\n            if (this.currentWaitingTime >= this.requiredWaitingTime)\n            {\n                this.isWaiting = false;\n                if (typeof this.resolvePromiseFunction === 'function')\n                {\n                    this.resolvePromiseFunction();\n                }\n            }\n            this._advanceTimeAndDistanceWhileCoasting(deltaTime);\n        }\n        else\n        {\n            this.time += deltaTime;\n            this.elapsedTimeChangingVelocity += deltaTime;\n\n            const obj = this.decelerator.getDistanceAndVelocity(this.elapsedTimeChangingVelocity);\n            const tmp = obj.distance;\n            const tmpV = obj.velocity;\n\n            /**\n             * This is a crude estimate of the velocity. At some point I should work out a formular\n             * rather than do this approximation\n             */\n\n             /**\n              * Trying a new calculation of velocity\n              */\n            // this.currentVelocity = deltaDistance / (deltaTime);\n            this.currentVelocity = tmpV;\n\n            this.totalDistance = this.distanceBeforeVelocityChange + tmp;\n\n            logger(\n                `Mover::advanceByTime  elapsedTimeChangingVelocity: ${this.elapsedTimeChangingVelocity}`\n                + ` timeForChange: ${this.timeForChange}`\n                + ` DVdistance: ${tmp} `\n                + ` totalDistance: ${this.totalDistance}`\n                + ` velocity: ${this.currentVelocity}`\n                + ` tmpV: ${tmpV}`\n                );\n\n            /**\n             * There are a number of ways of detecting an end of an acceleration.\n             *\n             *  1.  we could ask the bezAccelerator with => if ( this.decelerator.isComplete() )\n             *  2.  we could use the test below => if (this.elapsedTimeChangingVelocity >= this.timeForChange)\n             *  3.  we could use the callback provided for in the BezAccelerator constructor. This approach\n             *      would require code something like below in _accelerateNoDelay\n             *\n             *          const promise = new Promise( (resolve) =>\n             *          {\n             *              this.decelerator = new BezierAccelerator(v0, vF, tF, dF, () => {\n             *                  resolve()\n             *              });\n             *          }\n             *          this.resolvePromiseFunction = promise\n             *          return promise;\n             *\n             *  @NOTE - how to do kill() in this last situation. Maybe have a kill method on\n             *  the BezierAccelerator ??\n             *\n             * @NOTE : I tried this solution but it gave me some type of race condition\n             * that I could not track down. To do with the fact that the promise does not get resolved until AFTER\n             * the tick handler exits and advance() needs to know we are done BEFORE the promise then function\n             * is called. The problem arose unit testing Kill()\n             *\n             */\n            if (this.elapsedTimeChangingVelocity >= this.timeForChange)\n            {\n                // Not sure why we need this - Brendon\n\n                logger(`Mover::advanceTimeBy::velocity increase DONE newVelocity:${this.newVelocity}`);\n                /**\n                 * This next line is to force the velocity to the specific vF value at the end of the\n                 * acceleration. The calculation of currentVelocity during an acceleration is only a crude\n                 * approximation and would not get the right final velocity\n                 */\n                this.currentVelocity = this.newVelocity;\n                this.changingVelocity = false;\n                if (typeof this.resolvePromiseFunction === 'function')\n                {\n                    this.resolvePromiseFunction();\n                }\n            }\n        }\n\n        return this.totalDistance;\n    }\n\n    /**\n     * Gets the current position of the moving object\n     *\n     * @return {Float}  returns the current position of the moving object\n     */\n    getPosition()\n    {\n        return this.totalDistance;\n    }\n\n    /**\n     * Gets the current velocity of the moving object\n     *\n     * @return {Float}  returns the current velocity of the moving object\n     */\n    getVelocity()\n    {\n        return this.currentVelocity;\n    }\n\n    /**\n     * Sets the velocity. This cannot bet set during an acceleration\n     *\n     * @param  {Float}  v  The currenct velocity\n     */\n    setVelocity(v)\n    {\n        if (this.changingVelocity)\n        {\n            throw new Error('cannot setVelocity during an acceleration');\n        }\n        this.currentVelocity = v;\n    }\n\n    /**\n     * Instructs the object to start a velocity change\n     *\n     * @param  {float}    vF     - is the velocity the object is to change to\n     * @param  {float}    tF     - is the time interval over which the change is to take place\n     * @param  {float}    dF     - is the distance that the object should move while changing velocity\n     * @return {Promise}  Promise which will be resolved when the acceleration\n     *                    has completed\n     *\n    accelerate(vF, tF, dF)\n    {\n        return this._accelerateNoDelay(vF, tF, dF);\n    }\n    */\n    /**\n     * Implements the guts of the accelerate action. Sets up the necessary properties\n     * and returns a promise.\n     *\n     * Under some circumstances it is permissible to start an acceleration even when one is already\n     * active. This depends on the property this.allowOverwrite\n     *\n     * When permited an overwrite (new acceleration when one is already active)\n     *  -   stops the current acceleration and resolves the associated promise\n     *  -   sets up a new acceleration using the current velocity, total time and total\n     *      distance left over from the kill'd\n     *      acceleration as the initial velocity and starting time and distance\n     *      for the new acceleration\n     *\n     *\n     * @param  {Float}   vF  is the velocity the object is to change to\n     *\n     * @param  {Float}   tF  is the time interval over which the change is to take place\n     * @param  {Float}   dF  is the distance that the object should move while changing velocity\n     *\n     * One of dF or tF can be set to null to apply an unconstrained acceleration. In such a\n     * case the Bezier accelerator is not used but rather a simple accelerator\n     *\n     * @return {Promise}  Promise which will be resolved when the acceleration\n     *                    has completed\n     */\n    accelerate(vF, tF, dF)\n    {\n        logger(`Accelerator::accelerate ${vF} ${tF} ${dF}`);\n        if (!this.allowOverwrite)\n        {\n            if (this.changingVelocity)\n            {\n                throw new Error('cannot have two accelerations underway at the same time');\n            }\n            if (this.isWaiting)\n            {\n                throw new Error('cannot have commence acceleration while wait is underway');\n            }\n        }\n        else\n        {\n            this.kill();\n        }\n\n        const v0 = this.currentVelocity;\n\n        this.distanceBeforeVelocityChange = this.totalDistance;\n        this.changingVelocity = true;\n        this.elapsedTimeChangingVelocity = 0.0;\n        this.timeForChange = tF;\n        this.newVelocity = vF;\n        this.distanceForChange = dF;\n\n        if ((tF !== null) && (dF !== null))\n        {\n            this.decelerator = new BezierAccelerator(v0, vF, tF, dF);\n        }\n        else\n        {\n            this.decelerator = new SimpleAccelerator(v0, vF, tF, dF);\n        }\n\n        return new Promise((resolve) =>\n        {\n            this.resolvePromiseFunction = resolve;\n        });\n    }\n\n    /**\n     * Lets a timeinterval pass during which the accelerator moves along at a constant velocity.\n     *\n     * @param  {Float}   delay  The time interval\n     * @return {Promise}  { description_of_the_return_value }\n     */\n    wait(delay)\n    {\n        return new Promise((resolve, reject) =>\n        {\n            if (!delay || delay <= 0)\n            {\n                resolve();\n\n                return;\n            }\n\n            if (this.changingVelocity)\n            {\n                reject('Accelerator: cannot wait while acceleration is underway');\n\n                return;\n            }\n\n            if (this.isWaiting)\n            {\n                reject('cannot have commence acceleration while wait is underway');\n\n                return;\n            }\n            this.isWaiting = true;\n            this.requiredWaitingTime = delay;\n            this.currentWaitingTime = 0.0;\n            this.resolvePromiseFunction = resolve;\n        });\n    }\n\n    /**\n     * Stops any current acceleration or wait & resolves the promise\n     */\n    kill()\n    {\n        if (this.changingVelocity)\n        {\n            this.changingVelocity = false;\n            if (typeof this.resolvePromiseFunction === 'function')\n            {\n                this.resolvePromiseFunction();\n            }\n        }\n        else if (this.isWaiting)\n        {\n            this.isWaiting = false;\n            if (typeof this.resolvePromiseFunction === 'function')\n            {\n                this.resolvePromiseFunction();\n            }\n        }\n        else\n        {\n            // console.log(`WARNING: Accelerator - kill not necessary when no acceleration active`);\n        }\n    }\n\n    /**\n     * Advances total time & distance when NO acceleration is active\n     *\n     * @private\n     *\n     * @param  {Float}  deltaTime  The delta time\n     */\n    _advanceTimeAndDistanceWhileCoasting(deltaTime)\n    {\n        this.time += deltaTime;\n        this.totalDistance += this.currentVelocity * deltaTime;\n        logger(`\\nMover::advanceTimeBy_VelocityNotChanging `\n            + ` velocity:${this.currentVelocity}`\n            + ` distance:${this.totalDistance}`\n            + ` time: ${this.time}`\n            + `deltaTime:${deltaTime}`);\n    }\n\n}\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.js","(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define([], factory);\n    } else if (typeof exports === 'object') {\n        module.exports = factory();\n    } else {\n        root.newtonRaphson = factory();\n  }\n}(this, function () {\n  return function findRoot(f, fprime, guess, options) {\n    options = options || {};\n    var tolerance = options.tolerance || 0.00000001;\n    var epsilon = options.epsilon || 0.0000000000001;\n    var maxIterations = options.maxIterations || 20;\n    var haveWeFoundSolution = false; \n    var newtonX;\n   \n    for (var i = 0; i < maxIterations; ++i) {\n      var denominator = fprime(guess);\n      if (Math.abs(denominator) < epsilon) {\n        return false\n      }\n   \n      result = guess - (f(guess) / denominator);\n      \n      var resultWithinTolerance = Math.abs(result - guess) < tolerance;\n      if (resultWithinTolerance) { \n        return result\n      }\n\n      guess = result;\n    }\n    \n    return false;\n  }\n}));\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/newton-raphson/index.js\n// module id = 6\n// module chunks = 0"],"sourceRoot":""}