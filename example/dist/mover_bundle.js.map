{"version":3,"sources":["webpack:///webpack/bootstrap 9cd7c7d82c009668adee","webpack:///../src/index.js","webpack:///./graph.js","webpack:///./motion_1.js","webpack:///./motion_2.js","webpack:///./motion.js","webpack:///./mover.js","webpack:///../~/newton-raphson/index.js","webpack:///../src/accelerator.js","webpack:///../src/bez_functions.js","webpack:///../src/bezier_cubic.js","webpack:///../src/bezier_quadratic.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA,mDAA2C,cAAc;;AAEzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;;AChEA;AAAA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEuB;;AAEvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,MAAM;AACzB;AACA,iBAAiB,MAAM;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,sEAAsE,iCAAiC;AACvG,oCAAoC,mBAAmB;AACvD,iCAAiC,IAAI;AACrC,oCAAoC,mBAAmB;AACvD,+BAA+B,qBAAqB;;AAEpD;AACA;AACA,mFAAmF,iBAAiB;AACpG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,MAAM;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,MAAM;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,GAAG,GAAG,GAAG,GAAG,GAAG;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,qBAAqB,YAAY,mBAAmB,SAAS,UAAU;AACxF;;AAEA;AACA;AACA;AACA,6DAA6D,eAAe,QAAQ,UAAU;AAC9F;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;;;;;;;;;;;;;;AChLA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,mBAAmB,UAAU;AAC7B,Y;AACA;AACA;AACA;AACA;AACA,2BAA2B,OAAO,KAAK,OAAO,YAAY,QAAQ,WAAW,QAAQ;AACrF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,kBAAkB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,mBAAmB,SAAS;AAC5B;AACA;AACA;AACA;;AAEA,2BAA2B,OAAO,KAAK,OAAO,YAAY,QAAQ,WAAW,QAAQ;;AAErF;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,mBAAmB,UAAU;AAC7B,Y;AACA;;AAEA;AACA;AACA;AACA,yDAAyD,OAAO,KAAK,OAAO;AAC5E;AACA;AACA;AACA,4DAA4D,QAAQ,KAAK,QAAQ;AACjF,2BAA2B,OAAO,KAAK,OAAO,YAAY,QAAQ,WAAW,QAAQ;AACrF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+B;AACA,wBAAwB,wB;AACxB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;AC9JA;AAAA,WAAW,wBAAwB;AACnC;AACc;AACd;;;AAGA;AACA;AACA;AACA;AACA,GAAG,uCAAuC;AAC1C,GAAG,0CAA0C;AAC7C,GAAG,uCAAuC;AAC1C,GAAG,uCAAuC;AAC1C,GAAG,uCAAuC;AAC1C,GAAG,0CAA0C;AAC7C;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;;ACtBA;AAAA,WAAW,wBAAwB;AACnC;AACc;;AAEd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB;AACA;AACA;;AAEA,C;;;;;;;ACjBA;AAAA,WAAW,wBAAwB;AACnC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG,uCAAuC;AAC1C,GAAG,0CAA0C;AAC7C,GAAG,uCAAuC;AAC1C,GAAG,uCAAuC;AAC1C,GAAG,uCAAuC;AAC1C,GAAG,0CAA0C;AAC7C;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,gBAAgB,wBAAwB;AACxC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG,M;AACH;AACA;AACA,oCAAoC,eAAe,WAAW,OAAO,SAAS,WAAW;AACzF;AACA;AACA;AACA;AACA;AACA;AACA,G;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,eAAe;AACxC;AACA;AACA,eAAe,eAAe;AAC9B;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;;AAEA,EAAE;;AAEF,C;;;;;;;;;;;AChGA;AAAA,WAAW,wBAAwB;AACnC;AAC6B;AACf;AACd;AACA;;AAEA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,a;AACA;AACA;AACA;AACA,EAAE;AACF;;;;;;;AChCA;AACA;AACA;AAAA;AAAA;AAAA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,oC;AACA;;AAEA,mBAAmB,mBAAmB;AACtC;AACA;AACA;AACA;;AAEA;;AAEA;AACA,kC;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,CAAC,G;;;;;;;;;AClCoC;;AAErC;AACA;AACA;AACA,MAAM,MAAM;AACZ,MAAM,MAAM;AACZ,MAAM,MAAM;AACZ,MAAM,MAAM;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,gC;AACA,2B;AACA;AACA;;AAEA;;AAEA;AACA,2DAA2D;;AAE3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8H;AACA,SAAS;AACT;AACA,gC;AACA,2B;AACA;AACA;;AAEA;;AAEA;AACA,2DAA2D;;AAE3D,uD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,eAAe,MAAM;AACrB;AACA,eAAe,MAAM;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;;AAGL;AAAA;AAAA;AACA;;;;;;;;;;;;AC3KyB;AACI;AAC7B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mCAAmC,QAAQ,aAAa,QAAQ,kBAAkB,cAAc;;AAEhG;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mCAAmC,QAAQ,aAAa,QAAQ,kBAAkB,cAAc;;AAEhG;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAAA;AAAA;;;;;;;;;AChGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,C;;;;;;;;;;;;;ACzDA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,C","file":"mover_bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 5);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 9cd7c7d82c009668adee","// const bez = require(\"./bez_functions\")\n// const accelerator = require(\"./accelerator.js\")\n\n// const BezDecelerator.class  = accelerator;\n\nfunction logger(s)\n{\n    //console.log(s)\n}\n\nimport {BezDecelerator} from \"./accelerator.js\"\n\n// window.BezDecelerator = BezDecelerator\n/*\n* This class seeks to keep track of the 1 dimensional motion of an object that is subject to\n* multiple velocity changes. \n*\n* The two relevant properties of this object are position and velocity which can be obtained\n* at any time with methods position() and velocity()\n*\n* A starting velocity is set via the constructor.\n*\n* Time is advanced, and the position and velocity updated, by calling the method advanceTimeBy(timeInterval)\n* with a timeInterval or deltaTime which is a time interval since the last update and is in SECONDS not FRAMES\n*\n* An acceleration (either positive or negative) can be scheduled by calling the method accelerate(vF, tF, dF)\n* this call will have no effect on the position or velocity until the next call to advanceTimeBy\n* That method will apply the acceleration on successive calls until the ending condition is encountered\n* tF seconds of acceleration have elapsed AND the body has traveled dF distance during the acceleration\n*\n* On finishing the acceleration the advanceTimeBy() method will call the resolve() function \n* of the promise returned by call to accelerate() that setup the acceleration\n*\n*\n*   -   accelerate(v0, vF, tF, dF, cb) - instructs the object to start a velocity change\n*           v0 - is current velocity and is unnecessary since the moving object knows its current velocity\n*           vF - is the velocity the object is to change to\n*           tF - is the time interval over which the change is to take place\n*           dF - is the distance that the object should move while changing velocity\n*           cb - is a function to call when the velocity change is complete\n*/\nexport default class Mover{\n\n    constructor(v0)\n    {\n\t\tthis.signature = \"Mover\"\n        this.time = 0.0;\n        this.elapsedTimeChangingVelocity = 0.0\n        this.timeInterval = 1.0/60.0\n        this.totalDistance = 0.0\n        this.changingVelocity = false\n        this.decelerator = null\n        this.currentVelocity = v0\n    }\n    /*\n    * Advance the moving objects time by a time interval\n    *\n    *   deltaTime {float} - interval since the last call to this method\n    *\n    *   returns {float} -   total distance traveled after this time interbal is added to total time\n    *                       of travel. Just for convenience as could get this with position()\n    */\n    advanceTimeBy(deltaTime)\n    {\n        if( ! this.changingVelocity ){\n            this.advanceTimeBy_VelocityNotChanging(deltaTime)\n        }else {\n            this.time += deltaTime\n            this.elapsedTimeChangingVelocity += deltaTime\n\n            let tmp = this.decelerator.getDistance(this.elapsedTimeChangingVelocity)\n            let deltaDistance = (this.distanceBeforeVelocityChange + tmp) - this.totalDistance\n            \n            this.currentVelocity = deltaDistance / (deltaTime)\n            this.totalDistance = this.distanceBeforeVelocityChange + tmp\n            \n            logger(\n                `Mover::advanceByTime  elapsedTimeChangingVelocity: ${this.elapsedTimeChangingVelocity}`\n                +` timeForChange: ${this.timeForChange}`\n                +` DVdistance: ${tmp} `\n                +` totalDistance: ${this.totalDistance}`\n                + `velocity: ${this.currentVelocity}`)\n            \n            if( this.elapsedTimeChangingVelocity >= this.timeForChange )\n            {\n                logger(`Mover::advanceTimeBy::velocity increase DONE newVelocity:${this.newVelocity}`)\n                this.currentVelocity = this.newVelocity\n                this.changingVelocity = false\n                if( typeof this.resolvePromiseFunction == \"function\")\n                    this.resolvePromiseFunction()\n            }\n        }\n        return this.totalDistance\n    }\n    /*\n    * returns {float} the current position of the moving object\n    */\n    position()\n    {\n        return this.totalDistance\n    }\n    /*\n    * returns {float} the current velocity of the moving object\n    */\n    velocity()\n    {\n        return this.currentVelocity\n    }\n    /*\n    *   accelerate(vF, tF, dF, cb) - instructs the object to start a velocity change\n    *           vF - is the velocity the object is to change to\n    *           tF - is the time interval over which the change is to take place\n    *           dF - is the distance that the object should move while changing velocity\n    *\n    *   returns a ES6 Promise which will be resolved when the acceleration has completed\n    */\n    accelerate(vF, tF, dF)\n    {\n\t\tlogger(`Mover::accelerate ${vF} ${tF} ${dF}`)\n\t\tif( this.changingVelocity ){\n\t\t\tthrow new Error(\"cannot have two accelerations underway at the same time\")\n\t\t}\n        let v0 = this.currentVelocity\n        let p = new Promise(function(resolve){\n            this.resolvePromiseFunction = resolve\n        }.bind(this))\n        this.distanceBeforeVelocityChange = this.totalDistance\n        this.changingVelocity = true\n        this.elapsedTimeChangingVelocity = 0.0\n        this.timeForChange = tF\n        this.newVelocity = vF\n        this.distanceForChange = dF\n        this.decelerator = new BezDecelerator(v0, vF, tF, dF)\n        return p\n    }\n\n    /*\n    * Internal only - advances time when no acceleration is active\n    */\n    advanceTimeBy_VelocityNotChanging(deltaTime)\n    {\n        this.time += deltaTime\n        this.totalDistance += this.currentVelocity * deltaTime\n        logger(`Mover::advanceTimeBy_VelocityNotChanging velocity:`\n            +` ${this.currentVelocity} distance:${this.totalDistance} time: ${this.time}`)\n    }\n\n    // ONLY    HERE DURING TRANSITION TO DELTA TIME\n    advanceTimeByFrames(numberOfFrames)\n    {\n        logger(`Mover::advanceTimeByFrames:numberOfFrames: ${numberOfFrames} time:${this.time}`)\n        let deltaTime = numberOfFrames * this.timeInterval\n        this.advanceTimeBy(deltaTime)\n    }\n\n    // ONLY    HERE DURING TRANSITION TO DELTA TIME\n    /*\n    * @TODO - change parameter to deltaTime in seconds - this thing should know nothing about\n    * frames and display issues.\n    */\n    getDistance(numberOfFrames)\n    {\n        this.advanceTimeByFrames(numberOfFrames)\n        return this.totalDistance\n    }\n\n    // ONLY    HERE DURING TRANSITION TO DELTA TIME\n    /*\n    * @TODO - change parameter to deltaTime in seconds - this thing should know nothing about\n    * frames and display issues.\n    */\n    getDistanceVelocityNotChanging(numberOfFrames)\n    {\n        this.time += this.timeInterval*numberOfFrames\n        this.totalDistance += this.currentVelocity*this.timeInterval*numberOfFrames\n        return this.totalDistance\n    }\n}\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../src/index.js\n// module id = 0\n// module chunks = 0","\nexport function graphFunction (ctx, axes, func, color, thick) {\n\tvar xx, yy\n\tvar dx=4, x0=axes.x0, y0=axes.y0, scale=axes.scale;\n\n\tvar iMax = Math.round((ctx.canvas.width)/dx);\n\tvar xDelta = (axes.xMax - axes.xMin)/((iMax) * 1.0)\n\n\tvar iMin = 0;\n\tvar h = ctx.canvas.height\n\tvar w = ctx.canvas.width\n\n\tctx.beginPath();\n\tctx.lineWidth = thick;\n\tctx.strokeStyle = color;\n\t// just to prove we got here\n\tfor (var i = iMin; i < iMax; i++) {\n\t\txx = dx*i; \n\t\tvar xValue = i * xDelta;\n\t\tvar yValue = func(xValue)\n\t\tvar xScaled = xx;\n\t\tvar yScaled =  (yValue * h) / axes.yMax \n\t\t// console.log(`loop x:${xValue} y:${yValue} xScaled: ${xScaled} yScaled:${yScaled}`)\n\t\t// yy = scale*func(xx/scale);\n\t\t\n\t\tif (i == 0) \n\t\t\tctx.moveTo(xScaled, h - yScaled);\n\t\telse         \n\t\t\tctx.lineTo(xScaled, h - yScaled );\n\t}\n\tctx.stroke();\n}\nfunction yMinMax(table) \n{\n\tlet resMax = table[0][1]\n\tlet resMin = table[0][1]\n\tfor( let i = 0; i < table.length; i++){\n\t\tif( table[i][1] > resMax)\n\t\t\tresMax = table[i][1]\n\t\tif( table[i][1] < resMin )\n\t\t\tresMin = table[i][1]\n\t}\n\treturn [resMin, resMax]\n}\n\n/*\n* table is an array of points (x,y) where each point is represented as an array of length 2\n*/\nexport function graphTable (ctx, axes, table, color, thick) \n{\n\t\n\tlet h = ctx.canvas.height\n\tlet w = ctx.canvas.width\n\n\tlet numberOfPoints = table.length * 1.0\n\tlet iMax = numberOfPoints\n\tlet iMin = 0;\n\tlet xMin = table[0][0]\n\tlet xMax = table[numberOfPoints - 1][0]\n\tlet pixelsBetweenXValues = Math.round(w/(xMax - xMin))\n\tlet dx = (xMax - xMin)/(numberOfPoints*1.0)\n\n\tlet tmp = yMinMax(table)\n\tlet yMin = tmp[0]\n\tlet yMax = tmp[1]\n\tlet dy = (yMax - yMin)/h\n\n\tvar xx, yy\n\n\tctx.beginPath();\n\tctx.lineWidth = thick;\n\tctx.strokeStyle = color;\n\n\t// let tmp1 = xMin * pixelsBetweenXValues\n\t// let tmp2 = xMax * pixelsBetweenXValues\n\n\tfor (var i = iMin;i < iMax; i++) {\n\t\tvar xValue = table[i][0]\n\t\tvar yValue = table[i][1]\n\t\tvar xScaled = xValue * pixelsBetweenXValues;\n\t\tvar yScaled =  ((yValue - yMin)* h)/(yMax - yMin) \n\n\t\t// console.log(`loop x:${xValue} y:${yValue} xScaled: ${xScaled} yScaled:${yScaled}`)\n\t\t\n\t\tif (i == 0) \n\t\t\tctx.moveTo(xScaled, h - yScaled);\n\t\telse         \n\t\t\tctx.lineTo(xScaled, h - yScaled );\n\t}\n\tctx.stroke();\n}\n\n\nexport function graphParameterizedFunction (ctx, axes, func, color, thick) {\n\tvar xx, yy\n\tvar dx=10, x0=axes.x0, y0=axes.y0, scale=axes.scale;\n\n\tvar iMax = Math.round((ctx.canvas.width)/dx);\n\tvar xDelta = (axes.xMax - axes.xMin)/((iMax) * 1.0)\n\n\tvar iMin = 0;\n\tvar h = ctx.canvas.height\n\tvar w = ctx.canvas.width\n\n\tctx.beginPath();\n\tctx.lineWidth = thick;\n\tctx.strokeStyle = color;\n\n\tfor (var i = iMin;i <= iMax; i++) {\n\t\txx = dx*i; \n\t\tvar pValue = i * xDelta;\n\n\t\tvar xyValues = func(pValue)\n\t\tvar xValue = xyValues[0]\n\t\tvar yValue = xyValues[1]\n\t\tconsole.log(\"graphParameterizedFunction: raw: \" + `x:${xValue} y:${yValue}`)\n\t\t// var xScaled = xx;\n\t\tvar xScaled = (xValue * w) / axes.xMax;\n\t\tvar yScaled =  (yValue * h) / axes.yMax \n\t\tconsole.log(\"graphParameterizedFunction: scaled: \" + `x:${xScaled} y:${yScaled}`)\n\t\t// console.log(`loop x:${xValue} y:${yValue} xScaled: ${xScaled} yScaled:${yScaled}`)\n\t\t// yy = scale*func(xx/scale);\n\t\t\n\t\tif (i == 0) \n\t\t\tctx.moveTo(xScaled, h - yScaled);\n\t\telse         \n\t\t\tctx.lineTo(xScaled, h - yScaled );\n\t}\n\tctx.stroke();\n}\n\n/*\n* The points are specified in mathematical (x,y) coordinates with (0,0) in the bottom left corner of the\n* region x > 0 y > 0\n*/\nfunction drawLine(ctx, startPt, endPt, strokeStyle)\n{\n\tvar w=ctx.canvas.width\n\tvar h=ctx.canvas.height\n\tvar x0 = startPt[0]\n\tvar x1 = endPt[0]\n\tvar y0 = startPt[1]\n\tvar y1 = endPt[1]\n\tctx.beginPath();\n\tctx.strokeStyle = strokeStyle; \n\tctx.moveTo(x0, h - y0); ctx.lineTo(x1, h - y1);\t\n\tctx.stroke();\n}\nexport function drawAxes(ctx, axes) \n{\n\n\tvar w = ctx.canvas.width\n\tvar h = canvas.height\n\tdrawLine(ctx, [0,0], [w, 0], \"rgb(0, 256,0)\")\n\tdrawLine(ctx, [0,0], [0, h], \"rgb(0,0,256)\")\n\tdrawLine(ctx, [w,0], [w,h], \"rgb(256,0,0)\")\n\tdrawLine(ctx, [0,h], [w,h], \"rgb(256,0,0)\")\n\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./graph.js\n// module id = 1\n// module chunks = 0","// import {graphFunction, drawAxes} from \"./graph.js\"\n// have own internal versions of grpah for the moment\nimport {Mover} from \"../src/index.js\"\nimport runSchedule from \"./motion.js\"\n\n\nlet schedule = {\n\tv0 : 0.0,\n\tdeltaT : 0.1,\n\taccelsTable: [\n\t\t{delay : 1, \tvF: 200, tF: 2 , dF: 200 \t},\n\t\t{delay : 0.5,  \tvF: 400, tF: 2 , dF: 600 \t},\n\t\t{delay : 1, \tvF: 200, tF: 2 , dF: 600 \t},\n\t\t{delay : 1, \tvF: 50,  tF: 2 , dF: 300 \t},\n\t\t{delay : 1, \tvF:  0,  tF: 2 , dF: 300 \t},\n\t\t{delay : 0.5,  \tvF: 400, tF: 2 , dF: 600 \t},\n\t]\n}\n\nexport default function(cb)\n{\n\trunSchedule(cb, schedule)\n}\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./motion_1.js\n// module id = 2\n// module chunks = 0","// import {graphFunction, drawAxes} from \"./graph.js\"\n// have own internal versions of grpah for the moment\nimport {Mover} from \"../src/index.js\"\n\nexport default function()\n{\n\tlet t = [];\n\tlet i\n\tlet dx = (Math.PI*4)/100.0\n\tlet f = function(x){\n\t\treturn 2.0*x + 3\n\t}\n\tfor(let i = 0; i < 100; i++){\n\t\tt.push([i*dx, f(i*dx)])\n\t}\n\treturn t\n\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./motion_2.js\n// module id = 3\n// module chunks = 0","// import {graphFunction, drawAxes} from \"./graph.js\"\n// have own internal versions of grpah for the moment\nimport Mover from \"../src/index.js\"\n\nlet sample_schedule = {\n\tv0 : 0.0,\t\t// initial velocity in distance units/second\n\tdeltaT : 0.1, \t//tick time interval  1.0/deltaT is number of ticks per second\n\taccelsTable: [\n\t\t// delay in seconds, vF in distance units/sec, tF in seconds, dF distance units \n\t\t{delay : 1, \tvF: 200, tF: 2 , dF: 200 \t},\n\t\t{delay : 0.5,  \tvF: 400, tF: 2 , dF: 600 \t},\n\t\t{delay : 1, \tvF: 200, tF: 2 , dF: 600 \t},\n\t\t{delay : 1, \tvF: 50,  tF: 2 , dF: 300 \t},\n\t\t{delay : 1, \tvF:  0,  tF: 2 , dF: 300 \t},\n\t\t{delay : 0.5,  \tvF: 400, tF: 2 , dF: 600 \t},\n\t]\n}\n\nfunction logger(s){\n\tconsole.log(s)\n}\n\n/*\n* This function runs a motion schedule or profile and when complete calls cb\n* above is a sample of a scedule\n*/\nexport default function (cb, schedule)\n{\n\tlet deltaT = schedule.deltaT\n\t\n\tfunction secondsToTicks(secs)\n\t{\n\t\tlet res = Math.round(secs*(1.0/deltaT))\n\t\treturn res\n\t}\n\tfunction delayInTicks(i)\n\t{\n\t\tlet res = secondsToTicks(schedule.accelsTable[i].delay)\n\t\treturn res\n\t}\n\n\tfunction calcDurationOfScheduleInTicks(accelsTable)\n\t{\n\t\tlet a = accelsTable\n\t\tlet dur = 0\n\t\tfor(let i = 0; i < accelsTable.length; i++){\n\t\t\tdur += Math.round(a[i].delay*(1.0/deltaT)) + Math.round(a[i].tF*(1.0/deltaT)) \n\t\t}\n\t\treturn dur\n\t}\n\n\tlet iMax = calcDurationOfScheduleInTicks(schedule.accelsTable) + Math.round(2.0/deltaT)\n\tlet i = 0\n\tlet accelFlag = false\n\tlet mover = new Mover(schedule.v0)\n\tlet table = []\n\n\tlet moreAccels = (schedule.accelsTable.length > 0)\n\tlet nextAccelIndex = 0;\n\tlet nextAt = delayInTicks(0)\n\n\tlet setupNextAcceleration = function(){\n\t\taccelFlag = false\n\t\tnextAccelIndex++\n\t\tif( nextAccelIndex >= schedule.accelsTable.length ){\n\t\t\tmoreAccels = false\n\t\t} else{\t\n\t\t\tnextAt = i + delayInTicks(nextAccelIndex)\n\t\t}\n\t\tlogger(`afterAcceleration next :${nextAccelIndex} nextAt: ${nextAt} more: ${moreAccels}`)\n\t}\n\tlet timer = setInterval(function(){\n\t\tif( i == iMax){\n\t\t\tclearInterval(timer)\n\t\t\tcb(table)\n\t\t\treturn\n\t\t}\t\n\t\tif( i == nextAt ){\n\t\t\taccelFlag = true\n\t\t\tlet vF = schedule.accelsTable[nextAccelIndex].vF\n\t\t\tlet tF = schedule.accelsTable[nextAccelIndex].tF\n\t\t\tlet dF = schedule.accelsTable[nextAccelIndex].dF\n\t\t\tlogger(`setup accel ${nextAccelIndex}`)\n\t\t\tmover.accelerate(vF, tF, dF)\n\t\t\t.then(()=>{\n\t\t\t\tlogger(` ${nextAccelIndex} acceleration ended `)\n\t\t\t\tsetupNextAcceleration()\n\t\t\t})\t\n\t\t}\n\t\tlet t = deltaT * i\n\t\tlet pos = mover.advanceTimeBy(deltaT)\n\t\ttable.push([t, pos])\n\t\ti++\n\t\t\n\t}, 1)\n\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./motion.js\n// module id = 4\n// module chunks = 0","// import {graphFunction, drawAxes} from \"./graph.js\"\n// have own internal versions of grpah for the moment\nimport {drawAxes, graphTable} from \"./graph.js\"\nimport {Mover} from \"../src/index.js\"\nimport motion1 from \"./motion_1.js\"\nimport motion2 from \"./motion_2.js\"\n\n$(document).ready(function(){\n\t$(\"#motion_1_button\").click(motion_1)\n\t$(\"#motion_2_button\").click(motion_2)\n})\n// just to prove we got here\nfunction motion_1(){\n\tdrawMotion(motion1)\n}\nfunction motion_2(){\n\tdrawMotion(motion2)\n}\nfunction drawMotion(motion) \n{\n\t$(\"#canvas-wrapper\").empty()\n\t$(\"#canvas-wrapper\").append('<canvas id=\"canvas\" width=\"1000\" height=\"500\"></canvas>')\n\n\tvar canvas = document.getElementById(\"canvas\");\n\tif (null==canvas || !canvas.getContext) return;\n\n\tconst positions = motion((table)=>{\n\t\tvar axes={} \n\t\tvar ctx=canvas.getContext(\"2d\");\n\t\tdrawAxes(ctx, axes);\n\t\tgraphTable(ctx, axes, table, \"rgb(66,44,255)\", 2);\n\t})\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./mover.js\n// module id = 5\n// module chunks = 0","(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define([], factory);\n    } else if (typeof exports === 'object') {\n        module.exports = factory();\n    } else {\n        root.newtonRaphson = factory();\n  }\n}(this, function () {\n  return function findRoot(f, fprime, guess, options) {\n    options = options || {};\n    var tolerance = options.tolerance || 0.00000001;\n    var epsilon = options.epsilon || 0.0000000000001;\n    var maxIterations = options.maxIterations || 20;\n    var haveWeFoundSolution = false; \n    var newtonX;\n   \n    for (var i = 0; i < maxIterations; ++i) {\n      var denominator = fprime(guess);\n      if (Math.abs(denominator) < epsilon) {\n        return false\n      }\n   \n      result = guess - (f(guess) / denominator);\n      \n      var resultWithinTolerance = Math.abs(result - guess) < tolerance;\n      if (resultWithinTolerance) { \n        return result\n      }\n\n      guess = result;\n    }\n    \n    return false;\n  }\n}));\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../~/newton-raphson/index.js\n// module id = 6\n// module chunks = 0","\nimport {QuadraticBezier, CubicBezier} from \"./bez_functions\"\n\n/**\n* This class performs velocity changes on objects in 1-dimensional motion\n*\n* v0 {float} - initial velocity units/time\n* vF {float} - final velocity\n* tF {float} - time interval over which velocity is to change, units are seconds\n* dF {float} - the distance over which the velocity change is to take place\n*\n* provides a single method getDistance(t) - will change name to positionAfter(t) at some point\n* that returns the total distance traveled since after t seconds of the velocity change\n*\n* It does NOT keep track of the moving object outside of the velocity change window\n*\n* Elapsed time is measured from the start of the velocity change\n*\n* You can only use one of these objects once. Once the velocity change is complete\n* any call to getPositionAfter will result in an error\n*\n* @TODO - this needs a good tidy-up and reworking into ES6 style - but thats for later\n*/\nexport const BezDecelerator = function Decelerator(v0, vF, tF, dF, cb)\n{\n\t// just changing the notation to what I am using\n    var V = v0;\n    var T = tF;\n    var D = dF;\n    let P0 = [], P1 = [], P2 = [], P3 = [];\n    let func;\n    const threshold = 0.1;\n    let complete = false;\n    let callBack = cb;\n\n\n    if( v0 == 0 )\n\t{\n        // throw new Error('zero initial velocity not implemented');\n\t\tlet P0 = [0.0, 0.0]\n\t\tlet P1 = [T/3.0, 0]\n\t\tlet P3 = [T, D]\n        let P2 = [(2.0/3.0)*T, D - vF*T/3.0]\n        func = CubicBezier(P0, P1, P2, P3);\n    } \n\t// Terminal velocity is zero - fit with quadratic\n    else if( vF ==  0)\n\t{\n        let P0 = [0.0,0.0];\n        let P2 = [T,D];\n        let P1 = [D/V, D];\n        func = QuadraticBezier(P0, P1, P2);\n    }\n\t// terminal velocity is low enough (slower than D/T) to simply slow down gradually to achieve goal\n\t// hence can fit with a quadratic bezier\n    else if( (vF > 0) && ((D - vF*T) >= (threshold * D) ) )\n\t{\n        let P0 = [0.0,0.0];\n        let P2 = [T,D];\n        let p1_x = (D - vF*T)/(v0 - vF);\n        let p1_y = (v0*p1_x);\n        func = QuadraticBezier(P0, [p1_x, p1_y], P2);\n    }\n\t// terminal velocity higher than D/T or only just a little bit less that D/T \n\t// and hence requires some speed up towards the end\n\t// needs a cubic bezier to fit\n    else if( (vF > 0) && ((D - vF*T) <=  (1.0 * threshold * D) ) )\n\t{\n        let P0 = [0.0, 0.0];\n        if(true){\n            let P1 = [T/3.0, V*T/3.0]\n            let P3 = [T,D];\n            let P2 = [(2.0/3.0)*T, D - vF*T/3.0]\n            func = CubicBezier(P0, P1, P2, P3);\n        }else{\n            // this does not work\n            let P1 = [D/V, D];\n            let P3 = [T,D];\n            let p2_x = T - D/vF; \n            let p2_y = 0.0; \n            let P2 = [p2_x, p2_y];\n            let alpha = .75;\n\n            let P1_adj = [P1[0]*alpha, P1[1]*alpha];\n\n    \t\t// attempts to add a stretch factor .. seems to work for alpha 0.0 .. 1.0\n            let P2_adj = [T - D*alpha/vF, D*(1.0 - alpha)]; // alpha 0 .. 1\n\n            func = CubicBezier(P0, P1_adj, P2_adj, P3);\n        }\n    }\n\t// terminal velocity is close to D/T and simply produces a straightline equal to D/T \n\t// does not seem like a good answer\n\t// THIS SHOULD BE OBSOLETE\n    else if( (vF > 0) && ((D - vF*T) <= (threshold * D) ) && ((D - vF*T) >=  (-1.0 * threshold * D) ) )\n\t{\n        throw new Error('dont know what to do with these velocities');\n        let P0 = [0.0, 0.0];\n        // let P1 = [D/V, D];\n        if( true ){\n            let P1 = [T/3.0, V*T/3.0]\n            let P3 = [T,D];\n            let P2 = [(2.0/3.0)*T, D - vF*T/3.0]\n            func = CubicBezier(P0, P1, P2, P3); \n        } else{\n            // this does not work\n            let p2_x = T - D/vF; \n            let p2_y = 0.0; \n            let P2 = [p2_x, p2_y];\n            let alpha = .75;\n\n            let P1_adj = [P1[0]*alpha, P1[1]*alpha];\n\n    \t\t// attempts to add a stretch factor .. seems to work for alpha 0.0 .. 1.0\n            let P2_adj = [T - D*alpha/vF, D*(1.0 - alpha)]; // alpha 0 .. 1\n\n            func = CubicBezier(P0, P1_adj, P2_adj, P3);\t\n        }\n    }\n\t// should not be any more cases\n    else\n\t{\n        throw new Error('dont know what to do -- not implemented');\n    }\n\t\n\t/*\n    * this function is the trajectory of the initial velocity. Used only for debugging and demonstration\n    * not part of the final exposed package\n    */\n    this.tangent_initial = function(t)\n\t{\n        return V*t;\n    }.bind(this);\n\n\t/* \n    * this function draws the trajectory of the final velocity.Used only for debugging and demonstration\n    * not part of the final exposed package\n    */\n    this.tangent_final = function(t)\n\t{\n        let res =  vF*t + (D - vF*T);\n        return res;\n    }.bind(this);\n\n    this.getPositionAfter = function(elapsed_time)\n    {\n        return this.getDistance(elapsed_time)\n    }.bind(this)\n    /*\n    * This is the only exposed method of the class that is not simply for debugging.\n    *\n    * x_value {float} - a number in the range  0..tF the elapsed time of the velocity change \n    *\n    * Returns {float} - the distance traveled since the start of the velocity change\n    */\n    this.getDistance = function(x_value)\n    {\n        if( this.complete){\n            throw new Error(\"Accelerator: velocity change is complete. Cannot call this function\")\n        }\n        if( (x_value >= T) && (! complete)) {\n            complete = true\n            if( (typeof callBack == \"function\" ) && (callBack != null) )\n                callBack()\n        }\n        let y_value = func(x_value)\n        return y_value\n    }.bind(this)\n\t\n\n};\n// module.exports = BezDecelerator;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../src/accelerator.js\n// module id = 7\n// module chunks = 0","import {BezierCubicClass} from \"./bezier_cubic\"\nimport {BezierQuadraticClass} from \"./bezier_quadratic\"\nimport newtonRaphson from \"newton-raphson\"\nconsole.log(newtonRaphson)\n/*\n* The key thing happening here is to convert a parameterized Bezier function\n* into a function of x\n*/\n\n/* \n* This function returns a function which is a bezier Cubic curve as a\n* function of x so that (x, f(x)) is a point on the bezier curve\n*/\nexport const CubicBezier = function CubicBezier(P0, P1, P2, P3)\n{\n    let bezObj = new BezierCubicClass(P0, P1, P2, P3)\n\n    let parametricFunc = function(t)\n    {\n        return [bezObj.x_From_t(t), bezObj.y_From_t(t)]\n    }\n\n    let functionOfX = function(x_value)\n    {\n        // find the t value that corresponds to the x value\n        // get it by newton raphson\n\n        let f = function(t)\n        {\n            return ( bezObj.x_From_t(t) - x_value )  \n        }\n        let fPrime = function(t)\n        {\n            return bezObj.x_From_t_derivative(t)\n        }\n\n        let t_value = newtonRaphson(f, fPrime, 0.5, null)\n        if( t_value === false){\n            throw new Error(\"cannot find t for x in CubicBezier\")\n        }\n        let check_x_value = bezObj.x_From_t(t_value)\n        // console.log(`x_value: ${x_value}  t_value: ${t_value} check_x_value: ${check_x_value}`)\n\n        // let x_value = bezObj.x_From_t(t)\n        let y_value = bezObj.y_From_t(t_value);\n        if(y_value == 0){\n            console.log(`CubicBezier: y_value is zero`)\n        }\n        return y_value\n    };\n\n    return functionOfX;\n}\n/*\n* This function returns a function which is a bezier Quadratuc curve as a\n* function of x so that (x, f(x)) is a point on the bezier curve\n*/\nexport const QuadraticBezier = function QuadraticBezier(P0, P1, P2)\n {\n    let bezObj = new BezierQuadraticClass(P0, P1, P2)\n\n    // find the t value that corresponds to the x value\n    // get it by newton raphson\n\n    let parametricFunc = function(t)\n    {\n        return [bezObj.x_From_t(t), bezObj.y_From_t(t)]\n    }\n\n    let functionOfX = function(x_value)\n    {\n        let f = function(t)\n        {\n            return ( bezObj.x_From_t(t) - x_value )  \n        }\n        let fPrime = function(t)\n        {\n            return bezObj.x_From_t_derivative(t)\n        }\n\n        let t_value = newtonRaphson(f, fPrime, 0.5, null)\n        if( t_value === false){\n            throw new Error(\"cannot find t for x in QuadraticBezier\")\n        }\n        let check_x_value = bezObj.x_From_t(t_value)\n        // console.log(`x_value: ${x_value}  t_value: ${t_value} check_x_value: ${check_x_value}`)\n\n        // let x = bezObj.x_From_t(t);\n        let y_value = bezObj.y_From_t(t_value);\n        if(y_value == 0){\n            console.log(`CubicBezier: y_value is zero`)\n        }\n        return y_value\n    };\n\n    return functionOfX;\n}\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../src/bez_functions.js\n// module id = 8\n// module chunks = 0","/*\n* This file implements a class which provides a Cubic Bezier curve and its derivative\n*/\n\n// this function is the first derivative of the cubic bezier. Needed for x_From_t_derivative\nfunction Q(p0, p1, p2, t)\n{\n    let res = p0*(1.0-t)*(1.0-t) + 2.0*p1*(1.0-t)*t + p2 * t*t\n    return res \n}\n\nexport class BezierCubicClass \n{\n    constructor(P0, P1, P2, P3){\n        this.P0 = P0\n        this.P1 = P1\n        this.P2 = P2\n        this.P3 = P3\n    }\n    // private\n    derivative(t, p0, p1, p2, p3)\n    {\n        let res = 3.0 * (Q(p1,p2,p3, t) - Q(p0, p1, p2, t))\n        return res;\n    }\n    // private\n    bez_func(t, p0, p1, p2, p3)\n    {\n        var res =   p0*(1-t)*(1-t)*(1-t) \n                    + 3.0 * p1 * (1-t)*(1-t)*t \n                    + 3.0 * p2 * (1 - t)* t * t \n                    + p3*t*t*t;\n        return res;\n    }\n\n    x_From_t(t)\n    {\n        let res = this.bez_func(t, this.P0[0], this.P1[0], this.P2[0], this.P3[0])\n        return res\n    }\n\n    x_From_t_derivative(t)\n    {\n        let res = this.derivative(t, this.P0[0], this.P1[0], this.P2[0], this.P3[0])\n        return res\n    }\n\n    y_From_t(t)\n    {\n        let res = this.bez_func(t, this.P0[1], this.P1[1], this.P2[1], this.P3[1])\n        return res\n    }\n    // currently not used\n    point_From_t()\n    {\n        let res = [this.x_From_t(t), this.y_From_t(t)]\n        return res\n    }\n} \n\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../src/bezier_cubic.js\n// module id = 9\n// module chunks = 0","\n// this function is the first derivative of the quadratic bezier. Needed for x_From_t_derivative\nfunction L(p0, p1, t)\n{\n    let res = p0*(1.0 - t) + p1*t\n    return res \n}\n\nexport class BezierQuadraticClass\n{\n    constructor(P0, P1, P2){\n        this.P0 = P0\n        this.P1 = P1\n        this.P2 = P2\n    }\n    derivative(t, p0, p1, p2)\n    {\n        let res = 2.0 * (L(p1,p2, t) - L(p0, p1, t))\n        return res;\n    }\n\n    bez_func(t, p0, p1, p2)\n    {\n        var res =   p0*(1-t)*(1-t) + 2.0 * p1 * (1-t)*t + p2 * t * t \n        return res;\n    }\n\n    x_From_t(t)\n    {\n        let res = this.bez_func(t, this.P0[0], this.P1[0], this.P2[0])\n        return res\n    }\n\n    x_From_t_derivative(t)\n    {\n        let res = this.derivative(t, this.P0[0], this.P1[0], this.P2[0])\n        return res\n    }\n\n    y_From_t(t)\n    {\n        let res = this.bez_func(t, this.P0[1], this.P1[1], this.P2[1])\n        return res\n    }\n\n    point_From_t()\n    {\n        let res = [this.x_From_t(t), this.y_From_t(t)]\n        return res\n    }\n} \n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../src/bezier_quadratic.js\n// module id = 10\n// module chunks = 0"],"sourceRoot":""}