{"version":3,"sources":["webpack:///webpack/bootstrap e52dc2522f93a60305e5","webpack:///./libs/graph.js","webpack:///./table/table.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA,mDAA2C,cAAc;;AAEzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;;;;;;AChEA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,sBAAsB,UAAU;AAChC,kB;AACA;AACA;AACA;AACA,gD;AACA,2BAA2B,OAAO,KAAK,OAAO,YAAY,QAAQ,WAAW,QAAQ;AACrF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,kBAAkB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,sBAAsB,SAAS;AAC/B;AACA;AACA;AACA,0D;;AAEA,2BAA2B,OAAO,KAAK,OAAO,YAAY,QAAQ,WAAW,QAAQ;;AAErF;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA,iD;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,sBAAsB,UAAU;AAChC,kB;AACA;;AAEA;AACA;AACA;AACA,+DAA+D,OAAO,KAAK,OAAO;AAClF;AACA;AACA,gD;AACA,kEAAkE,QAAQ,KAAK,QAAQ;AACvF,2BAA2B,OAAO,KAAK,OAAO,YAAY,QAAQ,WAAW,QAAQ;AACrF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kC;AACA,2BAA2B,wB;AAC3B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;AC3KA;AAAA;AACA;AACA;AACmB;;AAEnB;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,SAAS;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA,gB;AACA;;AAEA,gBAAgB;AAChB,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA,oBAAoB;AACpB;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,sBAAsB,UAAU;AAChC,kB;AACA;;AAEA;AACA;AACA;AACA,+DAA+D,OAAO,KAAK,OAAO;AAClF;AACA;AACA,gD;AACA,kEAAkE,QAAQ,KAAK,QAAQ;AACvF,2BAA2B,OAAO,KAAK,OAAO,YAAY,QAAQ,WAAW,QAAQ;AACrF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,sBAAsB,UAAU;AAChC,kB;AACA;AACA;AACA;AACA;AACA,gD;AACA,2BAA2B,OAAO,KAAK,OAAO,YAAY,QAAQ,WAAW,QAAQ;AACrF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kC;AACA,2BAA2B,wB;AAC3B;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA","file":"table_bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap e52dc2522f93a60305e5","/*\n* some simple utilities for graphing functions\n*/\nexport function graphFunction (ctx, axes, func, color, thick) {\n    var xx, yy;\n    var dx=4, x0=axes.x0, y0=axes.y0, scale=axes.scale;\n\n    var iMax = Math.round((ctx.canvas.width)/dx);\n    var xDelta = (axes.xMax - axes.xMin)/((iMax) * 1.0);\n    var iMin = 0;\n    var h = ctx.canvas.height;\n    var w = ctx.canvas.width;\n\n    ctx.beginPath();\n    ctx.lineWidth = thick;\n    ctx.strokeStyle = color;\n\t// just to prove we got here\n    for (var i = iMin; i < iMax; i++) {\n        xx = dx*i; \n        var xValue = i * xDelta;\n        var yValue = func(xValue);\n        var xScaled = xx;\n        var yScaled =  (yValue * h) / axes.yMax; \n\t\t// console.log(`loop x:${xValue} y:${yValue} xScaled: ${xScaled} yScaled:${yScaled}`)\n\t\t// yy = scale*func(xx/scale);\n\t\t\n        if (i == 0) \n            ctx.moveTo(xScaled, h - yScaled);\n        else         \n\t\t\tctx.lineTo(xScaled, h - yScaled );\n    }\n    ctx.stroke();\n}\nfunction yMinMax(table) \n{\n    let resMax = table[0][1];\n    let resMin = table[0][1];\n    for( let i = 0; i < table.length; i++){\n        if( table[i][1] > resMax)\n            resMax = table[i][1];\n        if( table[i][1] < resMin )\n            resMin = table[i][1];\n    }\n    return [resMin, resMax];\n}\n\n/*\n* table is an array of points (x,y) where each point is represented as an array of length 2\n*/\nexport function graphTable (ctx, axes, table, color, thick) \n{\n\t\n    let h = ctx.canvas.height;\n    let w = ctx.canvas.width;\n\n    let numberOfPoints = table.length * 1.0;\n    let iMax = numberOfPoints;\n    let iMin = 0;\n    let xMin = table[0][0];\n    let xMax = table[numberOfPoints - 1][0];\n    let pixelsBetweenXValues = Math.round(w/(xMax - xMin));\n    let dx = (xMax - xMin)/(numberOfPoints*1.0);\n\n    let tmp = yMinMax(table);\n    let yMin = tmp[0];\n    let yMax = tmp[1];\n    let dy = (yMax - yMin)/h;\n\n    var xx, yy;\n\n    ctx.beginPath();\n    ctx.lineWidth = thick;\n    ctx.strokeStyle = color;\n\n\t// let tmp1 = xMin * pixelsBetweenXValues\n\t// let tmp2 = xMax * pixelsBetweenXValues\n\n    for (var i = iMin;i < iMax; i++) {\n        var xValue = table[i][0];\n        var yValue = table[i][1];\n        var xScaled = xValue * pixelsBetweenXValues;\n        var yScaled =  ((yValue - yMin)* h)/(yMax - yMin); \n\n\t\t// console.log(`loop x:${xValue} y:${yValue} xScaled: ${xScaled} yScaled:${yScaled}`)\n\t\t\n        if (i == 0) \n            ctx.moveTo(xScaled, h - yScaled);\n        else         \n\t\t\tctx.lineTo(xScaled, h - yScaled );\n    }\n    ctx.stroke();\n}\n\nexport function drawDot(ctx, axes, x, y)\n{\n    return; // does not work yet\n    var h = ctx.canvas.height;\n    var w = ctx.canvas.width;\n    var xValue = x;\n    var yValue = y;\n    var xScaled = xValue * axes.xScaleFactor;\n    var yScaled = h - yValue * axes.yScaleFactor; \n    ctx.fillRect(0.0, h - 20 - 0.0, 20, 20);\n\t// ctx.fillRect(xScaled, yScaled, 100, 100)\n}\n\nexport function graphParameterizedFunction (ctx, axes, func, color, thick) {\n    var xx, yy;\n    var dx=10, x0=axes.x0, y0=axes.y0, scale=axes.scale;\n\n    var iMax = Math.round((ctx.canvas.width)/dx);\n    var xDelta = (axes.xMax - axes.xMin)/((iMax) * 1.0);\n\n    var iMin = 0;\n    var h = ctx.canvas.height;\n    var w = ctx.canvas.width;\n\n    ctx.beginPath();\n    ctx.lineWidth = thick;\n    ctx.strokeStyle = color;\n\n    for (var i = iMin;i <= iMax; i++) {\n        xx = dx*i; \n        var pValue = i * xDelta;\n\n        var xyValues = func(pValue);\n        var xValue = xyValues[0];\n        var yValue = xyValues[1];\n        console.log('graphParameterizedFunction: raw: ' + `x:${xValue} y:${yValue}`);\n\t\t// var xScaled = xx;\n        var xScaled = (xValue * w) / axes.xMax;\n        var yScaled =  (yValue * h) / axes.yMax; \n        console.log('graphParameterizedFunction: scaled: ' + `x:${xScaled} y:${yScaled}`);\n\t\t// console.log(`loop x:${xValue} y:${yValue} xScaled: ${xScaled} yScaled:${yScaled}`)\n\t\t// yy = scale*func(xx/scale);\n\t\t\n        if (i == 0) \n            ctx.moveTo(xScaled, h - yScaled);\n        else         \n\t\t\tctx.lineTo(xScaled, h - yScaled );\n    }\n    ctx.stroke();\n}\n\n/*\n* The points are specified in mathematical (x,y) coordinates with (0,0) in the bottom left corner of the\n* region x > 0 y > 0\n*/\nfunction drawLine(ctx, startPt, endPt, strokeStyle)\n{\n    var w=ctx.canvas.width;\n    var h=ctx.canvas.height;\n    var x0 = startPt[0];\n    var x1 = endPt[0];\n    var y0 = startPt[1];\n    var y1 = endPt[1];\n    ctx.beginPath();\n    ctx.strokeStyle = strokeStyle; \n    ctx.moveTo(x0, h - y0); ctx.lineTo(x1, h - y1);\t\n    ctx.stroke();\n}\nexport function drawAxes(ctx, axes) \n{\n\n    var w = ctx.canvas.width;\n    var h = canvas.height;\n    drawLine(ctx, [0,0], [w, 0], 'rgb(0, 256,0)');\n    drawLine(ctx, [0,0], [0, h], 'rgb(0,0,256)');\n    drawLine(ctx, [w,0], [w,h], 'rgb(256,0,0)');\n    drawLine(ctx, [0,h], [w,h], 'rgb(256,0,0)');\n\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./libs/graph.js\n// module id = 0\n// module chunks = 0","/*\n* Tests graphing a table of (x,y) values rather that working directly with a/the function\n*/\nimport {graphTable} from '../libs//graph.js';\n\n$(document).ready(function(){\n    $('#go_button').click(main);\n});\n\nfunction makeTable()\n{\n    let t = [];\n    let i;\n    let dx = (Math.PI*4)/100.0;\n    let f = function(x){\n        return Math.sin(x);\n        return 2.0*x + 3;\n    };\n    for(let i = 0; i < 100; i++){\n        t.push([i*dx, f(i*dx)]);\n    }\n    return t;\n}\nfunction main() \n{\n    $('#canvas-wrapper').empty();\n    $('#canvas-wrapper').append('<canvas id=\"canvas\" width=\"1000\" height=\"500\"></canvas>');\n\n    var canvas = document.getElementById('canvas');\n    if (null==canvas || !canvas.getContext) return;\n\n    const table = makeTable();\n\n    console.log(['table:', table]);\n\n    var axes={}; \n    var ctx=canvas.getContext('2d');\n\n\t// axes.x0 = 0; // starting x value\n\t// axes.xMin = 0; // starting x value\n\t// axes.xMax = maxT\n\t// axes.xScale = ctx.width / maxT\n\n\t// axes.yMin = 0\n\t// axes.yMax = maxD\n\t// axes.yScale = ctx.height / maxD\n\n\t// axes.y0 = 500\n\n\t// axes.scale = 40;                 // 40 pixels from x=0 to x=1\n\t// axes.doNegativeX = false;\n\n    drawAxes(ctx, axes);\n\n    graphTable(ctx, axes, table, 'rgb(66,44,255)', 2);\n}\n\nfunction graphParameterizedFunction (ctx, axes, func, color, thick) {\n    var xx, yy;\n    var dx=10, x0=axes.x0, y0=axes.y0, scale=axes.scale;\n\n    var iMax = Math.round((ctx.canvas.width)/dx);\n    var xDelta = (axes.xMax - axes.xMin)/((iMax) * 1.0);\n\n    var iMin = 0;\n    var h = ctx.canvas.height;\n    var w = ctx.canvas.width;\n\n    ctx.beginPath();\n    ctx.lineWidth = thick;\n    ctx.strokeStyle = color;\n\n    for (var i = iMin;i <= iMax; i++) {\n        xx = dx*i; \n        var pValue = i * xDelta;\n\n        var xyValues = func(pValue);\n        var xValue = xyValues[0];\n        var yValue = xyValues[1];\n        console.log('graphParameterizedFunction: raw: ' + `x:${xValue} y:${yValue}`);\n\t\t// var xScaled = xx;\n        var xScaled = (xValue * w) / axes.xMax;\n        var yScaled =  (yValue * h) / axes.yMax; \n        console.log('graphParameterizedFunction: scaled: ' + `x:${xScaled} y:${yScaled}`);\n\t\t// console.log(`loop x:${xValue} y:${yValue} xScaled: ${xScaled} yScaled:${yScaled}`)\n\t\t// yy = scale*func(xx/scale);\n\t\t\n        if (i == 0) \n            ctx.moveTo(xScaled, h - yScaled);\n        else         \n\t\t\tctx.lineTo(xScaled, h - yScaled );\n    }\n    ctx.stroke();\n}\n\nfunction graphFunction (ctx, axes, func, color, thick) {\n    var xx, yy;\n    var dx=4, x0=axes.x0, y0=axes.y0, scale=axes.scale;\n\n    var iMax = Math.round((ctx.canvas.width)/dx);\n    var xDelta = (axes.xMax - axes.xMin)/((iMax) * 1.0);\n    var frameInterval = 1.0/60.0;\n    var frameDelta = xDelta/frameInterval;\n    var iMin = 0;\n    var h = ctx.canvas.height;\n    var w = ctx.canvas.width;\n\n    ctx.beginPath();\n    ctx.lineWidth = thick;\n    ctx.strokeStyle = color;\n\n    for (var i = iMin;i <= iMax; i++) {\n        xx = dx*i; \n        var xValue = i * xDelta;\n        var yValue = func(frameDelta);\n\t\t// var yValue = func(xValue)\n        var xScaled = xx;\n        var yScaled =  (yValue * h) / axes.yMax; \n\t\t// console.log(`loop x:${xValue} y:${yValue} xScaled: ${xScaled} yScaled:${yScaled}`)\n\t\t// yy = scale*func(xx/scale);\n\t\t\n        if (i == 0) \n            ctx.moveTo(xScaled, h - yScaled);\n        else         \n\t\t\tctx.lineTo(xScaled, h - yScaled );\n    }\n    ctx.stroke();\n}\n/*\n* The points are specified in mathematical (x,y) coordinates with (0,0) in the bottom left corner of the\n* region x > 0 y > 0\n*/\nfunction drawLine(ctx, startPt, endPt, strokeStyle)\n{\n    var w=ctx.canvas.width;\n    var h=ctx.canvas.height;\n    var x0 = startPt[0];\n    var x1 = endPt[0];\n    var y0 = startPt[1];\n    var y1 = endPt[1];\n    ctx.beginPath();\n    ctx.strokeStyle = strokeStyle; \n    ctx.moveTo(x0, h - y0); ctx.lineTo(x1, h - y1);\t\n    ctx.stroke();\n\n}\nfunction drawAxes(ctx,axes) \n{\n\n    var w = ctx.canvas.width;\n    var h = canvas.height;\n    drawLine(ctx, [0,0], [w, 0], 'rgb(0, 256,0)');\n    drawLine(ctx, [0,0], [0, h], 'rgb(0,0,256)');\n    drawLine(ctx, [w,0], [w,h], 'rgb(256,0,0)');\n    drawLine(ctx, [0,h], [w,h], 'rgb(256,0,0)');\n\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./table/table.js\n// module id = 1\n// module chunks = 0"],"sourceRoot":""}