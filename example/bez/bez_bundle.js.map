{"version":3,"sources":["webpack:///webpack/bootstrap 4d6fbd2c4aa952f84114","webpack:///./libs/graph.js","webpack:///../src/bezier-accelerator.js","webpack:///./bez/bez.js","webpack:///../~/newton-raphson/index.js","webpack:///../src/bezier-cubic.js","webpack:///../src/bezier-functions.js","webpack:///../src/bezier-quadratic.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA,mDAA2C,cAAc;;AAEzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;;;;;;AChEA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,sBAAsB,UAAU;AAChC,kB;AACA;AACA;AACA;AACA,gD;AACA,2BAA2B,OAAO,KAAK,OAAO,YAAY,QAAQ,WAAW,QAAQ;AACrF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,kBAAkB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,sBAAsB,SAAS;AAC/B;AACA;AACA;AACA,0D;;AAEA,2BAA2B,OAAO,KAAK,OAAO,YAAY,QAAQ,WAAW,QAAQ;;AAErF;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA,iD;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,sBAAsB,UAAU;AAChC,kB;AACA;;AAEA;AACA;AACA;AACA,+DAA+D,OAAO,KAAK,OAAO;AAClF;AACA;AACA,gD;AACA,kEAAkE,QAAQ,KAAK,QAAQ;AACvF,2BAA2B,OAAO,KAAK,OAAO,YAAY,QAAQ,WAAW,QAAQ;AACrF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kC;AACA,2BAA2B,wB;AAC3B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;AC3KuC;;AAEvC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB,YAAY,SAAS;AACrB,YAAY,wBAAwB,GAAG;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,eAAe,MAAM;AACrB;AACA,eAAe,MAAM;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,YAAY;AAC7B;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;;;ACjHA;AAAA;AACA;AACA;;AAEA;AACkE;;AAElE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA,aAAa;AACb;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,C;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,4G;AACA;AACA;AACA;AACA;AACA,C;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,4G;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,gB;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACzIA;AACA;AACA;AAAA;AAAA;AAAA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,oC;AACA;;AAEA,mBAAmB,mBAAmB;AACtC;AACA;AACA;AACA;;AAEA;;AAEA;AACA,kC;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,CAAC,G;;;;;;;ACnCD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAAA;AAAA;;;;;;;;;;;;;AC5EsB;AACI;AAC1B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,mCAAmC,QAAQ,aAAa,QAAQ,kBAAkB,cAAc;;AAEhG;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,8EAA8E,QAAQ;AACtF;AACA;AACA,mCAAmC,QAAQ,aAAa,QAAQ,kBAAkB,cAAc;;AAEhG;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AAAA;AAAA;;;;;;;;;ACjHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,MAAM;AACtB,gBAAgB,MAAM;AACtB,gBAAgB,MAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AAAA;AAAA","file":"bez_bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 4d6fbd2c4aa952f84114","/*\n* some simple utilities for graphing functions\n*/\nexport function graphFunction (ctx, axes, func, color, thick) {\n    var xx, yy;\n    var dx=4, x0=axes.x0, y0=axes.y0, scale=axes.scale;\n\n    var iMax = Math.round((ctx.canvas.width)/dx);\n    var xDelta = (axes.xMax - axes.xMin)/((iMax) * 1.0);\n    var iMin = 0;\n    var h = ctx.canvas.height;\n    var w = ctx.canvas.width;\n\n    ctx.beginPath();\n    ctx.lineWidth = thick;\n    ctx.strokeStyle = color;\n\t// just to prove we got here\n    for (var i = iMin; i < iMax; i++) {\n        xx = dx*i; \n        var xValue = i * xDelta;\n        var yValue = func(xValue);\n        var xScaled = xx;\n        var yScaled =  (yValue * h) / axes.yMax; \n\t\t// console.log(`loop x:${xValue} y:${yValue} xScaled: ${xScaled} yScaled:${yScaled}`)\n\t\t// yy = scale*func(xx/scale);\n\t\t\n        if (i == 0) \n            ctx.moveTo(xScaled, h - yScaled);\n        else         \n\t\t\tctx.lineTo(xScaled, h - yScaled );\n    }\n    ctx.stroke();\n}\nfunction yMinMax(table) \n{\n    let resMax = table[0][1];\n    let resMin = table[0][1];\n    for( let i = 0; i < table.length; i++){\n        if( table[i][1] > resMax)\n            resMax = table[i][1];\n        if( table[i][1] < resMin )\n            resMin = table[i][1];\n    }\n    return [resMin, resMax];\n}\n\n/*\n* table is an array of points (x,y) where each point is represented as an array of length 2\n*/\nexport function graphTable (ctx, axes, table, color, thick) \n{\n\t\n    let h = ctx.canvas.height;\n    let w = ctx.canvas.width;\n\n    let numberOfPoints = table.length * 1.0;\n    let iMax = numberOfPoints;\n    let iMin = 0;\n    let xMin = table[0][0];\n    let xMax = table[numberOfPoints - 1][0];\n    let pixelsBetweenXValues = Math.round(w/(xMax - xMin));\n    let dx = (xMax - xMin)/(numberOfPoints*1.0);\n\n    let tmp = yMinMax(table);\n    let yMin = tmp[0];\n    let yMax = tmp[1];\n    let dy = (yMax - yMin)/h;\n\n    var xx, yy;\n\n    ctx.beginPath();\n    ctx.lineWidth = thick;\n    ctx.strokeStyle = color;\n\n\t// let tmp1 = xMin * pixelsBetweenXValues\n\t// let tmp2 = xMax * pixelsBetweenXValues\n\n    for (var i = iMin;i < iMax; i++) {\n        var xValue = table[i][0];\n        var yValue = table[i][1];\n        var xScaled = xValue * pixelsBetweenXValues;\n        var yScaled =  ((yValue - yMin)* h)/(yMax - yMin); \n\n\t\t// console.log(`loop x:${xValue} y:${yValue} xScaled: ${xScaled} yScaled:${yScaled}`)\n\t\t\n        if (i == 0) \n            ctx.moveTo(xScaled, h - yScaled);\n        else         \n\t\t\tctx.lineTo(xScaled, h - yScaled );\n    }\n    ctx.stroke();\n}\n\nexport function drawDot(ctx, axes, x, y)\n{\n    return; // does not work yet\n    var h = ctx.canvas.height;\n    var w = ctx.canvas.width;\n    var xValue = x;\n    var yValue = y;\n    var xScaled = xValue * axes.xScaleFactor;\n    var yScaled = h - yValue * axes.yScaleFactor; \n    ctx.fillRect(0.0, h - 20 - 0.0, 20, 20);\n\t// ctx.fillRect(xScaled, yScaled, 100, 100)\n}\n\nexport function graphParameterizedFunction (ctx, axes, func, color, thick) {\n    var xx, yy;\n    var dx=10, x0=axes.x0, y0=axes.y0, scale=axes.scale;\n\n    var iMax = Math.round((ctx.canvas.width)/dx);\n    var xDelta = (axes.xMax - axes.xMin)/((iMax) * 1.0);\n\n    var iMin = 0;\n    var h = ctx.canvas.height;\n    var w = ctx.canvas.width;\n\n    ctx.beginPath();\n    ctx.lineWidth = thick;\n    ctx.strokeStyle = color;\n\n    for (var i = iMin;i <= iMax; i++) {\n        xx = dx*i; \n        var pValue = i * xDelta;\n\n        var xyValues = func(pValue);\n        var xValue = xyValues[0];\n        var yValue = xyValues[1];\n        console.log('graphParameterizedFunction: raw: ' + `x:${xValue} y:${yValue}`);\n\t\t// var xScaled = xx;\n        var xScaled = (xValue * w) / axes.xMax;\n        var yScaled =  (yValue * h) / axes.yMax; \n        console.log('graphParameterizedFunction: scaled: ' + `x:${xScaled} y:${yScaled}`);\n\t\t// console.log(`loop x:${xValue} y:${yValue} xScaled: ${xScaled} yScaled:${yScaled}`)\n\t\t// yy = scale*func(xx/scale);\n\t\t\n        if (i == 0) \n            ctx.moveTo(xScaled, h - yScaled);\n        else         \n\t\t\tctx.lineTo(xScaled, h - yScaled );\n    }\n    ctx.stroke();\n}\n\n/*\n* The points are specified in mathematical (x,y) coordinates with (0,0) in the bottom left corner of the\n* region x > 0 y > 0\n*/\nfunction drawLine(ctx, startPt, endPt, strokeStyle)\n{\n    var w=ctx.canvas.width;\n    var h=ctx.canvas.height;\n    var x0 = startPt[0];\n    var x1 = endPt[0];\n    var y0 = startPt[1];\n    var y1 = endPt[1];\n    ctx.beginPath();\n    ctx.strokeStyle = strokeStyle; \n    ctx.moveTo(x0, h - y0); ctx.lineTo(x1, h - y1);\t\n    ctx.stroke();\n}\nexport function drawAxes(ctx, axes) \n{\n\n    var w = ctx.canvas.width;\n    var h = canvas.height;\n    drawLine(ctx, [0,0], [w, 0], 'rgb(0, 256,0)');\n    drawLine(ctx, [0,0], [0, h], 'rgb(0,0,256)');\n    drawLine(ctx, [w,0], [w,h], 'rgb(256,0,0)');\n    drawLine(ctx, [0,h], [w,h], 'rgb(256,0,0)');\n\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./libs/graph.js\n// module id = 0\n// module chunks = 0","import { QuadraticBezier, CubicBezier } from './bezier-functions';\n\n/*\n*   @TODO\n*   -   there is a lot of duplicate code in here in the handling of the different cases.\n*       can wind a lot of it into one piece\n*   -   need a general tidyup of names and code nolonger used\n*   - this needs a good tidy-up and reworking into ES6 style - but thats for later\n*/\n\n/**\n * This class performs velocity changes on objects in 1-dimensional motion\n *\n * provides a single method getDistance(t) - will change name to positionAfter(t) at some point\n * that returns the total distance traveled since after t seconds of the velocity change\n *\n * It does NOT keep track of the moving object outside of the velocity change window\n *\n * Elapsed time is measured from the start of the velocity change\n *\n * You can only use one of these objects once. Once the velocity change is complete\n * any call to getPositionAfter will result in an error\n\n * @class  BezDecelerator (name)\n * @param  {number}                   v0  Initial velocity\n * @param  {number}                   vF  Final velocity\n * @param  {number}                   tF  Final time\n * @param  {number}                   dF  Final distance\n * @param  {Function}                 cb  Completion handler\n * @return {(Array|Function|number)}  { description_of_the_return_value }\n */\nexport default function BezierAccelerator(v0, vF, tF, dF, cb)\n{\n\t// just changing the notation to what I am using\n    const V = v0;\n    const T = tF;\n    const D = dF;\n    let P0 = [],\n        P1 = [],\n        P2 = [],\n        P3 = [];\n    let func;\n    let complete = false;\n    const callBack = cb;\n\n    if ((v0 > 0) && (vF == 0) && ((T * v0) > (D)))\n    {\n        // this is the one special case where a cubic will not do the job\n        P0 = [0.0, 0.0];\n        P2 = [T, D];\n        const p1_x = (D - vF * T) / (v0 - vF);\n        const p1_y = (v0 * p1_x);\n\n        func = QuadraticBezier(P0, [p1_x, p1_y], P2);\n    }\n    else\n    {\n        P0 = [0.0, 0.0];\n        P1 = [T / 3.0, V * T / 3.0];\n        P2 = [(2.0 / 3.0) * T, D - vF * T / 3.0];\n        P3 = [T, D];\n        func = CubicBezier(P0, P1, P2, P3);\n    }\n\n    this.tangent_initial = function (t)\n\t{\n        return V * t;\n    };\n\n    this.dotPositions = function ()\n    {\n        return [P0, P1, P2, P3];\n    };\n\n\t/*\n    * this function draws the trajectory of the final velocity.Used only for debugging and demonstration\n    * not part of the final exposed package\n    */\n    this.tangent_final = function (t)\n\t{\n        const res =  vF * t + (D - vF * T);\n\n        return res;\n    };\n\n    this.getPositionAfter = function (elapsed_time)\n    {\n        return this.getDistance(elapsed_time);\n    }.bind(this);\n    /*\n    * This is the only exposed method of the class that is not simply for debugging.\n    *\n    * x_value {float} - a number in the range  0..tF the elapsed time of the velocity change\n    *\n    * Returns {float} - the distance traveled since the start of the velocity change\n    */\n    this.getDistance = (x_value) =>\n    {\n        if (this.complete)\n        {\n            throw new Error('Accelerator: velocity change is complete. Cannot call this function');\n        }\n        if ((x_value >= T) && (!complete))\n        {\n            complete = true;\n            if ((typeof callBack === 'function') && (callBack != null))\n                { callBack(); }\n        }\n        const y_value = func(x_value);\n\n        return y_value;\n    };\n};\n// module.exports = BezDecelerator;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../src/bezier-accelerator.js\n// module id = 1\n// module chunks = 0","/*\n* main entry for bez.html - draws various forms of bezier functions\n*/\n\nimport BezDecelerator from '../../src/bezier-accelerator';\nimport {graphFunction, graphParametricFunction, drawAxes, drawDot} from '../libs/graph.js';\n\n$(document).ready(function(){\n    $('#version1').click(doVersion1);\n    $('#version2').click(doVersion2);\n    $('#version3').click(doVersion3);\n    $('#version4').click(doVersion4);\n    $('#version5').click(doVersion5);\n    $('#version6').click(doVersion6);\n    $('#version7').click(doVersion7);\n});\n\n// set up the examples that can be plotted\n\nlet v0 = 800;  // (10*60) 10px / frame (60/sec)\nlet vF = 190;\nlet dF = 400;\nlet tF = 2;\n\n// just to see we got here\n\n// this defines the regionof the plot\nconst rangeDomain = {\n    xMin : 0,\n    xMax : tF,\n    yMin : 0,\n    yMax : dF\n};\nlet version = '';\nfunction doVersion1()\n{\t\n    version = '1';\n    v0 = 5;  // (10*60) 10px / frame (60/sec)\n    vF = 0;\n    dF = 3.5;\n    tF = 4;\n    let dObj = new BezDecelerator(v0, vF, tF, dF); \n    let f = dObj.getDistance;\n    main(dObj);\n}\nfunction doVersion2()\n{\t\n    version = '1';\n    v0 = 800;  // (10*60) 10px / frame (60/sec)\n    vF = 0;\n    dF = 400;\n    tF = 2;\n    let dObj = new BezDecelerator(v0, vF, tF, dF); \n    let f = dObj.getDistance;\n    main(dObj);\n}\nfunction doVersion3()\n{\n    version = '2';\n    v0 = 800;  // (10*60) 10px / frame (60/sec)\n    vF = 180;\n    dF = 400;\n    tF = 2;\n    main(new BezDecelerator(v0, vF, tF, dF));\n}\nfunction doVersion4()\n{\n    version = '3';\n    v0 = 800;  // (10*60) 10px / frame (60/sec)\n    vF = 1200;\n    dF = 400;\n    tF = 2;\n    main(new BezDecelerator(v0, vF, tF, dF));\n}\nfunction doVersion5()\n{\n    version = '4';\n    v0 = 800;  // (10*60) 10px / frame (60/sec)\n    vF = 190;\n    dF = 400;\n    tF = 2;\n    main(new BezDecelerator(v0, vF, tF, dF));\n}\nfunction doVersion6()\n{\n    version = '5';\n    v0 = 800;  // (10*60) 10px / frame (60/sec)\n    vF = 210;\n    dF = 400;\n    tF = 2;\n    main(new BezDecelerator(v0, vF, tF, dF));\n}\nfunction doVersion7()\n{\n    version = '6';\n    v0 = 0;  // (10*60) 10px / frame (60/sec)\n    vF = 0;\n    dF = 400;\n    tF = 2;\n    main(new BezDecelerator(v0, vF, tF, dF));\n}\nfunction main(bezDecelerationObj) \n{\n    $('#canvas-wrapper').empty();\n    $('#canvas-wrapper').append('<canvas id=\"canvas\" width=\"1000\" height=\"500\"></canvas>');\n\n    var canvas = document.getElementById('canvas');\n    if (null==canvas || !canvas.getContext) return;\n    var N = 20;\n    const decel = bezDecelerationObj;\n\n    var ctx=canvas.getContext('2d');\n    var h = ctx.canvas.height;\n    var w = ctx.canvas.width;\n\n    var axes={}; \n    axes.xMin = 0;\n    axes.xMax = tF;\n    axes.yMin = -2*dF;\n    axes.yMax = 2*dF;\n    axes.xScaleFactor = w / (tF - 0);\n    axes.yScaleFactor = w / (dF - 0);\n\n\n    drawAxes(ctx, axes);\n\n    var ff = decel.dd_func;\n    var fd = decel.getDistance;\n    let points = decel.dotPositions();\n\n    graphFunction(ctx, axes, decel.getDistance, 'rgb(66,44,255)', 2);\n    graphFunction(ctx, axes, decel.tangent_initial, 'rgb(255,44,255)', 2);\n    graphFunction(ctx, axes, decel.tangent_final, 'rgb(255,44,255)', 2);\n    drawDot(ctx, axes, points[0][0], points[0][1] );\n    drawDot(ctx, axes, points[1][0], points[1][1] );\n    drawDot(ctx, axes, points[2][0], points[2][1] );\n    drawDot(ctx, axes, points[3][0], points[3][1] );\n}\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./bez/bez.js\n// module id = 2\n// module chunks = 0","(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define([], factory);\n    } else if (typeof exports === 'object') {\n        module.exports = factory();\n    } else {\n        root.newtonRaphson = factory();\n  }\n}(this, function () {\n  return function findRoot(f, fprime, guess, options) {\n    options = options || {};\n    var tolerance = options.tolerance || 0.00000001;\n    var epsilon = options.epsilon || 0.0000000000001;\n    var maxIterations = options.maxIterations || 20;\n    var haveWeFoundSolution = false; \n    var newtonX;\n   \n    for (var i = 0; i < maxIterations; ++i) {\n      var denominator = fprime(guess);\n      if (Math.abs(denominator) < epsilon) {\n        return false\n      }\n   \n      result = guess - (f(guess) / denominator);\n      \n      var resultWithinTolerance = Math.abs(result - guess) < tolerance;\n      if (resultWithinTolerance) { \n        return result\n      }\n\n      guess = result;\n    }\n    \n    return false;\n  }\n}));\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../~/newton-raphson/index.js\n// module id = 3\n// module chunks = 0","/**\n * Class for bezier cubic class.\n */\nexport class BezierCubic\n{\n    /**\n     * Constructs the object.\n     *\n     * @param  {<type>}  P0  Inital Point\n     * @param  {<type>}  P1  First attraction point\n     * @param  {<type>}  P2  Second attraction point\n     * @param  {<type>}  P3  End point\n     */\n    constructor(P0, P1, P2, P3)\n    {\n        this.P0 = P0;\n        this.P1 = P1;\n        this.P2 = P2;\n        this.P3 = P3;\n    }\n\n    /**\n     * @private\n     */\n    derivative(t, p0, p1, p2, p3)\n    {\n        function quadratic(p0, p1, p2, t)\n        {\n            const res = p0 * (1.0 - t) * (1.0 - t) + 2.0 * p1 * (1.0 - t) * t + p2 * t * t;\n\n            return res;\n        }\n        const res = 3.0 * (quadratic(p1, p2, p3, t) - quadratic(p0, p1, p2, t));\n\n        return res;\n    }\n    /**\n     * @private\n     */\n    bez_func(t, p0, p1, p2, p3)\n    {\n        const res =   p0 * (1 - t) * (1 - t) * (1 - t)\n                    + 3.0 * p1 * (1 - t) * (1 - t) * t\n                    + 3.0 * p2 * (1 - t) * t * t\n                    + p3 * t * t * t;\n\n        return res;\n    }\n\n    x_From_t(t)\n    {\n        const res = this.bez_func(t, this.P0[0], this.P1[0], this.P2[0], this.P3[0]);\n\n        return res;\n    }\n\n    x_From_t_derivative(t)\n    {\n        const res = this.derivative(t, this.P0[0], this.P1[0], this.P2[0], this.P3[0]);\n\n        return res;\n    }\n\n    y_From_t(t)\n    {\n        const res = this.bez_func(t, this.P0[1], this.P1[1], this.P2[1], this.P3[1]);\n\n        return res;\n    }\n    // currently not used\n    point_From_t()\n    {\n        const res = [this.x_From_t(t), this.y_From_t(t)];\n\n        return res;\n    }\n}\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../src/bezier-cubic.js\n// module id = 4\n// module chunks = 0","import { BezierCubic } from './bezier-cubic';\nimport { BezierQuadratic } from './bezier-quadratic';\nimport newtonRaphson from 'newton-raphson';\n\n/*\n* @TODO\n*   -    better first guesses for newton-raphson\n*/\n/*\n* The key thing happening here is to convert a parameterized Bezier function\n* into a function of x\n*/\n\n/*\n* This function returns a function which is a bezier Cubic curve as a\n* function of x so that (x, f(x)) is a point on the bezier curve.\n* Bezier functions are defined as curves (x(t), y(t)) for a parameter t between 0 .. 1\n* but cannot be rephrased as (x, f(x)). Getting itin this f(x) form takes computational work\n*/\nexport const CubicBezier = function CubicBezier(P0, P1, P2, P3)\n{\n    const bezObj = new BezierCubic(P0, P1, P2, P3);\n\n    const parametricFunc = function (t)\n    {\n        return [bezObj.x_From_t(t), bezObj.y_From_t(t)];\n    };\n\n    const functionOfX = function (x_value)\n    {\n        // find the t value that corresponds to the x value\n        // get it by newton raphson\n\n        const f = function (t)\n        {\n            return (bezObj.x_From_t(t) - x_value);\n        };\n        const fPrime = function (t)\n        {\n            return bezObj.x_From_t_derivative(t);\n        };\n\n        const t_value = newtonRaphson(f, fPrime, 0.5, null);\n\n        if (t_value === false)\n        {\n            throw new Error('cannot find t for x in CubicBezier');\n        }\n        const check_x_value = bezObj.x_From_t(t_value);\n        // console.log(`x_value: ${x_value}  t_value: ${t_value} check_x_value: ${check_x_value}`)\n\n        // let x_value = bezObj.x_From_t(t)\n        const y_value = bezObj.y_From_t(t_value);\n\n        if (y_value == 0)\n        {\n            console.log('CubicBezier: y_value is zero');\n        }\n\n        return y_value;\n    };\n\n    return functionOfX;\n};\n/*\n* This function returns a function which is a bezier Quadratuc curve as a\n* function of x so that (x, f(x)) is a point on the bezier curve\n*/\nexport const QuadraticBezier = function QuadraticBezier(P0, P1, P2)\n {\n    const bezObj = new BezierQuadratic(P0, P1, P2);\n\n    // find the t value that corresponds to the x value\n    // get it by newton raphson\n\n    const parametricFunc = function (t)\n    {\n        return [bezObj.x_From_t(t), bezObj.y_From_t(t)];\n    };\n\n    const functionOfX = function (x_value)\n    {\n        const f = function (t)\n        {\n            return (bezObj.x_From_t(t) - x_value);\n        };\n        const fPrime = function (t)\n        {\n            return bezObj.x_From_t_derivative(t);\n        };\n\n        const t_value = newtonRaphson(f, fPrime, 0.5, null);\n\n        if (t_value === false)\n        {\n            console.log([P0, P1, P2]);\n            throw new Error(`cannot find t for x in QuadraticBezier x_value:${x_value}`);\n        }\n        const check_x_value = bezObj.x_From_t(t_value);\n        // console.log(`x_value: ${x_value}  t_value: ${t_value} check_x_value: ${check_x_value}`)\n\n        // let x = bezObj.x_From_t(t);\n        const y_value = bezObj.y_From_t(t_value);\n\n        if (y_value == 0)\n        {\n            console.log('CubicBezier: y_value is zero');\n        }\n\n        return y_value;\n    };\n\n    return functionOfX;\n};\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../src/bezier-functions.js\n// module id = 5\n// module chunks = 0","/**\n * Class for bezier quadratic class.\n */\nexport class BezierQuadratic\n{\n    /**\n     * Constructs the object.\n     *\n     * @param  {Float}  P0  Initial point\n     * @param  {Float}  P1  Attraction point\n     * @param  {Float}  P2  End point\n     */\n    constructor(P0, P1, P2)\n    {\n        this.P0 = P0;\n        this.P1 = P1;\n        this.P2 = P2;\n    }\n    derivative(t, p0, p1, p2)\n    {\n        function linear(p0, p1, t)\n        {\n            const res = p0 * (1.0 - t) + p1 * t;\n\n            return res;\n        }\n\n        const res = 2.0 * (linear(p1, p2, t) - linear(p0, p1, t));\n\n        return res;\n    }\n\n    bez_func(t, p0, p1, p2)\n    {\n        const res =   p0 * (1 - t) * (1 - t) + 2.0 * p1 * (1 - t) * t + p2 * t * t;\n\n        return res;\n    }\n\n    x_From_t(t)\n    {\n        const res = this.bez_func(t, this.P0[0], this.P1[0], this.P2[0]);\n\n        return res;\n    }\n\n    x_From_t_derivative(t)\n    {\n        const res = this.derivative(t, this.P0[0], this.P1[0], this.P2[0]);\n\n        return res;\n    }\n\n    y_From_t(t)\n    {\n        const res = this.bez_func(t, this.P0[1], this.P1[1], this.P2[1]);\n\n        return res;\n    }\n}\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../src/bezier-quadratic.js\n// module id = 6\n// module chunks = 0"],"sourceRoot":""}