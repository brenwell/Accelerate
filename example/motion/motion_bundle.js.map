{"version":3,"sources":["webpack:///webpack/bootstrap 671bb68e6a23f8670efe","webpack:///../src/index.js","webpack:///./libs/graph.js","webpack:///./motion/motion_1.js","webpack:///./motion/motion_2.js","webpack:///./motion/wait_test.js","webpack:///./motion/motion.js","webpack:///./motion/mover.js","webpack:///../~/newton-raphson/index.js","webpack:///../src/bezier-accelerator.js","webpack:///../src/bezier-cubic.js","webpack:///../src/bezier-functions.js","webpack:///../src/bezier-quadratic.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA,mDAA2C,cAAc;;AAEzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;;;AChE4B;;AAE5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,MAAM;AACtB,gBAAgB,MAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iB;AACA,kD;AACA;AACA,a;AACA;AACA,S;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,sEAAsE,iCAAiC;AACvG,qCAAqC,mBAAmB;AACxD,kCAAkC,IAAI;AACtC,qCAAqC,mBAAmB;AACxD,+BAA+B,qBAAqB;;AAEpD;AACA;AACA,mFAAmF,iBAAiB;AACpG;AACA;AACA;AACA,iB;AACA,kD;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,MAAM;AACtB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,MAAM;AACtB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,MAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,MAAM;AACtB,gBAAgB,MAAM;AACtB,gBAAgB,MAAM;AACtB,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,oCAAoC,GAAG,GAAG,GAAG,GAAG,GAAG;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB,+BAA+B;AAChD,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,MAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,qBAAqB;AAChD,2BAA2B,mBAAmB;AAC9C,wBAAwB,UAAU;AAClC,2BAA2B,UAAU;AACrC;;AAEA;AAAA;AAAA;;AAEA;;;;;;;;;;;;AC7PA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,sBAAsB,UAAU;AAChC,kB;AACA;AACA;AACA;AACA,gD;AACA,2BAA2B,OAAO,KAAK,OAAO,YAAY,QAAQ,WAAW,QAAQ;AACrF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,kBAAkB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,sBAAsB,SAAS;AAC/B;AACA;AACA;AACA,0D;;AAEA,2BAA2B,OAAO,KAAK,OAAO,YAAY,QAAQ,WAAW,QAAQ;;AAErF;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA,iD;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,sBAAsB,UAAU;AAChC,kB;AACA;;AAEA;AACA;AACA;AACA,+DAA+D,OAAO,KAAK,OAAO;AAClF;AACA;AACA,gD;AACA,kEAAkE,QAAQ,KAAK,QAAQ;AACvF,2BAA2B,OAAO,KAAK,OAAO,YAAY,QAAQ,WAAW,QAAQ;AACrF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kC;AACA,2BAA2B,wB;AAC3B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;AC3KA;AAAA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,GAAG,uCAAuC;AAC1C,GAAG,0CAA0C;AAC7C,GAAG,0CAA0C;AAC7C,GAAG,uCAAuC;AAC1C,GAAG,uCAAuC;AAC1C,GAAG,uCAAuC;AAC1C,GAAG,0CAA0C;AAC7C;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;;ACrBA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,SAAS;AAC3B;AACA;AACA;;AAEA,C;;;;;;;;;ACfA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,EAAE;AACtB;AACA;AACA;AACA;AACA,EAAE;;AAEF;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA,EAAE;AACF;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN,KAAK;;AAEL,C;;;;;;;;ACvCA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG,uCAAuC;AAC1C,GAAG,0CAA0C;AAC7C,GAAG,uCAAuC;AAC1C,GAAG,uCAAuC;AAC1C,GAAG,uCAAuC;AAC1C,GAAG,0CAA0C;AAC7C;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,sBAAsB,wBAAwB;AAC9C,0F;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS,M;AACT;AACA;AACA,0CAA0C,eAAe,WAAW,OAAO,SAAS,WAAW;AAC/F;AACA;AACA;AACA;AACA;AACA;AACA,S;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,eAAe;AACjD;AACA;AACA,2BAA2B,eAAe;AAC1C;AACA,aAAa,E;AACb;AACA;AACA;AACA;AACA;;AAEA,KAAK;;AAEL,C;;;;;;;;;;;ACpGA;AAAA;AACA;AACA;AACA;;AAE6B;AAC7B;AACA;AACA;;AAEA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,oB;AACA;AACA;AACA;AACA,KAAK;AACL;;;;;;;ACpCA;AACA;AACA;AAAA;AAAA;AAAA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,oC;AACA;;AAEA,mBAAmB,mBAAmB;AACtC;AACA;AACA;AACA;;AAEA;;AAEA;AACA,kC;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,CAAC,G;;;;;;;;ACnCsC;;AAEvC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB,YAAY,SAAS;AACrB,YAAY,wBAAwB,GAAG;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,eAAe,MAAM;AACrB;AACA,eAAe,MAAM;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,YAAY;AAC7B;AACA;;AAEA;AACA;AACA;AAAA;AAAA;AACA;;;;;;;;ACjHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAAA;AAAA;;;;;;;;;;;;;AC5EsB;AACI;AAC1B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,mCAAmC,QAAQ,aAAa,QAAQ,kBAAkB,cAAc;;AAEhG;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,8EAA8E,QAAQ;AACtF;AACA;AACA,mCAAmC,QAAQ,aAAa,QAAQ,kBAAkB,cAAc;;AAEhG;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AAAA;AAAA;;;;;;;;;ACjHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,MAAM;AACtB,gBAAgB,MAAM;AACtB,gBAAgB,MAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AAAA;AAAA","file":"motion_bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 6);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 671bb68e6a23f8670efe","import { BezierAccelerator } from './bezier-accelerator.js';\n\nfunction logger(s) // eslint-disable-line\n{\n    // console.log(s)\n}\n/*\n* TODO\n*   -   does not correctly support advancing by a time interval that jumps over the end of an acceleration\n*   -   the calc of velocity during an acceleration is crude and probably can be made more accurate\n*/\n\n/**\n * This class seeks to keep track of the 1 dimensional motion of an object that is subject to\n * multiple velocity changes.\n *\n * The two relevant properties of this object are position and velocity which can be obtained\n * at any time with methods position() and velocity()\n *\n * A starting velocity is set via the constructor.\n *\n * Time is advanced, and the position and velocity updated, by calling the method advanceTimeBy(timeInterval)\n * with a timeInterval or deltaTime which is a time interval since the last update and is in SECONDS not FRAMES\n *\n * An acceleration (either positive or negative) can be scheduled by calling the method accelerate(vF, tF, dF)\n * this call will have no effect on the position or velocity until the next call to advanceTimeBy\n * That method will apply the acceleration on successive calls until the ending condition is encountered\n * tF seconds of acceleration have elapsed AND the body has traveled dF distance during the acceleration\n *\n * On finishing the acceleration the advanceTimeBy() method will call the resolve() function\n * of the promise returned by call to accelerate() that setup the acceleration\n */\nexport default class Accelerator\n{\n    /**\n     * Constructs the object.\n     *\n     * @param  {Number}  v0  The initial Velocity\n     */\n    constructor(v0)\n    {\n        this.time = 0.0;\n        this.elapsedTimeChangingVelocity = 0.0;\n        this.timeInterval = 1.0 / 60.0; // @FIX this is going away\n        this.totalDistance = 0.0;\n        this.changingVelocity = false;\n        this.decelerator = null;\n        this.currentVelocity = v0;\n    }\n\n    /**\n     * Advance the moving objects time by a time interval\n     *\n     * @param  {Float}  deltaTime  Interval since the last call to this method\n     * @return {Float}  Total distance traveled after this time interbal is\n     *                  added to total time of travel. Just for convenience as\n     *                  could get this with position()\n     */\n    advanceTimeBy(deltaTime)\n    {\n        if (!this.changingVelocity && ! this.isWaiting)\n        {\n            this._advanceTimeAndDistanceWhileCoasting(deltaTime);\n        }\n        else if(! this.changingVelocity && this.isWaiting )\n        {\n            this.time += deltaTime;\n            this.currentWaitingTime += deltaTime\n            if( this.currentWaitingTime >= this.requiredWaitingTime )\n            {\n                this.isWaiting = false\n                if (typeof this.resolvePromiseFunction === 'function')\n                { \n                    this.resolvePromiseFunction(); \n                }\n            } \n            this._advanceTimeAndDistanceWhileCoasting(deltaTime);\n        }    \n        else\n        {\n            this.time += deltaTime;\n            this.elapsedTimeChangingVelocity += deltaTime;\n\n            const tmp = this.decelerator.getDistance(this.elapsedTimeChangingVelocity);\n            const deltaDistance = (this.distanceBeforeVelocityChange + tmp) - this.totalDistance;\n\n            this.currentVelocity = deltaDistance / (deltaTime);\n            this.totalDistance = this.distanceBeforeVelocityChange + tmp;\n\n            logger(\n                `Mover::advanceByTime  elapsedTimeChangingVelocity: ${this.elapsedTimeChangingVelocity}`\n                + ` timeForChange: ${this.timeForChange}`\n                + ` DVdistance: ${tmp} `\n                + ` totalDistance: ${this.totalDistance}`\n                + `velocity: ${this.currentVelocity}`);\n\n            if (this.elapsedTimeChangingVelocity >= this.timeForChange)\n            {\n                logger(`Mover::advanceTimeBy::velocity increase DONE newVelocity:${this.newVelocity}`);\n                this.currentVelocity = this.newVelocity;\n                this.changingVelocity = false;\n                if (typeof this.resolvePromiseFunction === 'function')\n                { \n                    this.resolvePromiseFunction(); \n                }\n            }\n        }\n\n        return this.totalDistance;\n    }\n\n    /**\n     * Gets the current position of the moving object\n     *\n     * @return {Float}  returns the current position of the moving object\n     */\n    position()\n    {\n        return this.totalDistance;\n    }\n\n    /**\n     * Gets the current velocity of the moving object\n     *\n     * @return {Float}  returns the current velocity of the moving object\n     */\n    velocity()\n    {\n        return this.currentVelocity;\n    }\n\n    /**\n     * Sets the velocity. This cannot bet set during an acceleration\n     *\n     * @param  {Float}  v  The currenct velocity\n     */\n    setVelocity(v)\n    {\n        if (this.changingVelocity)\n        {\n            throw new Error('cannot setVelocity during an acceleration');\n        }\n        this.currentVelocity = v;\n    }\n\n    /**\n     * Instructs the object to start a velocity change\n     *\n     * @param  {Float}   vF  is the velocity the object is to change to\n     * @param  {Float}   tF  is the time interval over which the change is to take place\n     * @param  {Float}   dF  is the distance that the object should move while changing velocity\n     * @return {Promise}  Promise which will be resolved when the acceleration\n     *                    has completed\n     */\n     accelerate(vF, tF, dF, delayInterval = false)\n     {\n        if( delayInterval === false ){\n            return this._accelerateNoDelay(vF, tF, dF)\n        }else{\n            let q = this.waitFor(delayInterval)\n                    .then( ()=> {\n                        console.log('accelerate waitFor resolved')\n                        return this._accelerate(vF, tF, dF)\n                    })\n            console.log([q])\n        }\n     }\n    _accelerateNoDelay(vF, tF, dF, promise)\n    {\n        logger(`Mover::accelerate ${vF} ${tF} ${dF}`);\n        if (this.changingVelocity)\n        {\n            throw new Error('cannot have two accelerations underway at the same time');\n        }\n        if( this.isWaiting )\n        {\n            throw new Error('cannot have commence acceleration while wait is underway');\n        }\n        const v0 = this.currentVelocity;\n        const p = new Promise((resolve) =>\n        {\n            this.resolvePromiseFunction = resolve;\n        });\n\n        this.distanceBeforeVelocityChange = this.totalDistance;\n        this.changingVelocity = true;\n        this.elapsedTimeChangingVelocity = 0.0;\n        this.timeForChange = tF;\n        this.newVelocity = vF;\n        this.distanceForChange = dF;\n        this.decelerator = new BezierAccelerator(v0, vF, tF, dF);\n\n        return p;\n    }\n    accelerateWithDelay(vF, tF, dF, delayInterval)\n    {\n        this.waitFor(delayInterval)\n        .then( ()=>{\n            this.accelerate(vF, tF, dF)\n        })\n\n    }\n    waitFor(timeInterval)\n    {\n        if (this.changingVelocity)\n        {\n            throw new Error('Accelerator: cannot wait while acceleration is underway');\n        }\n            if( this.isWaiting )\n        {\n            throw new Error('cannot have commence acceleration while wait is underway');\n        }\n        this.isWaiting = true\n        this.requiredWaitingTime = timeInterval\n        this.currentWaitingTime = 0.0\n\n        const p = new Promise((resolve) =>\n        {\n            this.resolvePromiseFunction = resolve;\n        });\n\n        return p        \n    }\n\n    kill()\n    {\n        if( this.changingVelocity ){\n            this.changingVelocity = false\n            if (typeof this.resolvePromiseFunction === 'function')\n                { this.resolvePromiseFunction(); }\n        }else{\n            console.log(`WARNING: Accelerator - kill not necessary when no acceleration active`)\n        }\n    }\n    /**\n     * Advances total time & distance when NO acceleration is active\n     *\n     * @private\n     * @param  {Float}  deltaTime  The delta time\n     */\n    _advanceTimeAndDistanceWhileCoasting(deltaTime)\n    {\n        this.time += deltaTime;\n        this.totalDistance += this.currentVelocity * deltaTime;\n        logger(`\\nMover::advanceTimeBy_VelocityNotChanging `\n            + ` velocity:${this.currentVelocity}`\n            + ` distance:${this.totalDistance}`\n            + ` time: ${this.time}`\n            + `deltaTime:${deltaTime}`);\n    }\n\n}\n\n// window.Accelerate = exports;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../src/index.js\n// module id = 0\n// module chunks = 0","/*\n* some simple utilities for graphing functions\n*/\nexport function graphFunction (ctx, axes, func, color, thick) {\n    var xx, yy;\n    var dx=4, x0=axes.x0, y0=axes.y0, scale=axes.scale;\n\n    var iMax = Math.round((ctx.canvas.width)/dx);\n    var xDelta = (axes.xMax - axes.xMin)/((iMax) * 1.0);\n    var iMin = 0;\n    var h = ctx.canvas.height;\n    var w = ctx.canvas.width;\n\n    ctx.beginPath();\n    ctx.lineWidth = thick;\n    ctx.strokeStyle = color;\n\t// just to prove we got here\n    for (var i = iMin; i < iMax; i++) {\n        xx = dx*i; \n        var xValue = i * xDelta;\n        var yValue = func(xValue);\n        var xScaled = xx;\n        var yScaled =  (yValue * h) / axes.yMax; \n\t\t// console.log(`loop x:${xValue} y:${yValue} xScaled: ${xScaled} yScaled:${yScaled}`)\n\t\t// yy = scale*func(xx/scale);\n\t\t\n        if (i == 0) \n            ctx.moveTo(xScaled, h - yScaled);\n        else         \n\t\t\tctx.lineTo(xScaled, h - yScaled );\n    }\n    ctx.stroke();\n}\nfunction yMinMax(table) \n{\n    let resMax = table[0][1];\n    let resMin = table[0][1];\n    for( let i = 0; i < table.length; i++){\n        if( table[i][1] > resMax)\n            resMax = table[i][1];\n        if( table[i][1] < resMin )\n            resMin = table[i][1];\n    }\n    return [resMin, resMax];\n}\n\n/*\n* table is an array of points (x,y) where each point is represented as an array of length 2\n*/\nexport function graphTable (ctx, axes, table, color, thick) \n{\n\t\n    let h = ctx.canvas.height;\n    let w = ctx.canvas.width;\n\n    let numberOfPoints = table.length * 1.0;\n    let iMax = numberOfPoints;\n    let iMin = 0;\n    let xMin = table[0][0];\n    let xMax = table[numberOfPoints - 1][0];\n    let pixelsBetweenXValues = Math.round(w/(xMax - xMin));\n    let dx = (xMax - xMin)/(numberOfPoints*1.0);\n\n    let tmp = yMinMax(table);\n    let yMin = tmp[0];\n    let yMax = tmp[1];\n    let dy = (yMax - yMin)/h;\n\n    var xx, yy;\n\n    ctx.beginPath();\n    ctx.lineWidth = thick;\n    ctx.strokeStyle = color;\n\n\t// let tmp1 = xMin * pixelsBetweenXValues\n\t// let tmp2 = xMax * pixelsBetweenXValues\n\n    for (var i = iMin;i < iMax; i++) {\n        var xValue = table[i][0];\n        var yValue = table[i][1];\n        var xScaled = xValue * pixelsBetweenXValues;\n        var yScaled =  ((yValue - yMin)* h)/(yMax - yMin); \n\n\t\t// console.log(`loop x:${xValue} y:${yValue} xScaled: ${xScaled} yScaled:${yScaled}`)\n\t\t\n        if (i == 0) \n            ctx.moveTo(xScaled, h - yScaled);\n        else         \n\t\t\tctx.lineTo(xScaled, h - yScaled );\n    }\n    ctx.stroke();\n}\n\nexport function drawDot(ctx, axes, x, y)\n{\n    return; // does not work yet\n    var h = ctx.canvas.height;\n    var w = ctx.canvas.width;\n    var xValue = x;\n    var yValue = y;\n    var xScaled = xValue * axes.xScaleFactor;\n    var yScaled = h - yValue * axes.yScaleFactor; \n    ctx.fillRect(0.0, h - 20 - 0.0, 20, 20);\n\t// ctx.fillRect(xScaled, yScaled, 100, 100)\n}\n\nexport function graphParameterizedFunction (ctx, axes, func, color, thick) {\n    var xx, yy;\n    var dx=10, x0=axes.x0, y0=axes.y0, scale=axes.scale;\n\n    var iMax = Math.round((ctx.canvas.width)/dx);\n    var xDelta = (axes.xMax - axes.xMin)/((iMax) * 1.0);\n\n    var iMin = 0;\n    var h = ctx.canvas.height;\n    var w = ctx.canvas.width;\n\n    ctx.beginPath();\n    ctx.lineWidth = thick;\n    ctx.strokeStyle = color;\n\n    for (var i = iMin;i <= iMax; i++) {\n        xx = dx*i; \n        var pValue = i * xDelta;\n\n        var xyValues = func(pValue);\n        var xValue = xyValues[0];\n        var yValue = xyValues[1];\n        console.log('graphParameterizedFunction: raw: ' + `x:${xValue} y:${yValue}`);\n\t\t// var xScaled = xx;\n        var xScaled = (xValue * w) / axes.xMax;\n        var yScaled =  (yValue * h) / axes.yMax; \n        console.log('graphParameterizedFunction: scaled: ' + `x:${xScaled} y:${yScaled}`);\n\t\t// console.log(`loop x:${xValue} y:${yValue} xScaled: ${xScaled} yScaled:${yScaled}`)\n\t\t// yy = scale*func(xx/scale);\n\t\t\n        if (i == 0) \n            ctx.moveTo(xScaled, h - yScaled);\n        else         \n\t\t\tctx.lineTo(xScaled, h - yScaled );\n    }\n    ctx.stroke();\n}\n\n/*\n* The points are specified in mathematical (x,y) coordinates with (0,0) in the bottom left corner of the\n* region x > 0 y > 0\n*/\nfunction drawLine(ctx, startPt, endPt, strokeStyle)\n{\n    var w=ctx.canvas.width;\n    var h=ctx.canvas.height;\n    var x0 = startPt[0];\n    var x1 = endPt[0];\n    var y0 = startPt[1];\n    var y1 = endPt[1];\n    ctx.beginPath();\n    ctx.strokeStyle = strokeStyle; \n    ctx.moveTo(x0, h - y0); ctx.lineTo(x1, h - y1);\t\n    ctx.stroke();\n}\nexport function drawAxes(ctx, axes) \n{\n\n    var w = ctx.canvas.width;\n    var h = canvas.height;\n    drawLine(ctx, [0,0], [w, 0], 'rgb(0, 256,0)');\n    drawLine(ctx, [0,0], [0, h], 'rgb(0,0,256)');\n    drawLine(ctx, [w,0], [w,h], 'rgb(256,0,0)');\n    drawLine(ctx, [0,h], [w,h], 'rgb(256,0,0)');\n\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./libs/graph.js\n// module id = 1\n// module chunks = 0","// this is a meaningful example of a motion.\n\nimport runSchedule from './motion.js';\n\nlet schedule = {\n    v0 : 0.0,\n    deltaT : 0.1,\n    accelsTable: [\n\t\t{delay : 1, \tvF: 200, tF: 2 , dF: 200 \t},\n\t\t{delay : 0.5,  \tvF: 400, tF: 2 , dF: 600 \t},\n\t\t{delay : 0.5,  \tvF: 400, tF: 2 , dF: 600 \t},\n\t\t{delay : 1, \tvF: 200, tF: 2 , dF: 600 \t},\n\t\t{delay : 1, \tvF: 50,  tF: 2 , dF: 300 \t},\n\t\t{delay : 1, \tvF:  0,  tF: 2 , dF: 300 \t},\n\t\t{delay : 0.5,  \tvF: 400, tF: 2 , dF: 600 \t},\n    ]\n};\n\nexport default function(cb)\n{\n    runSchedule(cb, schedule);\n}\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./motion/motion_1.js\n// module id = 2\n// module chunks = 0","// this is an example of a motion .. but simple for testing\n\nexport default function()\n{\n    let t = [];\n    let i;\n    let dx = (Math.PI*4)/100.0;\n    let f = function(x){\n        return 2.0*x + 3;\n    };\n    for(let i = 0; i < 100; i++){\n        t.push([i*dx, f(i*dx)]);\n    }\n    return t;\n\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./motion/motion_2.js\n// module id = 3\n// module chunks = 0","import Accelerator from '../../src/index.js';\n\nexport default function test_wait()\n{\n\tconsole.log('Testing Wait function')\n\tlet accel = new Accelerator(100)\n\tlet count = 1000\n\tlet t = setInterval(function(){\n\t\tlet d = accel.advanceTimeBy((10.0/1000.0))\n\t\tconsole.log(` d:${d} `)\n\t\tif( count++ == 10){\n\t\t\tconsole.log('we killed the acceleration')\n\t\t\taccel.kill()\n\t\t}\n\t}, 10)\n\n\tlet q1 = accel.waitFor(1)\n\t.then(function(){\n\t\tconsole.log('wait for completed')\n\t\tcount = 0\n\t\treturn accel.accelerate(0, 2, 100)\n\t}).then(function(){\n\t\tconsole.log('accel complete for completed')\n\t\tclearInterval(t)\n\t})\n\tconsole.log([q1])\n\n\n\t// accel.waitFor(1)\n\t// .then(function(){\n\t// \tconsole.log('wait for completed')\n\t// \tcount = 0\n\t// \taccel.accelerate(0, 2, 100)\n\t// \t.then(function(){\n\t// \t\tconsole.log('accel complete for completed')\n\t// \t\tclearInterval(t)\n\t// \t})\n\t// })\n\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./motion/wait_test.js\n// module id = 4\n// module chunks = 0","import Accelerator from '../../src/index.js';\n\nconsole.log(Accelerator);\n\n/*\n* This file implements a function that can run a schedule of accelerations\n*/\n\nlet sample_schedule = {\n    v0 : 0.0,\t\t// initial velocity in distance units/second\n    deltaT : 0.1, \t//tick time interval  1.0/deltaT is number of ticks per second\n    accelsTable: [\n\t\t// delay in seconds, vF in distance units/sec, tF in seconds, dF distance units \n\t\t{delay : 1, \tvF: 200, tF: 2 , dF: 200 \t},\n\t\t{delay : 0.5,  \tvF: 400, tF: 2 , dF: 600 \t},\n\t\t{delay : 1, \tvF: 200, tF: 2 , dF: 600 \t},\n\t\t{delay : 1, \tvF: 50,  tF: 2 , dF: 300 \t},\n\t\t{delay : 1, \tvF:  0,  tF: 2 , dF: 300 \t},\n\t\t{delay : 0.5,  \tvF: 400, tF: 2 , dF: 600 \t},\n    ]\n};\n\nfunction logger(s){\n    console.log(s);\n}\n\n/*\n* This function runs a motion schedule or profile and when complete calls cb\n* above is a sample of a scedule\n*/\nexport default function (cb, schedule)\n{\n    let deltaT = schedule.deltaT;\n\t\n    function secondsToTicks(secs)\n\t{\n        let res = Math.round(secs*(1.0/deltaT));\n        return res;\n    }\n    function delayInTicks(i)\n\t{\n        let res = secondsToTicks(schedule.accelsTable[i].delay);\n        return res;\n    }\n\n    function calcDurationOfScheduleInTicks(accelsTable)\n\t{\n        let a = accelsTable;\n        let dur = 0;\n        for(let i = 0; i < accelsTable.length; i++){\n            dur += Math.round(a[i].delay*(1.0/deltaT)) + Math.round(a[i].tF*(1.0/deltaT)); \n        }\n        return dur;\n    }\n\n    let iMax = calcDurationOfScheduleInTicks(schedule.accelsTable) + Math.round(2.0/deltaT);\n    let i = 0;\n    let accelFlag = false;\n    let mover = new Accelerator(schedule.v0);\n    let table = [];\n\n    let moreAccels = (schedule.accelsTable.length > 0);\n    let nextAccelIndex = 0;\n    let nextAt = delayInTicks(0);\n\n    let setupNextAcceleration = function(){\n        accelFlag = false;\n        nextAccelIndex++;\n        if( nextAccelIndex >= schedule.accelsTable.length ){\n            moreAccels = false;\n        } else{\t\n            nextAt = i + delayInTicks(nextAccelIndex);\n        }\n        logger(`afterAcceleration next :${nextAccelIndex} nextAt: ${nextAt} more: ${moreAccels}`);\n    };\n    let timer = setInterval(function(){\n        if( i == iMax){\n            clearInterval(timer);\n            cb(table);\n            return;\n        }\t\n        if( i == nextAt ){\n            accelFlag = true;\n            let vF = schedule.accelsTable[nextAccelIndex].vF;\n            let tF = schedule.accelsTable[nextAccelIndex].tF;\n            let dF = schedule.accelsTable[nextAccelIndex].dF;\n            logger(`setup accel ${nextAccelIndex}`);\n            mover.accelerate(vF, tF, dF)\n\t\t\t.then(()=>{\n                logger(` ${nextAccelIndex} acceleration ended `);\n                setupNextAcceleration();\n            });\t\n        }\n        let t = deltaT * i;\n        let pos = mover.advanceTimeBy(deltaT);\n        table.push([t, pos]);\n        i++;\n\t\t\n    }, 1);\n\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./motion/motion.js\n// module id = 5\n// module chunks = 0","/*\n* This is the main entry point for the motion.html page.\n* proves a slection of two motions to display. \n*/\n\nimport {drawAxes, graphTable} from '../libs/graph.js';\nimport motion1 from './motion_1.js';\nimport motion2 from './motion_2.js';\nimport testWait from \"./wait_test.js\"\n\n$(document).ready(function(){\n    $('#motion_1_button').click(motion_1);\n    $('#motion_2_button').click(motion_2);\n});\n// just to prove we got here\nfunction motion_1(){\n    drawMotion(motion1);\n}\nfunction motion_2(){\n    // drawMotion(motion2);\n    testWait()\n}\nfunction drawMotion(motion) \n{\n    $('#canvas-wrapper').empty();\n    $('#canvas-wrapper').append('<canvas id=\"canvas\" width=\"1000\" height=\"500\"></canvas>');\n\n    var canvas = document.getElementById('canvas');\n    if (null==canvas || !canvas.getContext) return;\n\n    const positions = motion((table)=>{\n        var axes={}; \n        var ctx=canvas.getContext('2d');\n        drawAxes(ctx, axes);\n        graphTable(ctx, axes, table, 'rgb(66,44,255)', 2);\n    });\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./motion/mover.js\n// module id = 6\n// module chunks = 0","(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define([], factory);\n    } else if (typeof exports === 'object') {\n        module.exports = factory();\n    } else {\n        root.newtonRaphson = factory();\n  }\n}(this, function () {\n  return function findRoot(f, fprime, guess, options) {\n    options = options || {};\n    var tolerance = options.tolerance || 0.00000001;\n    var epsilon = options.epsilon || 0.0000000000001;\n    var maxIterations = options.maxIterations || 20;\n    var haveWeFoundSolution = false; \n    var newtonX;\n   \n    for (var i = 0; i < maxIterations; ++i) {\n      var denominator = fprime(guess);\n      if (Math.abs(denominator) < epsilon) {\n        return false\n      }\n   \n      result = guess - (f(guess) / denominator);\n      \n      var resultWithinTolerance = Math.abs(result - guess) < tolerance;\n      if (resultWithinTolerance) { \n        return result\n      }\n\n      guess = result;\n    }\n    \n    return false;\n  }\n}));\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../~/newton-raphson/index.js\n// module id = 7\n// module chunks = 0","import { QuadraticBezier, CubicBezier } from './bezier-functions';\n\n/*\n*   @TODO\n*   -   there is a lot of duplicate code in here in the handling of the different cases.\n*       can wind a lot of it into one piece\n*   -   need a general tidyup of names and code nolonger used\n*   - this needs a good tidy-up and reworking into ES6 style - but thats for later\n*/\n\n/**\n * This class performs velocity changes on objects in 1-dimensional motion\n *\n * provides a single method getDistance(t) - will change name to positionAfter(t) at some point\n * that returns the total distance traveled since after t seconds of the velocity change\n *\n * It does NOT keep track of the moving object outside of the velocity change window\n *\n * Elapsed time is measured from the start of the velocity change\n *\n * You can only use one of these objects once. Once the velocity change is complete\n * any call to getPositionAfter will result in an error\n\n * @class  BezDecelerator (name)\n * @param  {number}                   v0  Initial velocity\n * @param  {number}                   vF  Final velocity\n * @param  {number}                   tF  Final time\n * @param  {number}                   dF  Final distance\n * @param  {Function}                 cb  Completion handler\n * @return {(Array|Function|number)}  { description_of_the_return_value }\n */\nexport const BezierAccelerator = function Decelerator(v0, vF, tF, dF, cb)\n{\n\t// just changing the notation to what I am using\n    const V = v0;\n    const T = tF;\n    const D = dF;\n    let P0 = [],\n        P1 = [],\n        P2 = [],\n        P3 = [];\n    let func;\n    let complete = false;\n    const callBack = cb;\n\n    if ((v0 > 0) && (vF == 0) && ((T * v0) > (D)))\n    {\n        // this is the one special case where a cubic will not do the job\n        P0 = [0.0, 0.0];\n        P2 = [T, D];\n        const p1_x = (D - vF * T) / (v0 - vF);\n        const p1_y = (v0 * p1_x);\n\n        func = QuadraticBezier(P0, [p1_x, p1_y], P2);\n    }\n    else\n    {\n        P0 = [0.0, 0.0];\n        P1 = [T / 3.0, V * T / 3.0];\n        P2 = [(2.0 / 3.0) * T, D - vF * T / 3.0];\n        P3 = [T, D];\n        func = CubicBezier(P0, P1, P2, P3);\n    }\n\n    this.tangent_initial = function (t)\n\t{\n        return V * t;\n    };\n\n    this.dotPositions = function ()\n    {\n        return [P0, P1, P2, P3];\n    };\n\n\t/*\n    * this function draws the trajectory of the final velocity.Used only for debugging and demonstration\n    * not part of the final exposed package\n    */\n    this.tangent_final = function (t)\n\t{\n        const res =  vF * t + (D - vF * T);\n\n        return res;\n    };\n\n    this.getPositionAfter = function (elapsed_time)\n    {\n        return this.getDistance(elapsed_time);\n    }.bind(this);\n    /*\n    * This is the only exposed method of the class that is not simply for debugging.\n    *\n    * x_value {float} - a number in the range  0..tF the elapsed time of the velocity change\n    *\n    * Returns {float} - the distance traveled since the start of the velocity change\n    */\n    this.getDistance = (x_value) =>\n    {\n        if (this.complete)\n        {\n            throw new Error('Accelerator: velocity change is complete. Cannot call this function');\n        }\n        if ((x_value >= T) && (!complete))\n        {\n            complete = true;\n            if ((typeof callBack === 'function') && (callBack != null))\n                { callBack(); }\n        }\n        const y_value = func(x_value);\n\n        return y_value;\n    };\n};\n// module.exports = BezDecelerator;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../src/bezier-accelerator.js\n// module id = 8\n// module chunks = 0","/**\n * Class for bezier cubic class.\n */\nexport class BezierCubic\n{\n    /**\n     * Constructs the object.\n     *\n     * @param  {<type>}  P0  Inital Point\n     * @param  {<type>}  P1  First attraction point\n     * @param  {<type>}  P2  Second attraction point\n     * @param  {<type>}  P3  End point\n     */\n    constructor(P0, P1, P2, P3)\n    {\n        this.P0 = P0;\n        this.P1 = P1;\n        this.P2 = P2;\n        this.P3 = P3;\n    }\n\n    /**\n     * @private\n     */\n    derivative(t, p0, p1, p2, p3)\n    {\n        function quadratic(p0, p1, p2, t)\n        {\n            const res = p0 * (1.0 - t) * (1.0 - t) + 2.0 * p1 * (1.0 - t) * t + p2 * t * t;\n\n            return res;\n        }\n        const res = 3.0 * (quadratic(p1, p2, p3, t) - quadratic(p0, p1, p2, t));\n\n        return res;\n    }\n    /**\n     * @private\n     */\n    bez_func(t, p0, p1, p2, p3)\n    {\n        const res =   p0 * (1 - t) * (1 - t) * (1 - t)\n                    + 3.0 * p1 * (1 - t) * (1 - t) * t\n                    + 3.0 * p2 * (1 - t) * t * t\n                    + p3 * t * t * t;\n\n        return res;\n    }\n\n    x_From_t(t)\n    {\n        const res = this.bez_func(t, this.P0[0], this.P1[0], this.P2[0], this.P3[0]);\n\n        return res;\n    }\n\n    x_From_t_derivative(t)\n    {\n        const res = this.derivative(t, this.P0[0], this.P1[0], this.P2[0], this.P3[0]);\n\n        return res;\n    }\n\n    y_From_t(t)\n    {\n        const res = this.bez_func(t, this.P0[1], this.P1[1], this.P2[1], this.P3[1]);\n\n        return res;\n    }\n    // currently not used\n    point_From_t()\n    {\n        const res = [this.x_From_t(t), this.y_From_t(t)];\n\n        return res;\n    }\n}\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../src/bezier-cubic.js\n// module id = 9\n// module chunks = 0","import { BezierCubic } from './bezier-cubic';\nimport { BezierQuadratic } from './bezier-quadratic';\nimport newtonRaphson from 'newton-raphson';\n\n/*\n* @TODO\n*   -    better first guesses for newton-raphson\n*/\n/*\n* The key thing happening here is to convert a parameterized Bezier function\n* into a function of x\n*/\n\n/*\n* This function returns a function which is a bezier Cubic curve as a\n* function of x so that (x, f(x)) is a point on the bezier curve.\n* Bezier functions are defined as curves (x(t), y(t)) for a parameter t between 0 .. 1\n* but cannot be rephrased as (x, f(x)). Getting itin this f(x) form takes computational work\n*/\nexport const CubicBezier = function CubicBezier(P0, P1, P2, P3)\n{\n    const bezObj = new BezierCubic(P0, P1, P2, P3);\n\n    const parametricFunc = function (t)\n    {\n        return [bezObj.x_From_t(t), bezObj.y_From_t(t)];\n    };\n\n    const functionOfX = function (x_value)\n    {\n        // find the t value that corresponds to the x value\n        // get it by newton raphson\n\n        const f = function (t)\n        {\n            return (bezObj.x_From_t(t) - x_value);\n        };\n        const fPrime = function (t)\n        {\n            return bezObj.x_From_t_derivative(t);\n        };\n\n        const t_value = newtonRaphson(f, fPrime, 0.5, null);\n\n        if (t_value === false)\n        {\n            throw new Error('cannot find t for x in CubicBezier');\n        }\n        const check_x_value = bezObj.x_From_t(t_value);\n        // console.log(`x_value: ${x_value}  t_value: ${t_value} check_x_value: ${check_x_value}`)\n\n        // let x_value = bezObj.x_From_t(t)\n        const y_value = bezObj.y_From_t(t_value);\n\n        if (y_value == 0)\n        {\n            console.log('CubicBezier: y_value is zero');\n        }\n\n        return y_value;\n    };\n\n    return functionOfX;\n};\n/*\n* This function returns a function which is a bezier Quadratuc curve as a\n* function of x so that (x, f(x)) is a point on the bezier curve\n*/\nexport const QuadraticBezier = function QuadraticBezier(P0, P1, P2)\n {\n    const bezObj = new BezierQuadratic(P0, P1, P2);\n\n    // find the t value that corresponds to the x value\n    // get it by newton raphson\n\n    const parametricFunc = function (t)\n    {\n        return [bezObj.x_From_t(t), bezObj.y_From_t(t)];\n    };\n\n    const functionOfX = function (x_value)\n    {\n        const f = function (t)\n        {\n            return (bezObj.x_From_t(t) - x_value);\n        };\n        const fPrime = function (t)\n        {\n            return bezObj.x_From_t_derivative(t);\n        };\n\n        const t_value = newtonRaphson(f, fPrime, 0.5, null);\n\n        if (t_value === false)\n        {\n            console.log([P0, P1, P2]);\n            throw new Error(`cannot find t for x in QuadraticBezier x_value:${x_value}`);\n        }\n        const check_x_value = bezObj.x_From_t(t_value);\n        // console.log(`x_value: ${x_value}  t_value: ${t_value} check_x_value: ${check_x_value}`)\n\n        // let x = bezObj.x_From_t(t);\n        const y_value = bezObj.y_From_t(t_value);\n\n        if (y_value == 0)\n        {\n            console.log('CubicBezier: y_value is zero');\n        }\n\n        return y_value;\n    };\n\n    return functionOfX;\n};\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../src/bezier-functions.js\n// module id = 10\n// module chunks = 0","/**\n * Class for bezier quadratic class.\n */\nexport class BezierQuadratic\n{\n    /**\n     * Constructs the object.\n     *\n     * @param  {Float}  P0  Initial point\n     * @param  {Float}  P1  Attraction point\n     * @param  {Float}  P2  End point\n     */\n    constructor(P0, P1, P2)\n    {\n        this.P0 = P0;\n        this.P1 = P1;\n        this.P2 = P2;\n    }\n    derivative(t, p0, p1, p2)\n    {\n        function linear(p0, p1, t)\n        {\n            const res = p0 * (1.0 - t) + p1 * t;\n\n            return res;\n        }\n\n        const res = 2.0 * (linear(p1, p2, t) - linear(p0, p1, t));\n\n        return res;\n    }\n\n    bez_func(t, p0, p1, p2)\n    {\n        const res =   p0 * (1 - t) * (1 - t) + 2.0 * p1 * (1 - t) * t + p2 * t * t;\n\n        return res;\n    }\n\n    x_From_t(t)\n    {\n        const res = this.bez_func(t, this.P0[0], this.P1[0], this.P2[0]);\n\n        return res;\n    }\n\n    x_From_t_derivative(t)\n    {\n        const res = this.derivative(t, this.P0[0], this.P1[0], this.P2[0]);\n\n        return res;\n    }\n\n    y_From_t(t)\n    {\n        const res = this.bez_func(t, this.P0[1], this.P1[1], this.P2[1]);\n\n        return res;\n    }\n}\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../src/bezier-quadratic.js\n// module id = 11\n// module chunks = 0"],"sourceRoot":""}