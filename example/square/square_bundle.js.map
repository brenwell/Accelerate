{"version":3,"sources":["webpack:///webpack/bootstrap 2d8c027cf9edf73500b8","webpack:///../src/index.js","webpack:///./square/square.js","webpack:///../~/newton-raphson/index.js","webpack:///../src/bezier-accelerator.js","webpack:///../src/bezier-cubic.js","webpack:///../src/bezier-functions.js","webpack:///../src/bezier-quadratic.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA,mDAA2C,cAAc;;AAEzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;;;AChE4B;;AAE5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,MAAM;AACtB,gBAAgB,MAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA,iB;AACA,kD;AACA;AACA,a;AACA;AACA,S;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,sEAAsE,iCAAiC;AACvG,qCAAqC,mBAAmB;AACxD,kCAAkC,IAAI;AACtC,qCAAqC,mBAAmB;AACxD,+BAA+B,qBAAqB;;AAEpD;AACA;AACA,mFAAmF,iBAAiB;AACpG;AACA;AACA;AACA,iB;AACA,kD;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,MAAM;AACtB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,MAAM;AACtB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,MAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,MAAM;AACtB,gBAAgB,MAAM;AACtB,gBAAgB,MAAM;AACtB,gBAAgB,YAAY;AAC5B;AACA,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,MAAM;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+C;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,gBAAgB,MAAM;AACtB,gBAAgB,MAAM;AACtB,gBAAgB,MAAM;AACtB;AACA,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA,oCAAoC,GAAG,GAAG,GAAG,GAAG,GAAG;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,KAAK;AACL;AACA;AACA;AACA,gBAAgB,MAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,qBAAqB;AAChD,2BAA2B,mBAAmB;AAC9C,wBAAwB,UAAU;AAClC,2BAA2B,UAAU;AACrC;;AAEA;AAAA;AAAA;;AAEA;;;;;;;;;;;AC9QA;;AAEA;AACA;AACA,CAAC;;;AAGD;AACA;;AAEA;AACA;;AAEA,8CAA8C,4CAA4C;AAC1F;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,uCAAuC,MAAM,UAAU,iBAAiB,aAAa,UAAU,KAAK,EAAE;AACtG;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT,KAAK;AACL;;;;;;;;ACrEA;AACA;AACA;AAAA;AAAA;AAAA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,oC;AACA;;AAEA,mBAAmB,mBAAmB;AACtC;AACA;AACA;AACA;;AAEA;;AAEA;AACA,kC;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,CAAC,G;;;;;;;;ACnCsC;;AAEvC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB,YAAY,SAAS;AACrB,YAAY,wBAAwB,GAAG;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,eAAe,MAAM;AACrB;AACA,eAAe,MAAM;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,YAAY;AAC7B;AACA;;AAEA;AACA;AACA;AAAA;AAAA;AACA;;;;;;;;ACjHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAAA;AAAA;;;;;;;;;;;;;AC5EsB;AACI;AAC1B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,mCAAmC,QAAQ,aAAa,QAAQ,kBAAkB,cAAc;;AAEhG;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,8EAA8E,QAAQ;AACtF;AACA;AACA,mCAAmC,QAAQ,aAAa,QAAQ,kBAAkB,cAAc;;AAEhG;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AAAA;AAAA;;;;;;;;;ACjHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,MAAM;AACtB,gBAAgB,MAAM;AACtB,gBAAgB,MAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AAAA;AAAA","file":"square_bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 2d8c027cf9edf73500b8","import { BezierAccelerator } from './bezier-accelerator.js';\n\nfunction logger(s) // eslint-disable-line\n{\n    // console.log(s)\n}\n/*\n* TODO\n*   -   does not correctly support advancing by a time interval that jumps over the end of an acceleration\n*   -   the calc of velocity during an acceleration is crude and probably can be made more accurate\n*/\n\n/**\n * This class seeks to keep track of the 1 dimensional motion of an object that is subject to\n * multiple velocity changes.\n *\n * The two relevant properties of this object are position and velocity which can be obtained\n * at any time with methods position() and velocity()\n *\n * A starting velocity is set via the constructor.\n *\n * Time is advanced, and the position and velocity updated, by calling the method advanceTimeBy(timeInterval)\n * with a timeInterval or deltaTime which is a time interval since the last update and is in SECONDS not FRAMES\n *\n * An acceleration (either positive or negative) can be scheduled by calling the method accelerate(vF, tF, dF)\n * this call will have no effect on the position or velocity until the next call to advanceTimeBy\n * That method will apply the acceleration on successive calls until the ending condition is encountered\n * tF seconds of acceleration have elapsed AND the body has traveled dF distance during the acceleration\n *\n * On finishing the acceleration the advanceTimeBy() method will call the resolve() function\n * of the promise returned by call to accelerate() that setup the acceleration\n */\nexport default class Accelerator\n{\n    /**\n     * Constructs the object.\n     *\n     * @param  {Number}  v0  The initial Velocity\n     */\n    constructor(v0)\n    {\n        this.time = 0.0;\n        this.elapsedTimeChangingVelocity = 0.0;\n        this.timeInterval = 1.0 / 60.0; // @FIX this is going away\n        this.totalDistance = 0.0;\n        this.changingVelocity = false;\n        this.decelerator = null;\n        this.currentVelocity = v0;\n    }\n\n    /**\n     * Advance the moving objects time by a time interval\n     *\n     * @param  {Float}  deltaTime  Interval since the last call to this method\n     * @return {Float}  Total distance traveled after this time interbal is\n     *                  added to total time of travel. Just for convenience as\n     *                  could get this with position()\n     */\n    advanceTimeBy(deltaTime)\n    {\n        if (!this.changingVelocity && ! this.isWaiting)\n        {\n            this._advanceTimeAndDistanceWhileCoasting(deltaTime);\n        }\n        else if(! this.changingVelocity && this.isWaiting )\n        {\n            //this.time += deltaTime; - this will be done in _advanceTimeAndDistance\n            this.currentWaitingTime += deltaTime\n            if( this.currentWaitingTime >= this.requiredWaitingTime )\n            {\n                this.isWaiting = false\n                if (typeof this.resolvePromiseFunction === 'function')\n                { \n                    this.resolvePromiseFunction(); \n                }\n            } \n            this._advanceTimeAndDistanceWhileCoasting(deltaTime);\n        }    \n        else\n        {\n            this.time += deltaTime;\n            this.elapsedTimeChangingVelocity += deltaTime;\n\n            const tmp = this.decelerator.getDistance(this.elapsedTimeChangingVelocity);\n            const deltaDistance = (this.distanceBeforeVelocityChange + tmp) - this.totalDistance;\n\n            this.currentVelocity = deltaDistance / (deltaTime);\n            this.totalDistance = this.distanceBeforeVelocityChange + tmp;\n\n            logger(\n                `Mover::advanceByTime  elapsedTimeChangingVelocity: ${this.elapsedTimeChangingVelocity}`\n                + ` timeForChange: ${this.timeForChange}`\n                + ` DVdistance: ${tmp} `\n                + ` totalDistance: ${this.totalDistance}`\n                + `velocity: ${this.currentVelocity}`);\n\n            if (this.elapsedTimeChangingVelocity >= this.timeForChange)\n            {\n                logger(`Mover::advanceTimeBy::velocity increase DONE newVelocity:${this.newVelocity}`);\n                this.currentVelocity = this.newVelocity;\n                this.changingVelocity = false;\n                if (typeof this.resolvePromiseFunction === 'function')\n                { \n                    this.resolvePromiseFunction(); \n                }\n            }\n        }\n\n        return this.totalDistance;\n    }\n\n    /**\n     * Gets the current position of the moving object\n     *\n     * @return {Float}  returns the current position of the moving object\n     */\n    position()\n    {\n        return this.totalDistance;\n    }\n\n    /**\n     * Gets the current velocity of the moving object\n     *\n     * @return {Float}  returns the current velocity of the moving object\n     */\n    velocity()\n    {\n        return this.currentVelocity;\n    }\n\n    /**\n     * Sets the velocity. This cannot bet set during an acceleration\n     *\n     * @param  {Float}  v  The currenct velocity\n     */\n    setVelocity(v)\n    {\n        if (this.changingVelocity)\n        {\n            throw new Error('cannot setVelocity during an acceleration');\n        }\n        this.currentVelocity = v;\n    }\n\n    /**\n     * Instructs the object to start a velocity change\n     *\n     * @param  {Float}   vF  is the velocity the object is to change to\n     * @param  {Float}   tF  is the time interval over which the change is to take place\n     * @param  {Float}   dF  is the distance that the object should move while changing velocity\n     * @param  {Float|false} - a timeInterval to delay the acceleration by or false = no delay. Defaults to false\n     *\n     * @return {Promise}  Promise which will be resolved when the acceleration\n     *                    has completed\n     */\n     accelerate(vF, tF, dF, delayInterval = false)\n     {\n        if( delayInterval === false ){\n            return this._accelerateNoDelay(vF, tF, dF)\n        }else{\n            let q = this.waitFor(delayInterval)\n                    .then( ()=> {\n                        return this._accelerateNoDelay(vF, tF, dF)\n                    })\n            return q\n        }\n     }\n    /*\n    * Lets a timeinterval pass during which the accelerator moves along at a constant\n    * velocity.\n    *\n    * @param timeInterval {Float} - the time in units to wait\n    *\n    * @return Promise - that is resolved when the interval runs out\n    *\n    * @error - cannot wait while an acceleration is in progress\n    */\n    waitFor(timeInterval)\n    {\n        if (this.changingVelocity)\n        {\n            throw new Error('Accelerator: cannot wait while acceleration is underway');\n        }\n            if( this.isWaiting )\n        {\n            throw new Error('cannot have commence acceleration while wait is underway');\n        }\n        this.isWaiting = true\n        this.requiredWaitingTime = timeInterval\n        this.currentWaitingTime = 0.0\n\n        const p = new Promise((resolve) =>\n        {\n            this.resolvePromiseFunction = resolve;\n        });\n\n        return p        \n    }\n    /*\n    * Stops any current acceleration. \n    * @Error - if no acceleration is active\n    *\n    * resolves the acceleration promise\n    */\n    kill()\n    {\n        if( this.changingVelocity ){\n            this.changingVelocity = false\n            if (typeof this.resolvePromiseFunction === 'function')\n            {\n                 this.resolvePromiseFunction(); \n            }\n        }else{\n            console.log(`WARNING: Accelerator - kill not necessary when no acceleration active`)\n        }\n    }\n    /*\n    * Implements the heavy lifting for the accelerate function\n     * @param  {Float}   vF  is the velocity the object is to change to\n     * @param  {Float}   tF  is the time interval over which the change is to take place\n     * @param  {Float}   dF  is the distance that the object should move while changing velocity\n     *\n     * @return {Promise}  Promise which will be resolved when the acceleration\n     *                    has completed\n    */\n    _accelerateNoDelay(vF, tF, dF, promise)\n    {\n        logger(`Mover::accelerate ${vF} ${tF} ${dF}`);\n        if (this.changingVelocity)\n        {\n            throw new Error('cannot have two accelerations underway at the same time');\n        }\n        if( this.isWaiting )\n        {\n            throw new Error('cannot have commence acceleration while wait is underway');\n        }\n        const v0 = this.currentVelocity;\n        const p = new Promise((resolve) =>\n        {\n            this.resolvePromiseFunction = resolve;\n        });\n\n        this.distanceBeforeVelocityChange = this.totalDistance;\n        this.changingVelocity = true;\n        this.elapsedTimeChangingVelocity = 0.0;\n        this.timeForChange = tF;\n        this.newVelocity = vF;\n        this.distanceForChange = dF;\n        this.decelerator = new BezierAccelerator(v0, vF, tF, dF);\n\n        return p;\n    }    /**\n     * Advances total time & distance when NO acceleration is active\n     *\n     * @private\n     * @param  {Float}  deltaTime  The delta time\n     */\n    _advanceTimeAndDistanceWhileCoasting(deltaTime)\n    {\n        this.time += deltaTime;\n        this.totalDistance += this.currentVelocity * deltaTime;\n        logger(`\\nMover::advanceTimeBy_VelocityNotChanging `\n            + ` velocity:${this.currentVelocity}`\n            + ` distance:${this.totalDistance}`\n            + ` time: ${this.time}`\n            + `deltaTime:${deltaTime}`);\n    }\n\n}\n\n// window.Accelerate = exports;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../src/index.js\n// module id = 0\n// module chunks = 0","\nimport Mover from '../../src/index.js';\n\n$(document).ready(function(){\n    main();\n});\n\n\nfunction main()\n{\n\n    const accelerator = new Mover(10);\n    console.log(accelerator);\n\n    var app = new PIXI.Application(600, 600, {backgroundColor : 0x1099bb, antialias: true});\n    document.body.appendChild(app.view);\n\n    const size = 100;\n\n    // create a new Sprite from an image path\n    var bunny = new PIXI.Graphics();\n    bunny.beginFill(0xFFCC66);\n    bunny.drawRect(0,0,size,size);\n    bunny.endFill();\n    bunny.pivot.set(size/2);\n\n    // move the sprite to the center of the screen\n    bunny.x = app.renderer.width / 2;\n    bunny.y = app.renderer.height / 2;\n\n    app.stage.addChild(bunny);\n\n  // Listen for animate update\n    let totalTime = 0;\n    app.ticker.add(function(delta) {\n        // this is because the accelerator does no know about pixi's delta value\n        totalTime += delta*(1.0/60.0);\n    \n        let r = accelerator.advanceTimeBy(delta*(1.0/60.0));\n        // console.log(`ticker delta:${delta} deltaT:${delta*(1.0/60.0)} totalTime:${totalTime} r:${r}`)\n        bunny.rotation = r;\n    });\n    \n    let timer = setTimeout( () => {\n        console.log('timer fired - start acceleration/deceleration to zero speed for 10 seconds cover 50 units');\n        accelerator.accelerate(0, 10, 50)\n        .then(function()\n        {\n            console.log('first acceleration done - accelerate to 10 for 5 seconds and cover 50 units of distance');\n            accelerator.accelerate(10, 5, 50)\n            .then(function()\n            {\n                console.log('second acceleration done - now wait 60 ticks and then decelerate to zero');\n                let counter = 0;\n                let waiter = function(delta) {\n                    if( counter++ > 180 ){\n                        console.log('180 ticks done - start decel to zero');\n                        accelerator.accelerate(0, 10, 50)                \n                        .then(function(){\n                            console.log('deceleration to zero done - stop ticker');\n                            app.ticker.stop();\n                        });\n                        app.ticker.remove(waiter);\n                    }\n                };\n                app.ticker.add(waiter);\n            });\n        });\n    },1000);\n}\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./square/square.js\n// module id = 1\n// module chunks = 0","(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define([], factory);\n    } else if (typeof exports === 'object') {\n        module.exports = factory();\n    } else {\n        root.newtonRaphson = factory();\n  }\n}(this, function () {\n  return function findRoot(f, fprime, guess, options) {\n    options = options || {};\n    var tolerance = options.tolerance || 0.00000001;\n    var epsilon = options.epsilon || 0.0000000000001;\n    var maxIterations = options.maxIterations || 20;\n    var haveWeFoundSolution = false; \n    var newtonX;\n   \n    for (var i = 0; i < maxIterations; ++i) {\n      var denominator = fprime(guess);\n      if (Math.abs(denominator) < epsilon) {\n        return false\n      }\n   \n      result = guess - (f(guess) / denominator);\n      \n      var resultWithinTolerance = Math.abs(result - guess) < tolerance;\n      if (resultWithinTolerance) { \n        return result\n      }\n\n      guess = result;\n    }\n    \n    return false;\n  }\n}));\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../~/newton-raphson/index.js\n// module id = 2\n// module chunks = 0","import { QuadraticBezier, CubicBezier } from './bezier-functions';\n\n/*\n*   @TODO\n*   -   there is a lot of duplicate code in here in the handling of the different cases.\n*       can wind a lot of it into one piece\n*   -   need a general tidyup of names and code nolonger used\n*   - this needs a good tidy-up and reworking into ES6 style - but thats for later\n*/\n\n/**\n * This class performs velocity changes on objects in 1-dimensional motion\n *\n * provides a single method getDistance(t) - will change name to positionAfter(t) at some point\n * that returns the total distance traveled since after t seconds of the velocity change\n *\n * It does NOT keep track of the moving object outside of the velocity change window\n *\n * Elapsed time is measured from the start of the velocity change\n *\n * You can only use one of these objects once. Once the velocity change is complete\n * any call to getPositionAfter will result in an error\n\n * @class  BezDecelerator (name)\n * @param  {number}                   v0  Initial velocity\n * @param  {number}                   vF  Final velocity\n * @param  {number}                   tF  Final time\n * @param  {number}                   dF  Final distance\n * @param  {Function}                 cb  Completion handler\n * @return {(Array|Function|number)}  { description_of_the_return_value }\n */\nexport const BezierAccelerator = function Decelerator(v0, vF, tF, dF, cb)\n{\n\t// just changing the notation to what I am using\n    const V = v0;\n    const T = tF;\n    const D = dF;\n    let P0 = [],\n        P1 = [],\n        P2 = [],\n        P3 = [];\n    let func;\n    let complete = false;\n    const callBack = cb;\n\n    if ((v0 > 0) && (vF == 0) && ((T * v0) > (D)))\n    {\n        // this is the one special case where a cubic will not do the job\n        P0 = [0.0, 0.0];\n        P2 = [T, D];\n        const p1_x = (D - vF * T) / (v0 - vF);\n        const p1_y = (v0 * p1_x);\n\n        func = QuadraticBezier(P0, [p1_x, p1_y], P2);\n    }\n    else\n    {\n        P0 = [0.0, 0.0];\n        P1 = [T / 3.0, V * T / 3.0];\n        P2 = [(2.0 / 3.0) * T, D - vF * T / 3.0];\n        P3 = [T, D];\n        func = CubicBezier(P0, P1, P2, P3);\n    }\n\n    this.tangent_initial = function (t)\n\t{\n        return V * t;\n    };\n\n    this.dotPositions = function ()\n    {\n        return [P0, P1, P2, P3];\n    };\n\n\t/*\n    * this function draws the trajectory of the final velocity.Used only for debugging and demonstration\n    * not part of the final exposed package\n    */\n    this.tangent_final = function (t)\n\t{\n        const res =  vF * t + (D - vF * T);\n\n        return res;\n    };\n\n    this.getPositionAfter = function (elapsed_time)\n    {\n        return this.getDistance(elapsed_time);\n    }.bind(this);\n    /*\n    * This is the only exposed method of the class that is not simply for debugging.\n    *\n    * x_value {float} - a number in the range  0..tF the elapsed time of the velocity change\n    *\n    * Returns {float} - the distance traveled since the start of the velocity change\n    */\n    this.getDistance = (x_value) =>\n    {\n        if (this.complete)\n        {\n            throw new Error('Accelerator: velocity change is complete. Cannot call this function');\n        }\n        if ((x_value >= T) && (!complete))\n        {\n            complete = true;\n            if ((typeof callBack === 'function') && (callBack != null))\n                { callBack(); }\n        }\n        const y_value = func(x_value);\n\n        return y_value;\n    };\n};\n// module.exports = BezDecelerator;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../src/bezier-accelerator.js\n// module id = 3\n// module chunks = 0","/**\n * Class for bezier cubic class.\n */\nexport class BezierCubic\n{\n    /**\n     * Constructs the object.\n     *\n     * @param  {<type>}  P0  Inital Point\n     * @param  {<type>}  P1  First attraction point\n     * @param  {<type>}  P2  Second attraction point\n     * @param  {<type>}  P3  End point\n     */\n    constructor(P0, P1, P2, P3)\n    {\n        this.P0 = P0;\n        this.P1 = P1;\n        this.P2 = P2;\n        this.P3 = P3;\n    }\n\n    /**\n     * @private\n     */\n    derivative(t, p0, p1, p2, p3)\n    {\n        function quadratic(p0, p1, p2, t)\n        {\n            const res = p0 * (1.0 - t) * (1.0 - t) + 2.0 * p1 * (1.0 - t) * t + p2 * t * t;\n\n            return res;\n        }\n        const res = 3.0 * (quadratic(p1, p2, p3, t) - quadratic(p0, p1, p2, t));\n\n        return res;\n    }\n    /**\n     * @private\n     */\n    bez_func(t, p0, p1, p2, p3)\n    {\n        const res =   p0 * (1 - t) * (1 - t) * (1 - t)\n                    + 3.0 * p1 * (1 - t) * (1 - t) * t\n                    + 3.0 * p2 * (1 - t) * t * t\n                    + p3 * t * t * t;\n\n        return res;\n    }\n\n    x_From_t(t)\n    {\n        const res = this.bez_func(t, this.P0[0], this.P1[0], this.P2[0], this.P3[0]);\n\n        return res;\n    }\n\n    x_From_t_derivative(t)\n    {\n        const res = this.derivative(t, this.P0[0], this.P1[0], this.P2[0], this.P3[0]);\n\n        return res;\n    }\n\n    y_From_t(t)\n    {\n        const res = this.bez_func(t, this.P0[1], this.P1[1], this.P2[1], this.P3[1]);\n\n        return res;\n    }\n    // currently not used\n    point_From_t()\n    {\n        const res = [this.x_From_t(t), this.y_From_t(t)];\n\n        return res;\n    }\n}\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../src/bezier-cubic.js\n// module id = 4\n// module chunks = 0","import { BezierCubic } from './bezier-cubic';\nimport { BezierQuadratic } from './bezier-quadratic';\nimport newtonRaphson from 'newton-raphson';\n\n/*\n* @TODO\n*   -    better first guesses for newton-raphson\n*/\n/*\n* The key thing happening here is to convert a parameterized Bezier function\n* into a function of x\n*/\n\n/*\n* This function returns a function which is a bezier Cubic curve as a\n* function of x so that (x, f(x)) is a point on the bezier curve.\n* Bezier functions are defined as curves (x(t), y(t)) for a parameter t between 0 .. 1\n* but cannot be rephrased as (x, f(x)). Getting itin this f(x) form takes computational work\n*/\nexport const CubicBezier = function CubicBezier(P0, P1, P2, P3)\n{\n    const bezObj = new BezierCubic(P0, P1, P2, P3);\n\n    const parametricFunc = function (t)\n    {\n        return [bezObj.x_From_t(t), bezObj.y_From_t(t)];\n    };\n\n    const functionOfX = function (x_value)\n    {\n        // find the t value that corresponds to the x value\n        // get it by newton raphson\n\n        const f = function (t)\n        {\n            return (bezObj.x_From_t(t) - x_value);\n        };\n        const fPrime = function (t)\n        {\n            return bezObj.x_From_t_derivative(t);\n        };\n\n        const t_value = newtonRaphson(f, fPrime, 0.5, null);\n\n        if (t_value === false)\n        {\n            throw new Error('cannot find t for x in CubicBezier');\n        }\n        const check_x_value = bezObj.x_From_t(t_value);\n        // console.log(`x_value: ${x_value}  t_value: ${t_value} check_x_value: ${check_x_value}`)\n\n        // let x_value = bezObj.x_From_t(t)\n        const y_value = bezObj.y_From_t(t_value);\n\n        if (y_value == 0)\n        {\n            console.log('CubicBezier: y_value is zero');\n        }\n\n        return y_value;\n    };\n\n    return functionOfX;\n};\n/*\n* This function returns a function which is a bezier Quadratuc curve as a\n* function of x so that (x, f(x)) is a point on the bezier curve\n*/\nexport const QuadraticBezier = function QuadraticBezier(P0, P1, P2)\n {\n    const bezObj = new BezierQuadratic(P0, P1, P2);\n\n    // find the t value that corresponds to the x value\n    // get it by newton raphson\n\n    const parametricFunc = function (t)\n    {\n        return [bezObj.x_From_t(t), bezObj.y_From_t(t)];\n    };\n\n    const functionOfX = function (x_value)\n    {\n        const f = function (t)\n        {\n            return (bezObj.x_From_t(t) - x_value);\n        };\n        const fPrime = function (t)\n        {\n            return bezObj.x_From_t_derivative(t);\n        };\n\n        const t_value = newtonRaphson(f, fPrime, 0.5, null);\n\n        if (t_value === false)\n        {\n            console.log([P0, P1, P2]);\n            throw new Error(`cannot find t for x in QuadraticBezier x_value:${x_value}`);\n        }\n        const check_x_value = bezObj.x_From_t(t_value);\n        // console.log(`x_value: ${x_value}  t_value: ${t_value} check_x_value: ${check_x_value}`)\n\n        // let x = bezObj.x_From_t(t);\n        const y_value = bezObj.y_From_t(t_value);\n\n        if (y_value == 0)\n        {\n            console.log('CubicBezier: y_value is zero');\n        }\n\n        return y_value;\n    };\n\n    return functionOfX;\n};\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../src/bezier-functions.js\n// module id = 5\n// module chunks = 0","/**\n * Class for bezier quadratic class.\n */\nexport class BezierQuadratic\n{\n    /**\n     * Constructs the object.\n     *\n     * @param  {Float}  P0  Initial point\n     * @param  {Float}  P1  Attraction point\n     * @param  {Float}  P2  End point\n     */\n    constructor(P0, P1, P2)\n    {\n        this.P0 = P0;\n        this.P1 = P1;\n        this.P2 = P2;\n    }\n    derivative(t, p0, p1, p2)\n    {\n        function linear(p0, p1, t)\n        {\n            const res = p0 * (1.0 - t) + p1 * t;\n\n            return res;\n        }\n\n        const res = 2.0 * (linear(p1, p2, t) - linear(p0, p1, t));\n\n        return res;\n    }\n\n    bez_func(t, p0, p1, p2)\n    {\n        const res =   p0 * (1 - t) * (1 - t) + 2.0 * p1 * (1 - t) * t + p2 * t * t;\n\n        return res;\n    }\n\n    x_From_t(t)\n    {\n        const res = this.bez_func(t, this.P0[0], this.P1[0], this.P2[0]);\n\n        return res;\n    }\n\n    x_From_t_derivative(t)\n    {\n        const res = this.derivative(t, this.P0[0], this.P1[0], this.P2[0]);\n\n        return res;\n    }\n\n    y_From_t(t)\n    {\n        const res = this.bez_func(t, this.P0[1], this.P1[1], this.P2[1]);\n\n        return res;\n    }\n}\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../src/bezier-quadratic.js\n// module id = 6\n// module chunks = 0"],"sourceRoot":""}