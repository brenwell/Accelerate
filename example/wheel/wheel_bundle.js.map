{"version":3,"sources":["webpack:///webpack/bootstrap 4168eb042066ac41658e","webpack:///./wheel/three_wheels.js","webpack:///./wheel/main.js","webpack:///./wheel/single_wheel.js","webpack:///../~/newton-raphson/index.js","webpack:///../src/accelerator.js","webpack:///../src/bez_functions.js","webpack:///../src/bezier_cubic.js","webpack:///../src/bezier_quadratic.js","webpack:///../src/index.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA,mDAA2C,cAAc;;AAEzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;;;;;;;;;;AChEoB;;AAEpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,wCAAwC,eAAe;AACvD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,gCAAgC;AACvD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;ACvPK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AACD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;AClDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,iBAAiB;AAClC,iBAAiB,MAAM;AACvB,iBAAiB,eAAe;AAChC,iBAAiB,qBAAqB;AACtC,iBAAiB,MAAM;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,0C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA,gBAAgB,IAAI;AACpB,oBAAoB,MAAM;AAC1B,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,IAAI;AACpB,oBAAoB,MAAM;AAC1B;AACA,iBAAiB,MAAM;AACvB;AACA;AACA;AACA,4DAA4D,SAAS,iBAAiB,aAAa;AACnG;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA,kEAAkE,KAAK,aAAa,UAAU;AAC9F;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA,sEAAsE,UAAU;AAChF;AACA,sDAAsD,GAAG,iBAAiB,aAAa,cAAc,UAAU;AAC/G;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,MAAM;AACtB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,MAAM;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,MAAM;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,qBAAqB,IAAI;AACzB;AACA,eAAe,MAAM;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;;;AAGA;AACA;AACA;AACA,aAAa,IAAI;AACjB,aAAa,MAAM;AACnB,aAAa,MAAM;AACnB;AACA,kCAAkC,GAAG,MAAM,MAAM,MAAM,SAAS,cAAc;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,mBAAmB,WAAW;AAC9B;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACpSA;AACA;AACA;AAAA;AAAA;AAAA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,oC;AACA;;AAEA,mBAAmB,mBAAmB;AACtC;AACA;AACA;AACA;;AAEA;;AAEA;AACA,kC;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,CAAC,G;;;;;;;;;AClCoC;;AAErC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM,MAAM;AACZ,MAAM,MAAM;AACZ,MAAM,MAAM;AACZ,MAAM,MAAM;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,eAAe,MAAM;AACrB;AACA,eAAe,MAAM;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;;AAGL;AAAA;AAAA;AACA;;;;;;;;;;;;AC3GyB;AACI;AAC7B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mCAAmC,QAAQ,aAAa,QAAQ,kBAAkB,cAAc;;AAEhG;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,8EAA8E,QAAQ;AACtF;AACA;AACA,mCAAmC,QAAQ,aAAa,QAAQ,kBAAkB,cAAc;;AAEhG;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAAA;AAAA;;;;;;;;;ACvGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,C;;;;;;;;;;;;;ACzDA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,C;;;;;;;;;;;;AClDuB;;AAEvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,MAAM;AACzB;AACA,iBAAiB,MAAM;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,sEAAsE,iCAAiC;AACvG,oCAAoC,mBAAmB;AACvD,iCAAiC,IAAI;AACrC,oCAAoC,mBAAmB;AACvD,+BAA+B,qBAAqB;;AAEpD;AACA;AACA,mFAAmF,iBAAiB;AACpG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,MAAM;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,MAAM;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,GAAG,GAAG,GAAG,GAAG,GAAG;AACnD;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,qBAAqB,YAAY,mBAAmB,SAAS,UAAU;AACxF;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,6DAA6D,eAAe,QAAQ,UAAU;AAC9F;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;;;AAGA,+B","file":"wheel_bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 4168eb042066ac41658e","import {SingleWheel} from \"./single_wheel.js\"\n\n/*\n* This is the master module (not a class) that sets up the three spinning wheels and provides\n* interface functions to manage the behavior of the wheels.\n*\n* These are the exported functions\n*\n*   export function createThreeWheels()\n*   export function setPosition(outterPosition, middlePosition, innerPosition)\n*   export function startSpinning(outterVelocity, middleVelocity, innerVelocity)\n*   export function stopWheelsAtPositionInTimeInterval(outterPosition, middlePosition, innerPosition, timeInterval)\n*   export function stopWheel()\n*\n*/\n\nconst colors = [\n  0x9400D3, //Violet\n  0x4B0082, //Indigo\n  0x0000FF, //Blue\n  0x00FF00, //Green\t\n  0xFFFF00, //Yellow\n  0xFF7F00, //Orange\n  0xFF0000, //Red\n]\nconst NUMBER_OF_SEGMENTS = colors.length\nconst PIE_ANGLE = 360 / colors.length\nconst PIE_MIDDLE = PIE_ANGLE / 2\nconst SPINS = 4 * 360 \nconst TIME_LENGTH = 4 //secs\nconst SPIN_DELAY = 1 //secs\nconst GROWTH = 1.1\n\n\nconst options = {\n\tbackgroundColor : 0xEEEEEE, \n    antialias: true\n}\n\nlet app;\nlet containerOuter;\nlet containerMiddle;\nlet containerInner;\n\nlet outerWheel;\nlet middleWheel;\nlet innerWheel;\n\nlet button;\nlet tweenOuter;\nlet tweenMiddle;\nlet tweenInner;\n\nlet isSpinning = false\nlet timer\n\n\nexport function createThreeWheels(el, width, height)\n{\n    app = new PIXI.Application(width, height, options);\n    // document.body.appendChild(app.view);\n    el.appendChild(app.view)\n\n    outerWheel = new SingleWheel(app, 300, 0xFFFFFF, colors, -PIE_MIDDLE)\n    middleWheel = new SingleWheel(app, 210, 0xFFFFFF, colors, -PIE_MIDDLE)\n    innerWheel = new SingleWheel(app, 120, 0xFFFFFF, colors, -PIE_MIDDLE)\n\n    containerOuter = outerWheel.container\n    containerMiddle = middleWheel.container\n    containerInner = innerWheel.container\n\n    app.stage.addChild(containerOuter)\n    app.stage.addChild(containerMiddle)\n    app.stage.addChild(containerInner)\n\n    addIndicator()  \n    addCenterButton()\n\n}\n\n/*\n* Moves the wheels to positions. The positions are indexes\n* in the range 0 .. NUMBER_OF_SEGMENTS - 1\n* Positions each circle so that the specified segment is at the \n* pointer mark - the mark is in the middle of the segment.\n*\n* Segments are numbered clockwise same as the colors\n*/\nexport function setPosition(outterPosition, middlePosition, innerPosition)\n{\n    outerWheel.setPosition(outterPosition)\n    middleWheel.setPosition(middlePosition)\n    innerWheel.setPosition(innerPosition)\n}\n/*\n* Starts all wheels spinning with velocity for each wheel given by the object\n* Speed units are in radians/sec\n*/\nexport function startSpinning(outterVelocity, middleVelocity, innerVelocity)\n{\n    let frameInterval = Math.round(1000*(1.0/60.0))\n\n    outerWheel.setVelocity(outterVelocity)\n    middleWheel.setVelocity(middleVelocity)\n    innerWheel.setVelocity(innerVelocity)\n    // add ticker function so that time is advanced for each wheel\n    app.ticker.add(tickerFunc)\n}\n\nexport function stopWheelsWithLoss(\n                    positionOuter, \n                    positionMiddle, \n                    positionInner, \n                    decelerateTimeInterval\n)\n{\n    let allPs = []\n    allPs.push(outerWheel.accelerateToZero(positionOuter, decelerateTimeInterval))\n    allPs.push(middleWheel.accelerateToZero(positionMiddle, decelerateTimeInterval))\n    allPs.push(innerWheel.accelerateToZero(positionInner, decelerateTimeInterval))\n    Promise.all(allPs).then(function(){\n        console.log(\"all wheels have stopped\");\n        removeTickerFunc()\n    })\n}\nexport function stopWheelsWithNearWin(\n                    positionTwice, \n                    positionOnce, \n                    decelerateTimeIntervalFirstTwoWheels,\n                    decelerateTimeIntervalLastWheel\n)\n{\n    let allPs = []\n    allPs.push(outerWheel.accelerateToZero(positionOnce, decelerateTimeIntervalLastWheel))\n    allPs.push(middleWheel.accelerateToZero(positionTwice, decelerateTimeIntervalFirstTwoWheels))\n    allPs.push(innerWheel.accelerateToZero(positionTwice, decelerateTimeIntervalFirstTwoWheels))\n    Promise.all(allPs).then(function(){\n        console.log(\"all wheels have stopped\");\n        removeTickerFunc()\n    })   \n}\nexport function stopWheelsWithWin(\n                    positionWinner, \n                    decelerateTimeIntervalFirstTwoWheels,\n                    decelerateTimeIntervalLastWheel\n)\n{\n    let allPs = []\n    allPs.push(outerWheel.accelerateToZero(positionWinner, decelerateTimeIntervalFirstTwoWheels))\n    allPs.push(middleWheel.accelerateToZero(positionWinner, decelerateTimeIntervalFirstTwoWheels))\n    allPs.push(innerWheel.accelerateToZero(positionWinner, decelerateTimeIntervalLastWheel))\n    Promise.all(allPs).then(function(){\n        console.log(\"all wheels have stopped\");\n        removeTickerFunc()\n    })       \n}\n\n/*\n* called after result known so that tickerFunc is not called\n*/\nfunction removeTickerFunc()\n{\n    app.ticker.remove(tickerFunc)    \n}\n\nexport function stopWheel()\n{\n    app.ticker.remove(tickerFunc)\n}\n\nfunction tickerFunc(delta)     // currently ignores the delta value\n{\n    let timeInterval = delta * (1.0/60.0)\n    outerWheel.advanceTimeBy(timeInterval)\n    middleWheel.advanceTimeBy(timeInterval)\n    innerWheel.advanceTimeBy(timeInterval)\n    return    \n}\n\n\nfunction radiansPerSecToPerTick(radsSec)\n{\n    let tmp = radsSec / 60.0\n    return tmp    \n}\n\n\n/*\n* Add a triangular pointer to the top of the 'wheel'\n*/\nfunction addIndicator()\n{\n    const tri = new PIXI.Graphics()\n    tri.beginFill(0xFFFFFF);\n    tri.moveTo(0, 0);\n    tri.lineTo(30, 0);\n    tri.lineTo(15, 30);\n    tri.endFill();\n\n    const triContainer = new PIXI.Container()\n    triContainer.addChild(tri)\n    app.stage.addChild(triContainer)\n    triContainer.x = 300 - 15\n}\n\n/*\n* Add a center button to the wheel and hooks the press of that\n* button to the randon function\n*/\nfunction addCenterButton()\n{\n    const cir = new PIXI.Graphics()\n    cir.beginFill(0xFFFFFF);\n    cir.drawCircle(0,0,50)\n    cir.endFill();\n\n    const text = new PIXI.Text('Click',{fill: 0xFF66CC})\n    text.x = Math.round(-text.width/2)\n    text.y = -14\n\n    const cirContainer = new PIXI.Container()\n    cirContainer.addChild(cir)\n    cirContainer.addChild(text)\n    app.stage.addChild(cirContainer)\n    cirContainer.x = 300\n    cirContainer.y = 300\n\n    cirContainer.buttonMode = true\n    cirContainer.interactive = true\n    cirContainer.pointerup = function()\n    {\n        startSpinning({outter: 30, middle:20, inner:10})\n    }\n  button = text  \n}\n\nfunction convertPositionToRadians(positionIndex)\n{\n    let t = (2 * Math.PI * positionIndex / NUMBER_OF_SEGMENTS)\n    if( t != 0){\n        t = 2*Math.PI - t\n    }\n    let res = t - degToRad(PIE_MIDDLE)\n    return res\n}\n\n\n\n/*\n* Converts degrees to radians\n*/\nfunction degToRad(degrees)\n{\n    return degrees * Math.PI / 180;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./wheel/three_wheels.js\n// module id = 0\n// module chunks = 0","import {setPosition, \n        startSpinning, \n        createThreeWheels, \n        stopWheel,\n        stopWheelsWithLoss,\n        stopWheelsWithNearWin,\n        stopWheelsWithWin\n    } from \"./three_wheels.js\"\n\n$(document).ready(function(){\n    $(\"#btn-position\").click(positionBtn)\n    $(\"#btn-stop\").click(stopBtn)\n    $(\"#btn-start-spinning\").click(startSpinningBtn)\n    $(\"#btn-loss\").click(lossBtn)\n    $(\"#btn-nearwin\").click(nearwinBtn)\n    $(\"#btn-win\").click(winBtn)\n\n    $(\"#wheels\").css(\"background-color\", \"yellow\")\n    $(\"#wheels\").css(\"width\", 600)\n    $(\"#wheels\").css(\"height\", 600)\n    $(\"#wheels\").css(\"float\", \"left\")\n\n    createThreeWheels($(\"#wheels\")[0], 600, 600)\n})\nfunction positionBtn()\n{\n    console.log('positionFirst')\n    setPosition(0,1,2)\n\n}\nfunction stopBtn()\n{\n    console.log('stop')  \n    stopWheel()  \n}\nfunction startSpinningBtn()\n{\n    startSpinning(8, 12, 16)\n}\nfunction lossBtn()\n{\n    stopWheelsWithLoss(1, 2, 3, 2.0)\n}\nfunction nearwinBtn()\n{\n    stopWheelsWithNearWin(2, 3, 2.0, 4.0)\n}\nfunction winBtn()\n{\n    stopWheelsWithWin(2, 2.0, 4.0)\n}\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./wheel/main.js\n// module id = 1\n// module chunks = 0","import Accelerator from \"../../src/index.js\"\n/*\n* This class represents one wheel in a multi wheel game. \n* It both draws the wheel it is responsible for and adapts \n* a private instance of the Accelerator class to a world where distance is\n* in radians and hence d and d+2*PI are effectively the same distance\n*\n* This probably means I need a specialized verions of the Accelerator\n* rather than combining drawing an accelerator functions into a single class\n*/\nexport class SingleWheel {\n    /*\n    * app       {PIXI.application}      - the pixie app for the wheel\n    * radius    {float}                 - radius of the circle\n    * bg        {hex color code}        - the background color behind the wheel\n    * colors    {array of color codes}  - specifies both the number and color of the segments\n    * startDeg  {float}                 - an initial rotation to get the starting image correct. With the\n    *                                       first segment positioned at the pointer\n    */\n    constructor(app, radius, bg, colors, startDeg)\n    {\n        this.velocity = 0.0\n        this.app = app\n        this.colors = colors\n        this.numberOfSegments = colors.length\n        this.startDegrees = startDeg\n        this.lastRadians = 0\n        this.accelerator = new Accelerator(0)\n\n        const container = new PIXI.Container()\n        container.pivot.x = 0\n        container.pivot.y = 0\n        container.x = 300\n        container.y = 300\n        \n        // draw outter background circle with given background\n        const circle = new PIXI.Graphics()\n        circle.beginFill(bg)\n        circle.lineStyle(10, bg);\n        circle.drawCircle(0,0,radius)\n        circle.endFill()\n        container.addChild(circle)\n\n        // draw inner background circle with white background\n        const mask = new PIXI.Graphics()\n        mask.beginFill(0xFFFFFF)\n        mask.drawCircle(0,0,radius)\n        mask.endFill()\n        container.addChild(mask)\n\n        // get the (x,y) coordinates of the point that bound the sectors\n        const coords = plotCirclePoints(colors.length, radius+50, -90)\n        const size = radius \n\n        coords.forEach(function(coord, i){   \n            const index = (i == coords.length-1) ? 0 : i+1\n            const nextCoord = coords[index]\n\n            // draw the triangular sector of the correct color - note we are working within container\n            const tri = new PIXI.Graphics()\n            tri.beginFill( colors[i], 0.8);\n            tri.moveTo(0, 0);\n            tri.lineTo(coord.x, coord.y);\n            tri.lineTo(nextCoord.x, nextCoord.y);\n            tri.lineTo(0, 0);\n            tri.endFill();\n            tri.mask = mask\n            container.addChild(tri);\n        })\n        container.rotation = degToRad(startDeg)\n        this.container = container\n    }\n\n    /*\n    * accelerate to zero\n    * position {int}        - the index of the segment that is to be under the pointer when the velocity reaches zero\n    * timeInterval {float}  - the timeInterval in seconds over which the deleration is to take place\n    * return {Promise}      - resolved when acceleration is complete\n    */\n    accelerateToZero(position, timeInterval)\n    {\n        let dF = this.calculateStoppingDistance(position, timeInterval)\n        return this.accelerator.accelerate(0.0, timeInterval, dF)\n    }\n\n    /*\n    * Advances the wheel's time by a timeInterval and redraws the wheel in the new position.\n    * Takes account of the circular nature of the wheel and keeps the new rotation value to less than 2*PI.\n    * does this by remembering the last radian value and ASSUMES the shift in\n    * radians over the timeINterval is less than 2*PI\n    *\n    * timeInterval {float}\n    *\n    * returns nothing\n    */\n    advanceTimeBy(timeInterval)\n    {\n        let d = this.accelerator.advanceTimeBy(timeInterval) \n        // d - this can be a large number is not restricted to\n        // range -2PI .. 2PI\n        let deltaRads = d - this.lastRadians\n        this.lastRadians = d\n        this.rotateByRadians(deltaRads)\n    }\n\n\n    /*\n    * VERY IMPORTANT METHOD - will probably need tuning to get a good visual result\n    *\n    * Calculate the dF value to give to our instance of an accelerator object\n    *\n    * Because of the circular nature of the wheel and that rotations are equivalent modulo 2*PI\n    * there are multiple dF values that will give the same rotation result.\n    * The goal of this method is to pick a dF that gives good visual result.\n    *\n    * CURRENT ONLY USES A SIMPLE ALGORITHM \n    *\n    * Find the dF value so that\n    *   -   currentVelocity * timeInterval > dF\n    *   -   currentVelocity * timeInterval = dF * 2 --- approximately \n    *   -   for which dF is equivalent to 'position'\n    *\n    * position {int} - index of the segment that we want under the pointer\n    * timeInterval {float} - the time interval over which we have to decelerate to the position\n    *\n    * returns dF{float} - the stopping distance in radians \n    */\n    calculateStoppingDistance(position, timeInterval)\n    {\n        console.log(`calculateStoppingDistance position : ${position} timeInterval: ${timeInterval}`)\n        let positionInRadians = this.convertPositionToRadians(position)\n        let v0 = this.velocity\n        if( v0 < (2*Math.PI/timeInterval)){\n            alert(\"velocity maybe too low\")\n        }\n        let currentRadians = this.container.rotation\n\n        let deltaRadians = (positionInRadians >= currentRadians) ? \n                                (positionInRadians - currentRadians) :\n                                (2*Math.PI + positionInRadians - currentRadians)\n\n        let dRequired = deltaRadians\n\n        let dMax = v0 * timeInterval\n\n        if( dMax <= dRequired){\n            alert(\n                `dRequired too big  or velocity too low\\n dMax: ${dMax} dRequired:${dRequired}`\n                +` \\nmay be suboptimal deceleration shape`\n                )\n        }\n        // let cycles = Math.round(v * timeInterval / (2 * Math.PI) ) \n        // if( (cycles * 2 * Math.PI + deltaRadians) < dMax ){\n        //     dRequired = cycles * 2 * Math.PI + deltaRadians\n        // }else{\n        //     dRequired = (cycles-1) * 2 * Math.PI + deltaRadians            \n        // }\n        // if( (cycles * 2 * Math.PI + deltaRadians) > dMax ){\n        //     throw new Error(`calculateStoppingDistance dRequired:${dRequired} too big`)\n        // }\n        console.log(`calculateStoppingDistance v0 : ${v0} timeInterval: ${timeInterval} dRequired: ${dRequired}`)\n        return dRequired\n    }\n\n    /*\n    * Sets the wheels velocity in radians per second\n    * @NOTE - we have duplicate data here BEWARE\n    * velocity {float} - radians per sec\n    */\n    setVelocity(v)\n    {\n        this.velocity = v\n        this.accelerator.setVelocity(v)\n    }\n\n    /*\n    * Moves the wheels to positions. The positions are indexes\n    * in the range 0 .. NUMBER_OF_SEGMENTS - 1\n    * Positions the circle so that the specified segment is at the \n    * pointer mark - the mark is in the middle of the segment.\n    *\n    * Segments are numbered clockwise same as the colors\n    * position {int}\n    * @returns nothing\n    */\n    setPosition(position)\n    {\n        let rads = this.convertPositionToRadians(position)\n        this.positionToRadians(rads)\n    }\n    /*\n    * Increase the rotation of the wheel by rads. Ensures that\n    * the containers position value is always in the range -2*PI .. 2*PI\n    *\n    * rads {float} - radians in the range -2*PI .. 2*PI\n    */\n    rotateByRadians(rads)\n    {\n        if( (rads > 2*Math.PI) || (rads < -2.0 * Math.PI) ){\n            throw new Error(\"rotateByRadians - rads should not be greater than 2*PI or less than -2*PI\")\n        }\n        let rot = this.container.rotation \n        let newr = rot + rads\n        if( (rot + rads) > 2*Math.PI )\n            newr = (rot + rads) - 2*Math.PI\n        if( (rot + rads) <  -2*Math.PI )\n            newr = (rot + rads) + 2*Math.PI\n\n        if( (newr > 2*Math.PI) || (newr < -2.0 * Math.PI) ){\n            throw new Error(\"rotateByRadians - newr should not be greater than 2*PI or less than -2*PI\")\n        }\n        this.container.rotation = newr\n    }\n    /*\n    * Position the wheel so that its rotation is a given value of radians\n    * radians {float} - in range -2*PI .. 2*PI\n    */\n    positionToRadians(radians)\n    {\n        if( (rads > 2*Math.PI) || (rads < -2.0 * Math.PI) ){\n            throw new Error(\"positionToRadians - radians should not be greater than 2*PI or less than -2*PI\")\n        }\n        this.container.rotation = radians        \n    }\n\n    /*\n    * convert a position index into a rotation expressedin radians\n    *\n    * positionIndex {int} - the index of one of the wheels segments\n    *\n    * returns {float} - tha number of radians to set the wheels rotation value to\n    *                   in order that the segment with this positionIndex is under the marker\n    */\n    convertPositionToRadians(positionIndex)\n    {\n        let t = (2 * Math.PI * positionIndex / this.numberOfSegments)\n        if( t != 0){\n            t = 2*Math.PI - t\n        }\n        let res = t + degToRad(this.startDegrees)\n        return res\n    }\n}\n\n\n// Helper functions\n/*\n* Divides a circle into a number of colored segments.\n* items     {int}   - number of segments\n* radius    {float} - radius of circle\n* rotation  {float} - degrees of rotation from initial position\n*\n* returns array of style objects {x:{float} , y:{float}, angle:{float radians} }\n* where each (x,y) lies on the circle of given radius and divide the circle into\n* items equal sized sectors.\n*\n* Normally the first sector boundary would be the point (0, radius) (12 oclock)\n* but offset the boundary points by \"rotation\" degrees to the right \n*/\nfunction plotCirclePoints(items, radius, rotation)\n{\n    const tmp = [];\n\n    for (let i = 0; i < items; i++)\n    {\n        const r = radius;\n        const rot = degToRad(rotation);\n\n        const x = r * Math.cos((2 * Math.PI * i / items) + rot);\n        const y = r * Math.sin((2 * Math.PI * i / items) + rot);\n\n        const offset = (x < 0) ? 270 : 90;\n        let angle = Math.atan(y / x) * 180 / Math.PI;\n\n        angle = angle + offset;\n        const style = {\n            x,\n            y,\n            // angle, - this is not used anywhere\n        };\n\n        tmp.push(style);\n    }\n\n    return tmp;\n}\n/*\n* Converts degrees to radians\n*/\nfunction degToRad(degrees)\n{\n    return degrees * Math.PI / 180;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./wheel/single_wheel.js\n// module id = 2\n// module chunks = 0","(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define([], factory);\n    } else if (typeof exports === 'object') {\n        module.exports = factory();\n    } else {\n        root.newtonRaphson = factory();\n  }\n}(this, function () {\n  return function findRoot(f, fprime, guess, options) {\n    options = options || {};\n    var tolerance = options.tolerance || 0.00000001;\n    var epsilon = options.epsilon || 0.0000000000001;\n    var maxIterations = options.maxIterations || 20;\n    var haveWeFoundSolution = false; \n    var newtonX;\n   \n    for (var i = 0; i < maxIterations; ++i) {\n      var denominator = fprime(guess);\n      if (Math.abs(denominator) < epsilon) {\n        return false\n      }\n   \n      result = guess - (f(guess) / denominator);\n      \n      var resultWithinTolerance = Math.abs(result - guess) < tolerance;\n      if (resultWithinTolerance) { \n        return result\n      }\n\n      guess = result;\n    }\n    \n    return false;\n  }\n}));\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../~/newton-raphson/index.js\n// module id = 3\n// module chunks = 0","\nimport {QuadraticBezier, CubicBezier} from \"./bez_functions\"\n\n/*\n*   @TODO\n*   -   there is a lot of duplicate code in here in the handling of the different cases.\n*       can wind a lot of it into one piece\n*   -   need a general tidyup of names and code nolonger used\n*/\n\n/**\n* This class performs velocity changes on objects in 1-dimensional motion\n*\n* v0 {float} - initial velocity units/time\n* vF {float} - final velocity\n* tF {float} - time interval over which velocity is to change, units are seconds\n* dF {float} - the distance over which the velocity change is to take place\n*\n* provides a single method getDistance(t) - will change name to positionAfter(t) at some point\n* that returns the total distance traveled since after t seconds of the velocity change\n*\n* It does NOT keep track of the moving object outside of the velocity change window\n*\n* Elapsed time is measured from the start of the velocity change\n*\n* You can only use one of these objects once. Once the velocity change is complete\n* any call to getPositionAfter will result in an error\n*\n* @TODO - this needs a good tidy-up and reworking into ES6 style - but thats for later\n*/\nexport const BezDecelerator = function Decelerator(v0, vF, tF, dF, cb)\n{\n\t// just changing the notation to what I am using\n    var V = v0;\n    var T = tF;\n    var D = dF;\n    let P0 = [], P1 = [], P2 = [], P3 = [];\n    let func;\n    const threshold = 0.1;\n    let complete = false;\n    let callBack = cb;\n\n    if( (v0 > 0) && (vF == 0) && ((T*v0) > (D)) )\n    {\n        // this is the one special case where a cubic will not do the job\n        P0 = [0.0,0.0];\n        P2 = [T,D];\n        let p1_x = (D - vF*T)/(v0 - vF);\n        let p1_y = (v0*p1_x);\n        func = QuadraticBezier(P0, [p1_x, p1_y], P2);\n    }\n    else\n    {\n        P0 = [0.0, 0.0];\n        P1 = [T/3.0, V*T/3.0]\n        P2 = [(2.0/3.0)*T, D - vF*T/3.0]\n        P3 = [T,D];\n        func = CubicBezier(P0, P1, P2, P3);\n    }\n\n    this.tangent_initial = function(t)\n\t{\n        return V*t;\n    }.bind(this);\n\n    this.dotPositions = function()\n    {\n        return [P0, P1, P2, P3]\n    }\n\n\t/* \n    * this function draws the trajectory of the final velocity.Used only for debugging and demonstration\n    * not part of the final exposed package\n    */\n    this.tangent_final = function(t)\n\t{\n        let res =  vF*t + (D - vF*T);\n        return res;\n    }.bind(this);\n\n    this.getPositionAfter = function(elapsed_time)\n    {\n        return this.getDistance(elapsed_time)\n    }.bind(this)\n    /*\n    * This is the only exposed method of the class that is not simply for debugging.\n    *\n    * x_value {float} - a number in the range  0..tF the elapsed time of the velocity change \n    *\n    * Returns {float} - the distance traveled since the start of the velocity change\n    */\n    this.getDistance = function(x_value)\n    {\n        if( this.complete){\n            throw new Error(\"Accelerator: velocity change is complete. Cannot call this function\")\n        }\n        if( (x_value >= T) && (! complete)) {\n            complete = true\n            if( (typeof callBack == \"function\" ) && (callBack != null) )\n                callBack()\n        }\n        let y_value = func(x_value)\n        return y_value\n    }.bind(this)\n\t\n\n};\n// module.exports = BezDecelerator;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../src/accelerator.js\n// module id = 4\n// module chunks = 0","import {BezierCubicClass} from \"./bezier_cubic\"\nimport {BezierQuadraticClass} from \"./bezier_quadratic\"\nimport newtonRaphson from \"newton-raphson\"\n\n/*\n* @TODO\n*   -    better first guesses for newton-raphson\n*/\n/*\n* The key thing happening here is to convert a parameterized Bezier function\n* into a function of x\n*/\n\n/* \n* This function returns a function which is a bezier Cubic curve as a\n* function of x so that (x, f(x)) is a point on the bezier curve.\n* Bezier functions are defined as curves (x(t), y(t)) for a parameter t between 0 .. 1\n* but cannot be rephrased as (x, f(x)). Getting itin this f(x) form takes computational work\n*/\nexport const CubicBezier = function CubicBezier(P0, P1, P2, P3)\n{\n    let bezObj = new BezierCubicClass(P0, P1, P2, P3)\n\n    let parametricFunc = function(t)\n    {\n        return [bezObj.x_From_t(t), bezObj.y_From_t(t)]\n    }\n\n    let functionOfX = function(x_value)\n    {\n        // find the t value that corresponds to the x value\n        // get it by newton raphson\n\n        let f = function(t)\n        {\n            return ( bezObj.x_From_t(t) - x_value )  \n        }\n        let fPrime = function(t)\n        {\n            return bezObj.x_From_t_derivative(t)\n        }\n\n        let t_value = newtonRaphson(f, fPrime, 0.5, null)\n        if( t_value === false){\n            throw new Error(\"cannot find t for x in CubicBezier\")\n        }\n        let check_x_value = bezObj.x_From_t(t_value)\n        // console.log(`x_value: ${x_value}  t_value: ${t_value} check_x_value: ${check_x_value}`)\n\n        // let x_value = bezObj.x_From_t(t)\n        let y_value = bezObj.y_From_t(t_value);\n        if(y_value == 0){\n            console.log(`CubicBezier: y_value is zero`)\n        }\n        return y_value\n    };\n\n    return functionOfX;\n}\n/*\n* This function returns a function which is a bezier Quadratuc curve as a\n* function of x so that (x, f(x)) is a point on the bezier curve\n*/\nexport const QuadraticBezier = function QuadraticBezier(P0, P1, P2)\n {\n    let bezObj = new BezierQuadraticClass(P0, P1, P2)\n\n    // find the t value that corresponds to the x value\n    // get it by newton raphson\n\n    let parametricFunc = function(t)\n    {\n        return [bezObj.x_From_t(t), bezObj.y_From_t(t)]\n    }\n\n    let functionOfX = function(x_value)\n    {\n        let f = function(t)\n        {\n            return ( bezObj.x_From_t(t) - x_value )  \n        }\n        let fPrime = function(t)\n        {\n            return bezObj.x_From_t_derivative(t)\n        }\n\n        let t_value = newtonRaphson(f, fPrime, 0.5, null)\n        if( t_value === false){\n            console.log([P0, P1, P2])\n            throw new Error(`cannot find t for x in QuadraticBezier x_value:${x_value}`)\n        }\n        let check_x_value = bezObj.x_From_t(t_value)\n        // console.log(`x_value: ${x_value}  t_value: ${t_value} check_x_value: ${check_x_value}`)\n\n        // let x = bezObj.x_From_t(t);\n        let y_value = bezObj.y_From_t(t_value);\n        if(y_value == 0){\n            console.log(`CubicBezier: y_value is zero`)\n        }\n        return y_value\n    };\n\n    return functionOfX;\n}\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../src/bez_functions.js\n// module id = 5\n// module chunks = 0","/*\n* This file implements a class which provides a Cubic Bezier curve and its derivative\n*/\n\n// this function is the first derivative of the cubic bezier. Needed for x_From_t_derivative\nfunction Q(p0, p1, p2, t)\n{\n    let res = p0*(1.0-t)*(1.0-t) + 2.0*p1*(1.0-t)*t + p2 * t*t\n    return res \n}\n\nexport class BezierCubicClass \n{\n    constructor(P0, P1, P2, P3){\n        this.P0 = P0\n        this.P1 = P1\n        this.P2 = P2\n        this.P3 = P3\n    }\n    // private\n    derivative(t, p0, p1, p2, p3)\n    {\n        let res = 3.0 * (Q(p1,p2,p3, t) - Q(p0, p1, p2, t))\n        return res;\n    }\n    // private\n    bez_func(t, p0, p1, p2, p3)\n    {\n        var res =   p0*(1-t)*(1-t)*(1-t) \n                    + 3.0 * p1 * (1-t)*(1-t)*t \n                    + 3.0 * p2 * (1 - t)* t * t \n                    + p3*t*t*t;\n        return res;\n    }\n\n    x_From_t(t)\n    {\n        let res = this.bez_func(t, this.P0[0], this.P1[0], this.P2[0], this.P3[0])\n        return res\n    }\n\n    x_From_t_derivative(t)\n    {\n        let res = this.derivative(t, this.P0[0], this.P1[0], this.P2[0], this.P3[0])\n        return res\n    }\n\n    y_From_t(t)\n    {\n        let res = this.bez_func(t, this.P0[1], this.P1[1], this.P2[1], this.P3[1])\n        return res\n    }\n    // currently not used\n    point_From_t()\n    {\n        let res = [this.x_From_t(t), this.y_From_t(t)]\n        return res\n    }\n} \n\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../src/bezier_cubic.js\n// module id = 6\n// module chunks = 0","\n// this function is the first derivative of the quadratic bezier. Needed for x_From_t_derivative\nfunction L(p0, p1, t)\n{\n    let res = p0*(1.0 - t) + p1*t\n    return res \n}\n\nexport class BezierQuadraticClass\n{\n    constructor(P0, P1, P2){\n        this.P0 = P0\n        this.P1 = P1\n        this.P2 = P2\n    }\n    derivative(t, p0, p1, p2)\n    {\n        let res = 2.0 * (L(p1,p2, t) - L(p0, p1, t))\n        return res;\n    }\n\n    bez_func(t, p0, p1, p2)\n    {\n        var res =   p0*(1-t)*(1-t) + 2.0 * p1 * (1-t)*t + p2 * t * t \n        return res;\n    }\n\n    x_From_t(t)\n    {\n        let res = this.bez_func(t, this.P0[0], this.P1[0], this.P2[0])\n        return res\n    }\n\n    x_From_t_derivative(t)\n    {\n        let res = this.derivative(t, this.P0[0], this.P1[0], this.P2[0])\n        return res\n    }\n\n    y_From_t(t)\n    {\n        let res = this.bez_func(t, this.P0[1], this.P1[1], this.P2[1])\n        return res\n    }\n\n    point_From_t()\n    {\n        let res = [this.x_From_t(t), this.y_From_t(t)]\n        return res\n    }\n} \n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../src/bezier_quadratic.js\n// module id = 7\n// module chunks = 0","import {BezDecelerator} from \"./accelerator.js\"\n\nfunction logger(s)\n{\n    //console.log(s)\n}\n/*\n* TODO\n*   -   does not correctly support advancing by a time interval that jumps over the end of an acceleration\n*   -   the calc of velocity during an acceleration is crude and probably can be made more accurate\n*/\n\n/*\n* This class seeks to keep track of the 1 dimensional motion of an object that is subject to\n* multiple velocity changes.\n*\n* The two relevant properties of this object are position and velocity which can be obtained\n* at any time with methods position() and velocity()\n*\n* A starting velocity is set via the constructor.\n*\n* Time is advanced, and the position and velocity updated, by calling the method advanceTimeBy(timeInterval)\n* with a timeInterval or deltaTime which is a time interval since the last update and is in SECONDS not FRAMES\n*\n* An acceleration (either positive or negative) can be scheduled by calling the method accelerate(vF, tF, dF)\n* this call will have no effect on the position or velocity until the next call to advanceTimeBy\n* That method will apply the acceleration on successive calls until the ending condition is encountered\n* tF seconds of acceleration have elapsed AND the body has traveled dF distance during the acceleration\n*\n* On finishing the acceleration the advanceTimeBy() method will call the resolve() function\n* of the promise returned by call to accelerate() that setup the acceleration\n*\n*\n*   -   accelerate(v0, vF, tF, dF) - instructs the object to start a velocity change\n*           v0 - is current velocity and is unnecessary since the moving object knows its current velocity\n*           vF - is the velocity the object is to change to\n*           tF - is the time interval over which the change is to take place\n*           dF - is the distance that the object should move while changing velocity\n*       returns a ES6 promise\n*/\nexport default class Mover\n{\n\n    constructor(v0)\n    {\n        this.signature = \"Mover\"\n        this.time = 0.0;\n        this.elapsedTimeChangingVelocity = 0.0\n        this.timeInterval = 1.0/60.0 // @FIX this is going away\n        this.totalDistance = 0.0\n        this.changingVelocity = false\n        this.decelerator = null\n        this.currentVelocity = v0\n    }\n    /*\n    * Advance the moving objects time by a time interval\n    *\n    *   deltaTime {float} - interval since the last call to this method\n    *\n    *   returns {float} -   total distance traveled after this time interbal is added to total time\n    *                       of travel. Just for convenience as could get this with position()\n    */\n    advanceTimeBy(deltaTime)\n    {\n        if( ! this.changingVelocity ){\n            this.advanceTimeBy_VelocityNotChanging(deltaTime)\n        }else {\n            this.time += deltaTime\n            this.elapsedTimeChangingVelocity += deltaTime\n\n            let tmp = this.decelerator.getDistance(this.elapsedTimeChangingVelocity)\n            let deltaDistance = (this.distanceBeforeVelocityChange + tmp) - this.totalDistance\n\n            this.currentVelocity = deltaDistance / (deltaTime)\n            this.totalDistance = this.distanceBeforeVelocityChange + tmp\n\n            logger(\n                `Mover::advanceByTime  elapsedTimeChangingVelocity: ${this.elapsedTimeChangingVelocity}`\n                +` timeForChange: ${this.timeForChange}`\n                +` DVdistance: ${tmp} `\n                +` totalDistance: ${this.totalDistance}`\n                + `velocity: ${this.currentVelocity}`)\n\n            if( this.elapsedTimeChangingVelocity >= this.timeForChange )\n            {\n                logger(`Mover::advanceTimeBy::velocity increase DONE newVelocity:${this.newVelocity}`)\n                this.currentVelocity = this.newVelocity\n                this.changingVelocity = false\n                if( typeof this.resolvePromiseFunction == \"function\")\n                    this.resolvePromiseFunction()\n            }\n        }\n        return this.totalDistance\n    }\n    /*\n    * returns {float} the current position of the moving object\n    */\n    position()\n    {\n        return this.totalDistance\n    }\n    /*\n    * returns {float} the current velocity of the moving object\n    */\n    velocity()\n    {\n        return this.currentVelocity\n    }\n    /*\n    * Convenience function wth more meaningful name\n    * accelerat to a target final velocity\n    */\n    acceleratTo(vF, tF, dF)\n    {\n        return accelerat(vF, tF, dF)\n    }\n    /*\n    * Convenience function wth more meaningful name\n    * accelerat  -  change current velocity by a givn deltaVee\n    */\n    accelerateBy(deltaVee, tF, dF)\n    {\n        let vF = this.currentVelocity + deltaVee\n        return accelerat(vF, tF, dF)\n    }\n    /*\n    *   accelerate(vF, tF, dF, cb) - instructs the object to start a velocity change\n    *           vF - is the velocity the object is to change to\n    *           tF - is the time interval over which the change is to take place\n    *           dF - is the distance that the object should move while changing velocity\n    *\n    *   returns a ES6 Promise which will be resolved when the acceleration has completed\n    */\n    accelerate(vF, tF, dF)\n    {\n        logger(`Mover::accelerate ${vF} ${tF} ${dF}`)\n        if( this.changingVelocity ){\n            throw new Error(\"cannot have two accelerations underway at the same time\")\n        }\n        let v0 = this.currentVelocity\n        let p = new Promise(function(resolve){\n            this.resolvePromiseFunction = resolve\n        }.bind(this))\n        this.distanceBeforeVelocityChange = this.totalDistance\n        this.changingVelocity = true\n        this.elapsedTimeChangingVelocity = 0.0\n        this.timeForChange = tF\n        this.newVelocity = vF\n        this.distanceForChange = dF\n        this.decelerator = new BezDecelerator(v0, vF, tF, dF)\n        return p\n    }\n\n    /*\n    * Internal only - advances time when no acceleration is active\n    */\n    advanceTimeBy_VelocityNotChanging(deltaTime)\n    {\n        this.time += deltaTime\n        this.totalDistance += this.currentVelocity * deltaTime\n        logger(`Mover::advanceTimeBy_VelocityNotChanging velocity:`\n            +` ${this.currentVelocity} distance:${this.totalDistance} time: ${this.time}`)\n    }\n\n    setVelocity(v)\n    {\n        if( this.changingVelocity ){\n            throw new Error(\"cannot setVelocity during an acceleration\")\n        }\n        this.currentVelocity = v\n\n    }\n/////////////// below here will disappear\n\n    // ONLY    HERE DURING TRANSITION TO DELTA TIME\n    advanceTimeByFrames(numberOfFrames)\n    {\n        logger(`Mover::advanceTimeByFrames:numberOfFrames: ${numberOfFrames} time:${this.time}`)\n        let deltaTime = numberOfFrames * this.timeInterval\n        this.advanceTimeBy(deltaTime)\n    }\n\n    // ONLY    HERE DURING TRANSITION TO DELTA TIME\n    /*\n    * @TODO - change parameter to deltaTime in seconds - this thing should know nothing about\n    * frames and display issues.\n    */\n    getDistance(numberOfFrames)\n    {\n        this.advanceTimeByFrames(numberOfFrames)\n        return this.totalDistance\n    }\n\n    // ONLY    HERE DURING TRANSITION TO DELTA TIME\n    /*\n    * @TODO - change parameter to deltaTime in seconds - this thing should know nothing about\n    * frames and display issues.\n    */\n    getDistanceVelocityNotChanging(numberOfFrames)\n    {\n        this.time += this.timeInterval*numberOfFrames\n        this.totalDistance += this.currentVelocity*this.timeInterval*numberOfFrames\n        return this.totalDistance\n    }\n}\n\n\n// window.ACCELERATE = exports;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../src/index.js\n// module id = 8\n// module chunks = 0"],"sourceRoot":""}