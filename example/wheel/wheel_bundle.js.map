{"version":3,"sources":["webpack:///webpack/bootstrap 668e47cce8243521f18f","webpack:///./wheel/three_wheels.js","webpack:///./wheel/radian_helpers.js","webpack:///../src/index.js","webpack:///./libs/graph.js","webpack:///./wheel/main.js","webpack:///./wheel/rotating_view_controller.js","webpack:///./wheel/single_wheel_view.js","webpack:///../~/newton-raphson/index.js","webpack:///../src/bezier-accelerator.js","webpack:///../src/bezier-cubic.js","webpack:///../src/bezier-functions.js","webpack:///../src/bezier-quadratic.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA,mDAA2C,cAAc;;AAEzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;;;;;;;;;;;AChEwB;AACM;;;AAG9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,wCAAwC,eAAe;AACvD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,gEAAgE,GAAG;AACnE;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;;;;;;;;;;;ACxPA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AC3B4B;;AAE5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,MAAM;AACtB,gBAAgB,MAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA,iB;AACA,kD;AACA;AACA,a;AACA;AACA,S;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,sEAAsE,iCAAiC;AACvG,qCAAqC,mBAAmB;AACxD,kCAAkC,IAAI;AACtC,qCAAqC,mBAAmB;AACxD,+BAA+B,qBAAqB;;AAEpD;AACA;AACA,mFAAmF,iBAAiB;AACpG;AACA;AACA;AACA,iB;AACA,kD;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,MAAM;AACtB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,MAAM;AACtB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,MAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,MAAM;AACtB,gBAAgB,MAAM;AACtB,gBAAgB,MAAM;AACtB,gBAAgB,YAAY;AAC5B;AACA,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,oCAAoC,GAAG,GAAG,GAAG,GAAG,GAAG;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,+C;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,MAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,qBAAqB;AAChD,2BAA2B,mBAAmB;AAC9C,wBAAwB,UAAU;AAClC,2BAA2B,UAAU;AACrC;;AAEA;AAAA;AAAA;;AAEA;;;;;;;;;;;;ACxPA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,sBAAsB,UAAU;AAChC,kB;AACA;AACA;AACA;AACA,gD;AACA,2BAA2B,OAAO,KAAK,OAAO,YAAY,QAAQ,WAAW,QAAQ;AACrF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,kBAAkB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,sBAAsB,SAAS;AAC/B;AACA;AACA;AACA,0D;;AAEA,2BAA2B,OAAO,KAAK,OAAO,YAAY,QAAQ,WAAW,QAAQ;;AAErF;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA,iD;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,sBAAsB,UAAU;AAChC,kB;AACA;;AAEA;AACA;AACA;AACA,+DAA+D,OAAO,KAAK,OAAO;AAClF;AACA;AACA,gD;AACA,kEAAkE,QAAQ,KAAK,QAAQ;AACvF,2BAA2B,OAAO,KAAK,OAAO,YAAY,QAAQ,WAAW,QAAQ;AACrF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kC;AACA,2BAA2B,wB;AAC3B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;AC3KA;AACA;AAC6B;AACT;;AAQf;;AAEL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;;;;;;;;;ACzHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4EAA4E,IAAI;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,gBAAgB,IAAI;AACpB,oBAAoB,MAAM;AAC1B,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,sCAAsC,aAAa;AACnD,0BAA0B,EAAE;AAC5B,kCAAkC,UAAU;AAC5C,kCAAkC,UAAU;AAC5C,kCAAkC,iBAAiB;;AAEnD;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,IAAI;AACpB,oBAAoB,MAAM;AAC1B;AACA,iBAAiB,MAAM;AACvB;AACA;AACA;AACA;AACA,4DAA4D,SAAS,iBAAiB,aAAa;AACnG;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA,kEAAkE,KAAK,aAAa,UAAU;AAC9F;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA,sEAAsE,UAAU;AAChF;AACA;AACA,kBAAkB,GAAG;AACrB,kBAAkB,KAAK;AACvB,2BAA2B,aAAa;AACxC,4BAA4B,SAAS;AACrC,wBAAwB,UAAU;AAClC;AACA;;AAEA;AACA;AACA;AACA,gBAAgB,MAAM;AACtB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,8CAA8C,SAAS,wBAAwB,gCAAgC;AAC/G;AACA;AAAA;AAAA;;;;;;;;;;ACpMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,iBAAiB;AAClC,iBAAiB,MAAM;AACvB,iBAAiB,eAAe;AAChC,iBAAiB,qBAAqB;AACtC,iBAAiB,MAAM;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,0C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,MAAM;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,MAAM;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,qBAAqB,IAAI;AACzB;AACA,eAAe,MAAM;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;;;AAGA;AACA;AACA;AACA,aAAa,IAAI;AACjB,aAAa,MAAM;AACnB,aAAa,MAAM;AACnB;AACA,kCAAkC,GAAG,MAAM,MAAM,MAAM,SAAS,cAAc;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,mBAAmB,WAAW;AAC9B;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;ACrKA;AACA;AACA;AAAA;AAAA;AAAA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,oC;AACA;;AAEA,mBAAmB,mBAAmB;AACtC;AACA;AACA;AACA;;AAEA;;AAEA;AACA,kC;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,CAAC,G;;;;;;;;ACnCsC;;AAEvC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB,YAAY,SAAS;AACrB,YAAY,wBAAwB,GAAG;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,eAAe,MAAM;AACrB;AACA,eAAe,MAAM;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,YAAY;AAC7B;AACA;;AAEA;AACA;AACA;AAAA;AAAA;AACA;;;;;;;;ACjHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAAA;AAAA;;;;;;;;;;;;;AC5EsB;AACI;AAC1B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,mCAAmC,QAAQ,aAAa,QAAQ,kBAAkB,cAAc;;AAEhG;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,8EAA8E,QAAQ;AACtF;AACA;AACA,mCAAmC,QAAQ,aAAa,QAAQ,kBAAkB,cAAc;;AAEhG;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AAAA;AAAA;;;;;;;;;ACjHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,MAAM;AACtB,gBAAgB,MAAM;AACtB,gBAAgB,MAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AAAA;AAAA","file":"wheel_bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 668e47cce8243521f18f","import {SingleWheelView} from \"./single_wheel_view.js\"\nimport {SingleWheelController} from \"./rotating_view_controller.js\"\n\n\n/*\n* This is the master module (not a class) that sets up the three spinning wheels and provides\n* interface functions to manage the behavior of the wheels.\n*\n* These are the exported functions\n*\n*   export function createThreeWheels()\n*   export function setPosition(outterPosition, middlePosition, innerPosition)\n*   export function startSpinning(outterVelocity, middleVelocity, innerVelocity)\n*   export function stopWheelsAtPositionInTimeInterval(outterPosition, middlePosition, innerPosition, timeInterval)\n*   export function stopWheel()\n*\n*/\n\nconst colors = [\n  0x9400D3, //Violet\n  0x4B0082, //Indigo\n  0x0000FF, //Blue\n  0x00FF00, //Green\n  0xFFFF00, //Yellow\n  0xFF7F00, //Orange\n  0xFF0000, //Red\n]\nconst NUMBER_OF_SEGMENTS = colors.length\nconst PIE_ANGLE = 360 / colors.length\nconst PIE_MIDDLE = PIE_ANGLE / 2\nconst SPINS = 4 * 360\nconst TIME_LENGTH = 4 //secs\nconst SPIN_DELAY = 1 //secs\nconst GROWTH = 1.1\n\n\nconst options = {\n    backgroundColor : 0xEEEEEE,\n    antialias: true\n}\n\nlet app;\nlet containerOuter;\nlet containerMiddle;\nlet containerInner;\n\nlet outerWheelController;\nlet middleWheelController;\nlet innerWheelController;\n\nlet button;\nlet tweenOuter;\nlet tweenMiddle;\nlet tweenInner;\n\nlet isSpinning = false\nlet timer\n\n\nexport function createThreeWheels(el, width, height)\n{\n    app = new PIXI.Application(width, height, options);\n    // document.body.appendChild(app.view);\n    el.appendChild(app.view)\n\n    let outerWheelView = new SingleWheelView(app, 300, 0xFFFFFF, colors, -PIE_MIDDLE)\n    let middleWheelView = new SingleWheelView(app, 210, 0xFFFFFF, colors, -PIE_MIDDLE)\n    let innerWheelView = new SingleWheelView(app, 120, 0xFFFFFF, colors, -PIE_MIDDLE)\n\n    outerWheelController = new SingleWheelController(outerWheelView)\n    middleWheelController = new SingleWheelController(middleWheelView)\n    innerWheelController = new SingleWheelController(innerWheelView)\n\n    containerOuter = outerWheelView.container\n    containerMiddle = middleWheelView.container\n    containerInner = innerWheelView.container\n\n    app.stage.addChild(containerOuter)\n    app.stage.addChild(containerMiddle)\n    app.stage.addChild(containerInner)\n\n    addIndicator()\n    addCenterButton()\n\n}\n\n/*\n* Moves the wheels to positions. The positions are indexes\n* in the range 0 .. NUMBER_OF_SEGMENTS - 1\n* Positions each circle so that the specified segment is at the\n* pointer mark - the mark is in the middle of the segment.\n*\n* Segments are numbered clockwise same as the colors\n*/\nexport function setPosition(outterPosition, middlePosition, innerPosition)\n{\n    outerWheelController.setPosition(outterPosition)\n    middleWheelController.setPosition(middlePosition)\n    innerWheelController.setPosition(innerPosition)\n}\n/*\n* Starts all wheels spinning with velocity for each wheel given by the object\n* Speed units are in radians/sec\n*/\nexport function startSpinning(outterVelocity, middleVelocity, innerVelocity)\n{\n    let frameInterval = Math.round(1000*(1.0/60.0))\n\n    outerWheelController.setVelocity(outterVelocity)\n    middleWheelController.setVelocity(middleVelocity)\n    innerWheelController.setVelocity(innerVelocity)\n    // add ticker function so that time is advanced for each wheel\n    app.ticker.add(tickerFunc)\n}\n\nexport function stopWheelsWithLoss(\n                    positionOuter,\n                    positionMiddle,\n                    positionInner,\n                    decelerateTimeInterval\n)\n{\n    let allPs = []\n    allPs.push(outerWheelController.accelerateToZero(positionOuter, decelerateTimeInterval))\n    allPs.push(middleWheelController.accelerateToZero(positionMiddle, decelerateTimeInterval))\n    allPs.push(innerWheelController.accelerateToZero(positionInner, decelerateTimeInterval))\n    Promise.all(allPs).then(function(){\n        console.log(\"all wheels have stopped\");\n        removeTickerFunc()\n    })\n}\nexport function stopWheelsWithNearWin(\n                    positionTwice,\n                    positionOnce,\n                    decelerateTimeIntervalFirstTwoWheels,\n                    decelerateTimeIntervalLastWheel\n)\n{\n    let allPs = []\n    allPs.push(outerWheelController.accelerateToZero(positionOnce, decelerateTimeIntervalLastWheel))\n    allPs.push(middleWheelController.accelerateToZero(positionTwice, decelerateTimeIntervalFirstTwoWheels))\n    allPs.push(innerWheelController.accelerateToZero(positionTwice, decelerateTimeIntervalFirstTwoWheels))\n    Promise.all(allPs).then(function(){\n        console.log(\"all wheels have stopped\");\n        removeTickerFunc()\n    })\n}\nexport function stopWheelsWithWin(\n                    positionWinner,\n                    decelerateTimeIntervalFirstTwoWheels,\n                    decelerateTimeIntervalLastWheel\n)\n{\n    let allPs = []\n    allPs.push(outerWheelController.accelerateToZero(positionWinner, decelerateTimeIntervalLastWheel))\n    allPs.push(middleWheelController.accelerateToZero(positionWinner, decelerateTimeIntervalFirstTwoWheels))\n    allPs.push(innerWheelController.accelerateToZero(positionWinner, decelerateTimeIntervalFirstTwoWheels))\n    Promise.all(allPs).then(function(){\n        console.log(\"all wheels have stopped\");\n        removeTickerFunc()\n    })\n}\n\n/*\n* called after result known so that tickerFunc is not called\n*/\nfunction removeTickerFunc()\n{\n    app.ticker.remove(tickerFunc)\n}\n\nexport function stopWheel()\n{\n    app.ticker.remove(tickerFunc)\n}\n\nfunction tickerFunc(delta)     // currently ignores the delta value\n{\n    let timeInterval = delta * (1.0/60.0)\n    outerWheelController.advanceTimeBy(timeInterval)\n    middleWheelController.advanceTimeBy(timeInterval)\n    innerWheelController.advanceTimeBy(timeInterval)\n    return\n}\n\n\nfunction radiansPerSecToPerTick(radsSec)\n{\n    let tmp = radsSec / 60.0\n    return tmp\n}\n\n\n/*\n* Add a triangular pointer to the top of the 'wheel'\n*/\nfunction addIndicator()\n{\n    const tri = new PIXI.Graphics()\n    tri.beginFill(0xFFFFFF);\n    tri.moveTo(0, 0);\n    tri.lineTo(30, 0);\n    tri.lineTo(15, 30);\n    tri.endFill();\n\n    const triContainer = new PIXI.Container()\n    triContainer.addChild(tri)\n    app.stage.addChild(triContainer)\n    triContainer.x = 300 - 15\n}\n\n/*\n* Add a center button to the wheel and hooks the press of that\n* button to the randon function\n*/\nfunction addCenterButton()\n{\n    const cir = new PIXI.Graphics()\n    cir.beginFill(0xFFFFFF);\n    cir.drawCircle(0,0,50)\n    cir.endFill();\n\n    const text = new PIXI.Text('Click',{fill: 0xFF66CC})\n    text.x = Math.round(-text.width/2)\n    text.y = -14\n\n    const cirContainer = new PIXI.Container()\n    cirContainer.addChild(cir)\n    cirContainer.addChild(text)\n    app.stage.addChild(cirContainer)\n    cirContainer.x = 300\n    cirContainer.y = 300\n\n    cirContainer.buttonMode = true\n    cirContainer.interactive = true\n    cirContainer.pointerup = function()\n    {\n        let fn = 'three_wheels.js'\n        // alert(`Not implemented yet\\nsee addCenterButton in ${fn}`)\n        // need to invoke the core game processing\n        // does not seem worth in this demo generating random outcomes\n        // but this is a good simulation. Always produces the same near win\n        startSpinning(12, 10, 14)\n        setTimeout(()=>{\n            stopWheelsWithNearWin(2, 3, 2.0, 4.0)\n        }, 4000)\n    }\n  button = text\n}\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./wheel/three_wheels.js\n// module id = 0\n// module chunks = 0","/*\n* Converts degrees to radians\n*/\nexport function degToRad(degrees)\n{\n    return degrees * Math.PI / 180;\n}\nexport function modulo2PI(rads)\n{\n\tif( (rads >= 0) && (rads < 2 * Math.PI) )\n\t\treturn rads\n\tif( rads < 0 )\n\t\trads = rads + 2*Math.PI\n\n\tlet tmp = Math.round(rads/(2*Math.PI)) \n\tlet tmp2 = rads - 2*Math.PI*tmp\n\treturn tmp2\n}\nexport function add(a, b)\n{\n\tlet tmp = modulo2PI( a + b )\n\treturn tmp\n}\nexport function subtract(a, b)\n{\n\tlet tmp = modulo2PI( a - b )\n\treturn tmp\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./wheel/radian_helpers.js\n// module id = 1\n// module chunks = 0","import { BezierAccelerator } from './bezier-accelerator.js';\n\nfunction logger(s) // eslint-disable-line\n{\n    // console.log(s)\n}\n/*\n* TODO\n*   -   does not correctly support advancing by a time interval that jumps over the end of an acceleration\n*   -   the calc of velocity during an acceleration is crude and probably can be made more accurate\n*/\n\n/**\n * This class seeks to keep track of the 1 dimensional motion of an object that is subject to\n * multiple velocity changes.\n *\n * The two relevant properties of this object are position and velocity which can be obtained\n * at any time with methods position() and velocity()\n *\n * A starting velocity is set via the constructor.\n *\n * Time is advanced, and the position and velocity updated, by calling the method advanceTimeBy(timeInterval)\n * with a timeInterval or deltaTime which is a time interval since the last update and is in SECONDS not FRAMES\n *\n * An acceleration (either positive or negative) can be scheduled by calling the method accelerate(vF, tF, dF)\n * this call will have no effect on the position or velocity until the next call to advanceTimeBy\n * That method will apply the acceleration on successive calls until the ending condition is encountered\n * tF seconds of acceleration have elapsed AND the body has traveled dF distance during the acceleration\n *\n * On finishing the acceleration the advanceTimeBy() method will call the resolve() function\n * of the promise returned by call to accelerate() that setup the acceleration\n */\nexport default class Accelerator\n{\n    /**\n     * Constructs the object.\n     *\n     * @param  {Number}  v0  The initial Velocity\n     */\n    constructor(v0)\n    {\n        this.time = 0.0;\n        this.elapsedTimeChangingVelocity = 0.0;\n        this.timeInterval = 1.0 / 60.0; // @FIX this is going away\n        this.totalDistance = 0.0;\n        this.changingVelocity = false;\n        this.decelerator = null;\n        this.currentVelocity = v0;\n    }\n\n    /**\n     * Advance the moving objects time by a time interval\n     *\n     * @param  {Float}  deltaTime  Interval since the last call to this method\n     * @return {Float}  Total distance traveled after this time interbal is\n     *                  added to total time of travel. Just for convenience as\n     *                  could get this with position()\n     */\n    advanceTimeBy(deltaTime)\n    {\n        if (!this.changingVelocity && ! this.isWaiting)\n        {\n            this._advanceTimeAndDistanceWhileCoasting(deltaTime);\n        }\n        else if(! this.changingVelocity && this.isWaiting )\n        {\n            //this.time += deltaTime; - this will be done in _advanceTimeAndDistance\n            this.currentWaitingTime += deltaTime\n            if( this.currentWaitingTime >= this.requiredWaitingTime )\n            {\n                this.isWaiting = false\n                if (typeof this.resolvePromiseFunction === 'function')\n                { \n                    this.resolvePromiseFunction(); \n                }\n            } \n            this._advanceTimeAndDistanceWhileCoasting(deltaTime);\n        }    \n        else\n        {\n            this.time += deltaTime;\n            this.elapsedTimeChangingVelocity += deltaTime;\n\n            const tmp = this.decelerator.getDistance(this.elapsedTimeChangingVelocity);\n            const deltaDistance = (this.distanceBeforeVelocityChange + tmp) - this.totalDistance;\n\n            this.currentVelocity = deltaDistance / (deltaTime);\n            this.totalDistance = this.distanceBeforeVelocityChange + tmp;\n\n            logger(\n                `Mover::advanceByTime  elapsedTimeChangingVelocity: ${this.elapsedTimeChangingVelocity}`\n                + ` timeForChange: ${this.timeForChange}`\n                + ` DVdistance: ${tmp} `\n                + ` totalDistance: ${this.totalDistance}`\n                + `velocity: ${this.currentVelocity}`);\n\n            if (this.elapsedTimeChangingVelocity >= this.timeForChange)\n            {\n                logger(`Mover::advanceTimeBy::velocity increase DONE newVelocity:${this.newVelocity}`);\n                this.currentVelocity = this.newVelocity;\n                this.changingVelocity = false;\n                if (typeof this.resolvePromiseFunction === 'function')\n                { \n                    this.resolvePromiseFunction(); \n                }\n            }\n        }\n\n        return this.totalDistance;\n    }\n\n    /**\n     * Gets the current position of the moving object\n     *\n     * @return {Float}  returns the current position of the moving object\n     */\n    position()\n    {\n        return this.totalDistance;\n    }\n\n    /**\n     * Gets the current velocity of the moving object\n     *\n     * @return {Float}  returns the current velocity of the moving object\n     */\n    velocity()\n    {\n        return this.currentVelocity;\n    }\n\n    /**\n     * Sets the velocity. This cannot bet set during an acceleration\n     *\n     * @param  {Float}  v  The currenct velocity\n     */\n    setVelocity(v)\n    {\n        if (this.changingVelocity)\n        {\n            throw new Error('cannot setVelocity during an acceleration');\n        }\n        this.currentVelocity = v;\n    }\n\n    /**\n     * Instructs the object to start a velocity change\n     *\n     * @param  {Float}   vF  is the velocity the object is to change to\n     * @param  {Float}   tF  is the time interval over which the change is to take place\n     * @param  {Float}   dF  is the distance that the object should move while changing velocity\n     * @param  {Float|false} - a timeInterval to delay the acceleration by or false = no delay. Defaults to false\n     *\n     * @return {Promise}  Promise which will be resolved when the acceleration\n     *                    has completed\n     */\n     accelerate(vF, tF, dF, delayInterval = false)\n     {\n        if( delayInterval === false ){\n            return this._accelerateNoDelay(vF, tF, dF)\n        }else{\n            let q = this.waitFor(delayInterval)\n                    .then( ()=> {\n                        return this._accelerateNoDelay(vF, tF, dF)\n                    })\n            return q\n        }\n     }\n    _accelerateNoDelay(vF, tF, dF, promise)\n    {\n        logger(`Mover::accelerate ${vF} ${tF} ${dF}`);\n        if (this.changingVelocity)\n        {\n            throw new Error('cannot have two accelerations underway at the same time');\n        }\n        if( this.isWaiting )\n        {\n            throw new Error('cannot have commence acceleration while wait is underway');\n        }\n        const v0 = this.currentVelocity;\n        const p = new Promise((resolve) =>\n        {\n            this.resolvePromiseFunction = resolve;\n        });\n\n        this.distanceBeforeVelocityChange = this.totalDistance;\n        this.changingVelocity = true;\n        this.elapsedTimeChangingVelocity = 0.0;\n        this.timeForChange = tF;\n        this.newVelocity = vF;\n        this.distanceForChange = dF;\n        this.decelerator = new BezierAccelerator(v0, vF, tF, dF);\n\n        return p;\n    }\n    waitFor(timeInterval)\n    {\n        if (this.changingVelocity)\n        {\n            throw new Error('Accelerator: cannot wait while acceleration is underway');\n        }\n            if( this.isWaiting )\n        {\n            throw new Error('cannot have commence acceleration while wait is underway');\n        }\n        this.isWaiting = true\n        this.requiredWaitingTime = timeInterval\n        this.currentWaitingTime = 0.0\n\n        const p = new Promise((resolve) =>\n        {\n            this.resolvePromiseFunction = resolve;\n        });\n\n        return p        \n    }\n\n    kill()\n    {\n        if( this.changingVelocity ){\n            this.changingVelocity = false\n            if (typeof this.resolvePromiseFunction === 'function')\n            {\n                 this.resolvePromiseFunction(); \n            }\n        }else{\n            console.log(`WARNING: Accelerator - kill not necessary when no acceleration active`)\n        }\n    }\n    /**\n     * Advances total time & distance when NO acceleration is active\n     *\n     * @private\n     * @param  {Float}  deltaTime  The delta time\n     */\n    _advanceTimeAndDistanceWhileCoasting(deltaTime)\n    {\n        this.time += deltaTime;\n        this.totalDistance += this.currentVelocity * deltaTime;\n        logger(`\\nMover::advanceTimeBy_VelocityNotChanging `\n            + ` velocity:${this.currentVelocity}`\n            + ` distance:${this.totalDistance}`\n            + ` time: ${this.time}`\n            + `deltaTime:${deltaTime}`);\n    }\n\n}\n\n// window.Accelerate = exports;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../src/index.js\n// module id = 2\n// module chunks = 0","/*\n* some simple utilities for graphing functions\n*/\nexport function graphFunction (ctx, axes, func, color, thick) {\n    var xx, yy;\n    var dx=4, x0=axes.x0, y0=axes.y0, scale=axes.scale;\n\n    var iMax = Math.round((ctx.canvas.width)/dx);\n    var xDelta = (axes.xMax - axes.xMin)/((iMax) * 1.0);\n    var iMin = 0;\n    var h = ctx.canvas.height;\n    var w = ctx.canvas.width;\n\n    ctx.beginPath();\n    ctx.lineWidth = thick;\n    ctx.strokeStyle = color;\n\t// just to prove we got here\n    for (var i = iMin; i < iMax; i++) {\n        xx = dx*i; \n        var xValue = i * xDelta;\n        var yValue = func(xValue);\n        var xScaled = xx;\n        var yScaled =  (yValue * h) / axes.yMax; \n\t\t// console.log(`loop x:${xValue} y:${yValue} xScaled: ${xScaled} yScaled:${yScaled}`)\n\t\t// yy = scale*func(xx/scale);\n\t\t\n        if (i == 0) \n            ctx.moveTo(xScaled, h - yScaled);\n        else         \n\t\t\tctx.lineTo(xScaled, h - yScaled );\n    }\n    ctx.stroke();\n}\nfunction yMinMax(table) \n{\n    let resMax = table[0][1];\n    let resMin = table[0][1];\n    for( let i = 0; i < table.length; i++){\n        if( table[i][1] > resMax)\n            resMax = table[i][1];\n        if( table[i][1] < resMin )\n            resMin = table[i][1];\n    }\n    return [resMin, resMax];\n}\n\n/*\n* table is an array of points (x,y) where each point is represented as an array of length 2\n*/\nexport function graphTable (ctx, axes, table, color, thick) \n{\n\t\n    let h = ctx.canvas.height;\n    let w = ctx.canvas.width;\n\n    let numberOfPoints = table.length * 1.0;\n    let iMax = numberOfPoints;\n    let iMin = 0;\n    let xMin = table[0][0];\n    let xMax = table[numberOfPoints - 1][0];\n    let pixelsBetweenXValues = Math.round(w/(xMax - xMin));\n    let dx = (xMax - xMin)/(numberOfPoints*1.0);\n\n    let tmp = yMinMax(table);\n    let yMin = tmp[0];\n    let yMax = tmp[1];\n    let dy = (yMax - yMin)/h;\n\n    var xx, yy;\n\n    ctx.beginPath();\n    ctx.lineWidth = thick;\n    ctx.strokeStyle = color;\n\n\t// let tmp1 = xMin * pixelsBetweenXValues\n\t// let tmp2 = xMax * pixelsBetweenXValues\n\n    for (var i = iMin;i < iMax; i++) {\n        var xValue = table[i][0];\n        var yValue = table[i][1];\n        var xScaled = xValue * pixelsBetweenXValues;\n        var yScaled =  ((yValue - yMin)* h)/(yMax - yMin); \n\n\t\t// console.log(`loop x:${xValue} y:${yValue} xScaled: ${xScaled} yScaled:${yScaled}`)\n\t\t\n        if (i == 0) \n            ctx.moveTo(xScaled, h - yScaled);\n        else         \n\t\t\tctx.lineTo(xScaled, h - yScaled );\n    }\n    ctx.stroke();\n}\n\nexport function drawDot(ctx, axes, x, y)\n{\n    return; // does not work yet\n    var h = ctx.canvas.height;\n    var w = ctx.canvas.width;\n    var xValue = x;\n    var yValue = y;\n    var xScaled = xValue * axes.xScaleFactor;\n    var yScaled = h - yValue * axes.yScaleFactor; \n    ctx.fillRect(0.0, h - 20 - 0.0, 20, 20);\n\t// ctx.fillRect(xScaled, yScaled, 100, 100)\n}\n\nexport function graphParameterizedFunction (ctx, axes, func, color, thick) {\n    var xx, yy;\n    var dx=10, x0=axes.x0, y0=axes.y0, scale=axes.scale;\n\n    var iMax = Math.round((ctx.canvas.width)/dx);\n    var xDelta = (axes.xMax - axes.xMin)/((iMax) * 1.0);\n\n    var iMin = 0;\n    var h = ctx.canvas.height;\n    var w = ctx.canvas.width;\n\n    ctx.beginPath();\n    ctx.lineWidth = thick;\n    ctx.strokeStyle = color;\n\n    for (var i = iMin;i <= iMax; i++) {\n        xx = dx*i; \n        var pValue = i * xDelta;\n\n        var xyValues = func(pValue);\n        var xValue = xyValues[0];\n        var yValue = xyValues[1];\n        console.log('graphParameterizedFunction: raw: ' + `x:${xValue} y:${yValue}`);\n\t\t// var xScaled = xx;\n        var xScaled = (xValue * w) / axes.xMax;\n        var yScaled =  (yValue * h) / axes.yMax; \n        console.log('graphParameterizedFunction: scaled: ' + `x:${xScaled} y:${yScaled}`);\n\t\t// console.log(`loop x:${xValue} y:${yValue} xScaled: ${xScaled} yScaled:${yScaled}`)\n\t\t// yy = scale*func(xx/scale);\n\t\t\n        if (i == 0) \n            ctx.moveTo(xScaled, h - yScaled);\n        else         \n\t\t\tctx.lineTo(xScaled, h - yScaled );\n    }\n    ctx.stroke();\n}\n\n/*\n* The points are specified in mathematical (x,y) coordinates with (0,0) in the bottom left corner of the\n* region x > 0 y > 0\n*/\nfunction drawLine(ctx, startPt, endPt, strokeStyle)\n{\n    var w=ctx.canvas.width;\n    var h=ctx.canvas.height;\n    var x0 = startPt[0];\n    var x1 = endPt[0];\n    var y0 = startPt[1];\n    var y1 = endPt[1];\n    ctx.beginPath();\n    ctx.strokeStyle = strokeStyle; \n    ctx.moveTo(x0, h - y0); ctx.lineTo(x1, h - y1);\t\n    ctx.stroke();\n}\nexport function drawAxes(ctx, axes) \n{\n\n    var w = ctx.canvas.width;\n    var h = canvas.height;\n    drawLine(ctx, [0,0], [w, 0], 'rgb(0, 256,0)');\n    drawLine(ctx, [0,0], [0, h], 'rgb(0,0,256)');\n    drawLine(ctx, [w,0], [w,h], 'rgb(256,0,0)');\n    drawLine(ctx, [0,h], [w,h], 'rgb(256,0,0)');\n\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./libs/graph.js\n// module id = 3\n// module chunks = 0","/*\n*/\nimport {drawAxes, graphTable} from '../libs/graph.js';\nimport {setPosition} from \"./three_wheels.js\"\n\nimport {startSpinning,\n        createThreeWheels,\n        stopWheel,\n        stopWheelsWithLoss,\n        stopWheelsWithNearWin,\n        stopWheelsWithWin\n    } from \"./three_wheels.js\"\n\nlet speedOuter\nlet speedMiddle\nlet speedInner\nlet waitTime\nlet stopTimeInterval1\nlet stopTimeInterval2\n\nfunction setParameters()\n{\n    speedInner = parseFloat($(\"#rotation-speed-inner\").val())\n    speedMiddle = parseFloat($(\"#rotation-speed-middle\").val())\n    speedOuter = parseFloat($(\"#rotation-speed-outer\").val())\n    waitTime = parseFloat($(\"#wait-time-interval\").val())\n    stopTimeInterval1 = parseFloat($(\"#stop-time-interval-1\").val())\n    stopTimeInterval2 = parseFloat($(\"#stop-time-interval-2\").val())    \n}\n\n$(document).ready(function(){\n    $(\"#btn-position\").click(positionBtn)\n    $(\"#btn-stop\").click(stopBtn)\n    $(\"#btn-start-spinning\").click(startSpinningBtn)\n    $(\"#btn-loss\").click(lossBtn)\n    $(\"#btn-nearwin\").click(nearwinBtn)\n    $(\"#btn-win\").click(winBtn)\n\n    $(\"#btn-selected-win\").click(selectedWinBtn)\n    $(\"#btn-selected-nearwin\").click(selectedNearWinBtn)\n    $(\"#btn-selected-loss\").click(selectedLossBtn)\n\n    $(\"#wheels\").css(\"background-color\", \"yellow\")\n    $(\"#wheels\").css(\"width\", 600)\n    $(\"#wheels\").css(\"height\", 600)\n    $(\"#wheels\").css(\"float\", \"left\")\n\n    setParameters()\n    createThreeWheels($(\"#wheels\")[0], 600, 600)\n})\nfunction positionBtn()\n{\n    console.log('positionFirst')\n    setPosition(0,1,2)\n\n}\nfunction stopBtn()\n{\n    console.log('stop')\n    stopWheel()\n}\nfunction startSpinningBtn()\n{\n    startSpinning(12, 10, 14)\n}\nfunction lossBtn()\n{\n    stopWheelsWithLoss(1, 2, 3, 2.0)\n}\nfunction nearwinBtn()\n{\n    stopWheelsWithNearWin(2, 3, 2.0, 4.0)\n}\nfunction winBtn()\n{\n    stopWheelsWithWin(2, 2.0, 4.0)\n}\nfunction selectedWinBtn()\n{\n    var e = document.getElementById(\"win-select\");\n    var p = e.selectedIndex;\n    // var value = e.options[e.selectedIndex].value;\n    // let x = $(\"#select :selected\").text()\n    // let y = $(\"#selected\").val()\n    setParameters()\n    startSpinning(speedOuter, speedMiddle, speedInner)\n    setTimeout(()=>{\n        stopWheelsWithWin(p, stopTimeInterval1, stopTimeInterval2)\n    }, waitTime)\n}\nfunction selectedNearWinBtn()\n{\n    var e1 = document.getElementById(\"near-win-select-1\");\n    var p1 = e1.selectedIndex;\n    var e2 = document.getElementById(\"near-win-select-2\");\n    var p2 = e2.selectedIndex;\n    // var value = e.options[e.selectedIndex].value;\n    // let x = $(\"#select :selected\").text()\n    // let y = $(\"#selected\").val()\n    setParameters()\n    startSpinning(speedOuter, speedMiddle, speedInner)\n    setTimeout(()=>{\n        stopWheelsWithNearWin(p1, p2, stopTimeInterval1, stopTimeInterval2)\n    }, waitTime)\n}\nfunction selectedLossBtn()\n{\n    var e1 = document.getElementById(\"loss-select-1\");\n    var p1 = e1.selectedIndex;\n    var e2 = document.getElementById(\"loss-select-2\");\n    var p2 = e2.selectedIndex;\n    var e3 = document.getElementById(\"loss-select-3\");\n    var p3 = e3.selectedIndex;\n    // var value = e.options[e.selectedIndex].value;\n    // let x = $(\"#select :selected\").text()\n    // let y = $(\"#selected\").val()\n    setParameters()\n    startSpinning(speedOuter, speedMiddle, speedInner)\n    setTimeout(()=>{\n        stopWheelsWithLoss(p1, p2, p3, stopTimeInterval1, stopTimeInterval2)\n    }, waitTime)\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./wheel/main.js\n// module id = 4\n// module chunks = 0","import Accelerator from \"../../src/index.js\"\nimport * as Radians from \"./radian_helpers.js\"\n/*\n* This class is a controller for a rotating view.\n*\n* If js had the concept of an interface I could define a rotating view,\n* but surfice it to say it is a class with the following methods:\n*\n*   -   getCurrentRotation()                    - returns an angle in radians\n*   -   rotateByRadians(rads)                   - adds rads to the currentRotation given by rads\n*   -   setRotationToRadians(radians)           - sets currentRotation to radians\n*   -   convertPositionToRadians(positionIndex) - converts a positionIndex {int} to radians\n*   -   setPositionTo(positonIndex)\n*   -   getMaxPositionIndex()                   -  returns the lasrgest legal value of a position index\n*\n* Such a class attempts to generalize an object that has a number of positions\n*   -   that can be indexed by integers (like a square or circle with segments),\n*   -   can be rotated to one of those positions\n*   -   can be rotated by an arbitary angle (in radians)\n*\n* This controller manages the starting, speed and deceleration to a specified stopping\n* position index of such a rotating view\n*/\nexport class SingleWheelController {\n    /*\n    * Constructor\n    * param view - rotating view\n    */\n    constructor(view)\n    {\n        this.velocity = 0.0\n        this.view = view\n        this.lastRadians = 0\n        this.accelerator = new Accelerator(0)\n\n    }\n\n    /*\n    * accelerate to zero\n    * position {int}        - the index of the segment that is to be under the pointer when the velocity reaches zero\n    * timeInterval {float}  - the timeInterval in seconds over which the deleration is to take place\n    * return {Promise}      - resolved when acceleration is complete\n    */\n    accelerateToZero(position, timeInterval)\n    {\n        this.validatePosition(position)\n        let dF = this.calculateStoppingDistance(position, timeInterval)\n        return this.accelerator.accelerate(0.0, timeInterval, dF, false) \n        // important - cannot put a delay here, already calced stopping distance\n    }\n\n    /*\n    * Advances the wheel's time by a timeInterval and redraws the wheel in the new position.\n    * Takes account of the circular nature of the wheel and keeps the new rotation value to less than 2*PI.\n    * does this by remembering the last radian value and ASSUMES the shift in\n    * radians over the timeInterval is less than 2*PI\n    *\n    * timeInterval {float}\n    *\n    * returns nothing\n    */\n    advanceTimeBy(timeInterval)\n    {\n        //d and lastRadians are not modulo2PI\n        let d = this.accelerator.advanceTimeBy(timeInterval)\n        let last_prev = this.lastRadians\n\n        if( d < this.lastRadians){\n            console.log(\"something is wrong\")\n        }\n        let deltaRads = Radians.subtract(Radians.modulo2PI(d), this.lastRadians)\n        this.lastRadians = d\n\n        // console.log(`advanceTimeBy: `\n        //     +` \\t\\ntimeInterval: ${timeInterval}`\n        //     +` \\t\\nd:${d} `\n        //     +` \\t\\nprev_last:${last_prev}`\n        //     +` \\t\\ndeltaRads:${deltaRads}`\n        //     +` \\t\\nnew last: ${this.lastRadians}`)\n\n        this.view.rotateByRadians(deltaRads)\n    }\n\n\n    /*\n    * VERY IMPORTANT METHOD - will probably need tuning to get a good visual result\n    *\n    * Calculate the dF value to give to our instance of an accelerator object\n    *\n    * Because of the circular nature of the wheel and that rotations are equivalent modulo 2*PI\n    * there are multiple dF values that will give the same rotation result.\n    *\n    * The goal of this method is to pick a dF that gives good visual result.\n    *\n    * VERS 1 CURRENT ONLY USES A SIMPLE ALGORITHM  - it picks the most obvious. \n    *\n    * VERS 2 But I think we will get a better visual result if we try to make \n    * dF as long/big as possible with out breaking the restriction that\n    *   -   currentVelocity * timeInterval > dF\n    * that is what VERS == 2 does\n    *\n    * Find the dF value so that\n    *   -   currentVelocity * timeInterval > dF\n    *   -   currentVelocity * timeInterval = dF * 2 --- approximately \n    *   -   for which dF is equivalent to 'position'\n    *\n    * position {int} - index of the segment that we want under the pointer\n    * timeInterval {float} - the time interval over which we have to decelerate to the position\n    *\n    * returns dF{float} - the stopping distance in radians \n    */\n    calculateStoppingDistance(position, timeInterval)\n    {\n        this.validatePosition(position)\n        console.log(`calculateStoppingDistance position : ${position} timeInterval: ${timeInterval}`)\n        let positionInRadians = this.view.convertPositionToRadians(position)\n        let v0 = this.velocity\n        if( v0 < (2*Math.PI/timeInterval)){\n            alert(\"velocity maybe too low\")\n        }\n        let currentRadians = this.view.getCurrentRotation()\n\n        let deltaRadians = (positionInRadians >= currentRadians) ? \n                                (positionInRadians - currentRadians) :\n                                (2*Math.PI + positionInRadians - currentRadians)\n        \n        let dMax = v0 * timeInterval\n        let i_deltaR = deltaRadians\n        let vers = 2\n\n        if(vers == 2){\n            // enhanced algorithm\n            let tmp  = deltaRadians\n            while( tmp < (dMax - 2*Math.PI) ){\n                deltaRadians = tmp\n                tmp += 2*Math.PI\n            }\n        }\n        let dRequired = deltaRadians\n\n\n        if( dMax <= dRequired){\n            alert(\n                `dRequired too big  or velocity too low\\n dMax: ${dMax} dRequired:${dRequired}`\n                +` \\nmay be suboptimal deceleration shape`\n                )\n        }\n        // let cycles = Math.round(v * timeInterval / (2 * Math.PI) ) \n        // if( (cycles * 2 * Math.PI + deltaRadians) < dMax ){\n        //     dRequired = cycles * 2 * Math.PI + deltaRadians\n        // }else{\n        //     dRequired = (cycles-1) * 2 * Math.PI + deltaRadians            \n        // }\n        // if( (cycles * 2 * Math.PI + deltaRadians) > dMax ){\n        //     throw new Error(`calculateStoppingDistance dRequired:${dRequired} too big`)\n        // }\n        console.log(`calculateStoppingDistance `\n        +` v0 : ${v0} `\n        +` dMax:${dMax}`\n        +` timeInterval: ${timeInterval} `\n        +` initial dReq : ${i_deltaR}`\n        +` dRequired: ${dRequired}`)\n        return dRequired\n    }\n\n    /*\n    * Sets the views rotational velocity in radians per second\n    * @NOTE - we have duplicate data here BEWARE\n    * velocity {float} - radians per sec\n    */\n    setVelocity(v)\n    {\n        this.velocity = v\n        this.accelerator.setVelocity(v)\n    }\n\n    /*\n    * Moves the view to a position index\n    *\n    * Position index values have meaning only for the view. To this controller\n    * they are just non negative integers\n    *\n    * @param    position {int}\n    * @returns  nothing\n    */\n    setPosition(position)\n    {\n        let rads = this.convertPositionToRadians(position)\n        this.view.positionToRadians(rads)\n    }\n\n    validatePosition(position)\n    {\n        if( (position < 0) || (position > this.view.getMaxPositionIndex()) )\n            throw new Error(`position value ${position} is outside range [0..${this.view.getMaxPositionIndex()}`)\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./wheel/rotating_view_controller.js\n// module id = 5\n// module chunks = 0","import Accelerator from \"../../src/index.js\"\nimport * as Radians from \"./radian_helpers.js\" \n/*\n* This class represents visualization of one wheel in a multi wheel game. \n* It should conform to the interface for a rotating_view as defined\n* in the source for rotating_view_controller\n*\n*/\nexport class SingleWheelView {\n    /*\n    * app       {PIXI.application}      - the pixie app for the wheel\n    * radius    {float}                 - radius of the circle\n    * bg        {hex color code}        - the background color behind the wheel\n    * colors    {array of color codes}  - specifies both the number and color of the segments\n    * startDeg  {float}                 - an initial rotation to get the starting image correct. With the\n    *                                       first segment positioned at the pointer\n    */\n    constructor(app, radius, bg, colors, startDeg)\n    {\n        this.velocity = 0.0\n        this.app = app\n        this.colors = colors\n        this.numberOfSegments = colors.length\n        this.startDegrees = startDeg\n        this.lastRadians = 0\n\n        const container = new PIXI.Container()\n        container.pivot.x = 0\n        container.pivot.y = 0\n        container.x = 300\n        container.y = 300\n        \n        // draw outter background circle with given background\n        const circle = new PIXI.Graphics()\n        circle.beginFill(bg)\n        circle.lineStyle(10, bg);\n        circle.drawCircle(0,0,radius)\n        circle.endFill()\n        container.addChild(circle)\n\n        // draw inner background circle with white background\n        const mask = new PIXI.Graphics()\n        mask.beginFill(0xFFFFFF)\n        mask.drawCircle(0,0,radius)\n        mask.endFill()\n        container.addChild(mask)\n\n        // get the (x,y) coordinates of the point that bound the sectors\n        const coords = plotCirclePoints(colors.length, radius+50, -90)\n        const size = radius \n\n        coords.forEach(function(coord, i){   \n            const index = (i == coords.length-1) ? 0 : i+1\n            const nextCoord = coords[index]\n\n            // draw the triangular sector of the correct color - note we are working within container\n            const tri = new PIXI.Graphics()\n            tri.beginFill( colors[i], 0.8);\n            tri.moveTo(0, 0);\n            tri.lineTo(coord.x, coord.y);\n            tri.lineTo(nextCoord.x, nextCoord.y);\n            tri.lineTo(0, 0);\n            tri.endFill();\n            tri.mask = mask\n            container.addChild(tri);\n        })\n        container.rotation = Radians.degToRad(startDeg)\n        this.container = container\n    }\n    getCurrentRotation()\n    {\n        return this.container.rotation\n    }\n    getMaxPositionIndex()\n    {\n        return this.colors.length - 1\n    }\n    /*\n    * Increase the rotation of the wheel by rads. Ensures that\n    * the containers position value is always in the range -2*PI .. 2*PI\n    *\n    * rads {float} - radians in the range -2*PI .. 2*PI\n    */\n    rotateByRadians(rads)\n    {\n        if( (rads > 2*Math.PI) || (rads < -2.0 * Math.PI) ){\n            // throw new Error(\"rotateByRadians - rads should not be greater than 2*PI or less than -2*PI\")\n            console.log(\"rotateByRadians - rads should not be greater than 2*PI or less than -2*PI\")\n        }\n        let rot = this.container.rotation \n        let newr = Radians.add(rot, rads)\n        this.container.rotation = newr\n    }\n    /*\n    * Position the wheel so that its rotation is a given value of radians\n    * radians {float} - in range -2*PI .. 2*PI\n    */\n    setRotationToRadians(radians)\n    {\n        if( (rads > 2*Math.PI) || (rads < -2.0 * Math.PI) ){\n            throw new Error(\"positionToRadians - radians should not be greater than 2*PI or less than -2*PI\")\n        }\n        this.container.rotation = radians        \n    }\n\n    /*\n    * convert a position index into a rotation expressedin radians\n    *\n    * positionIndex {int} - the index of one of the wheels segments\n    *\n    * returns {float} - tha number of radians to set the wheels rotation value to\n    *                   in order that the segment with this positionIndex is under the marker\n    */\n    convertPositionToRadians(positionIndex)\n    {\n        let t = (2 * Math.PI * positionIndex / this.numberOfSegments)\n        if( t != 0){\n            t = 2*Math.PI - t\n        }\n        let res = t + Radians.degToRad(this.startDegrees)\n        return res\n    }\n}\n\n\n// Helper functions\n/*\n* Divides a circle into a number of colored segments.\n* items     {int}   - number of segments\n* radius    {float} - radius of circle\n* rotation  {float} - degrees of rotation from initial position\n*\n* returns array of style objects {x:{float} , y:{float}, angle:{float radians} }\n* where each (x,y) lies on the circle of given radius and divide the circle into\n* items equal sized sectors.\n*\n* Normally the first sector boundary would be the point (0, radius) (12 oclock)\n* but offset the boundary points by \"rotation\" degrees to the right \n*/\nfunction plotCirclePoints(items, radius, rotation)\n{\n    const tmp = [];\n\n    for (let i = 0; i < items; i++)\n    {\n        const r = radius;\n        const rot = Radians.degToRad(rotation);\n\n        const x = r * Math.cos((2 * Math.PI * i / items) + rot);\n        const y = r * Math.sin((2 * Math.PI * i / items) + rot);\n\n        const offset = (x < 0) ? 270 : 90;\n        let angle = Math.atan(y / x) * 180 / Math.PI;\n\n        angle = angle + offset;\n        const style = {\n            x,\n            y,\n            // angle, - this is not used anywhere\n        };\n\n        tmp.push(style);\n    }\n\n    return tmp;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./wheel/single_wheel_view.js\n// module id = 6\n// module chunks = 0","(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define([], factory);\n    } else if (typeof exports === 'object') {\n        module.exports = factory();\n    } else {\n        root.newtonRaphson = factory();\n  }\n}(this, function () {\n  return function findRoot(f, fprime, guess, options) {\n    options = options || {};\n    var tolerance = options.tolerance || 0.00000001;\n    var epsilon = options.epsilon || 0.0000000000001;\n    var maxIterations = options.maxIterations || 20;\n    var haveWeFoundSolution = false; \n    var newtonX;\n   \n    for (var i = 0; i < maxIterations; ++i) {\n      var denominator = fprime(guess);\n      if (Math.abs(denominator) < epsilon) {\n        return false\n      }\n   \n      result = guess - (f(guess) / denominator);\n      \n      var resultWithinTolerance = Math.abs(result - guess) < tolerance;\n      if (resultWithinTolerance) { \n        return result\n      }\n\n      guess = result;\n    }\n    \n    return false;\n  }\n}));\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../~/newton-raphson/index.js\n// module id = 7\n// module chunks = 0","import { QuadraticBezier, CubicBezier } from './bezier-functions';\n\n/*\n*   @TODO\n*   -   there is a lot of duplicate code in here in the handling of the different cases.\n*       can wind a lot of it into one piece\n*   -   need a general tidyup of names and code nolonger used\n*   - this needs a good tidy-up and reworking into ES6 style - but thats for later\n*/\n\n/**\n * This class performs velocity changes on objects in 1-dimensional motion\n *\n * provides a single method getDistance(t) - will change name to positionAfter(t) at some point\n * that returns the total distance traveled since after t seconds of the velocity change\n *\n * It does NOT keep track of the moving object outside of the velocity change window\n *\n * Elapsed time is measured from the start of the velocity change\n *\n * You can only use one of these objects once. Once the velocity change is complete\n * any call to getPositionAfter will result in an error\n\n * @class  BezDecelerator (name)\n * @param  {number}                   v0  Initial velocity\n * @param  {number}                   vF  Final velocity\n * @param  {number}                   tF  Final time\n * @param  {number}                   dF  Final distance\n * @param  {Function}                 cb  Completion handler\n * @return {(Array|Function|number)}  { description_of_the_return_value }\n */\nexport const BezierAccelerator = function Decelerator(v0, vF, tF, dF, cb)\n{\n\t// just changing the notation to what I am using\n    const V = v0;\n    const T = tF;\n    const D = dF;\n    let P0 = [],\n        P1 = [],\n        P2 = [],\n        P3 = [];\n    let func;\n    let complete = false;\n    const callBack = cb;\n\n    if ((v0 > 0) && (vF == 0) && ((T * v0) > (D)))\n    {\n        // this is the one special case where a cubic will not do the job\n        P0 = [0.0, 0.0];\n        P2 = [T, D];\n        const p1_x = (D - vF * T) / (v0 - vF);\n        const p1_y = (v0 * p1_x);\n\n        func = QuadraticBezier(P0, [p1_x, p1_y], P2);\n    }\n    else\n    {\n        P0 = [0.0, 0.0];\n        P1 = [T / 3.0, V * T / 3.0];\n        P2 = [(2.0 / 3.0) * T, D - vF * T / 3.0];\n        P3 = [T, D];\n        func = CubicBezier(P0, P1, P2, P3);\n    }\n\n    this.tangent_initial = function (t)\n\t{\n        return V * t;\n    };\n\n    this.dotPositions = function ()\n    {\n        return [P0, P1, P2, P3];\n    };\n\n\t/*\n    * this function draws the trajectory of the final velocity.Used only for debugging and demonstration\n    * not part of the final exposed package\n    */\n    this.tangent_final = function (t)\n\t{\n        const res =  vF * t + (D - vF * T);\n\n        return res;\n    };\n\n    this.getPositionAfter = function (elapsed_time)\n    {\n        return this.getDistance(elapsed_time);\n    }.bind(this);\n    /*\n    * This is the only exposed method of the class that is not simply for debugging.\n    *\n    * x_value {float} - a number in the range  0..tF the elapsed time of the velocity change\n    *\n    * Returns {float} - the distance traveled since the start of the velocity change\n    */\n    this.getDistance = (x_value) =>\n    {\n        if (this.complete)\n        {\n            throw new Error('Accelerator: velocity change is complete. Cannot call this function');\n        }\n        if ((x_value >= T) && (!complete))\n        {\n            complete = true;\n            if ((typeof callBack === 'function') && (callBack != null))\n                { callBack(); }\n        }\n        const y_value = func(x_value);\n\n        return y_value;\n    };\n};\n// module.exports = BezDecelerator;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../src/bezier-accelerator.js\n// module id = 8\n// module chunks = 0","/**\n * Class for bezier cubic class.\n */\nexport class BezierCubic\n{\n    /**\n     * Constructs the object.\n     *\n     * @param  {<type>}  P0  Inital Point\n     * @param  {<type>}  P1  First attraction point\n     * @param  {<type>}  P2  Second attraction point\n     * @param  {<type>}  P3  End point\n     */\n    constructor(P0, P1, P2, P3)\n    {\n        this.P0 = P0;\n        this.P1 = P1;\n        this.P2 = P2;\n        this.P3 = P3;\n    }\n\n    /**\n     * @private\n     */\n    derivative(t, p0, p1, p2, p3)\n    {\n        function quadratic(p0, p1, p2, t)\n        {\n            const res = p0 * (1.0 - t) * (1.0 - t) + 2.0 * p1 * (1.0 - t) * t + p2 * t * t;\n\n            return res;\n        }\n        const res = 3.0 * (quadratic(p1, p2, p3, t) - quadratic(p0, p1, p2, t));\n\n        return res;\n    }\n    /**\n     * @private\n     */\n    bez_func(t, p0, p1, p2, p3)\n    {\n        const res =   p0 * (1 - t) * (1 - t) * (1 - t)\n                    + 3.0 * p1 * (1 - t) * (1 - t) * t\n                    + 3.0 * p2 * (1 - t) * t * t\n                    + p3 * t * t * t;\n\n        return res;\n    }\n\n    x_From_t(t)\n    {\n        const res = this.bez_func(t, this.P0[0], this.P1[0], this.P2[0], this.P3[0]);\n\n        return res;\n    }\n\n    x_From_t_derivative(t)\n    {\n        const res = this.derivative(t, this.P0[0], this.P1[0], this.P2[0], this.P3[0]);\n\n        return res;\n    }\n\n    y_From_t(t)\n    {\n        const res = this.bez_func(t, this.P0[1], this.P1[1], this.P2[1], this.P3[1]);\n\n        return res;\n    }\n    // currently not used\n    point_From_t()\n    {\n        const res = [this.x_From_t(t), this.y_From_t(t)];\n\n        return res;\n    }\n}\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../src/bezier-cubic.js\n// module id = 9\n// module chunks = 0","import { BezierCubic } from './bezier-cubic';\nimport { BezierQuadratic } from './bezier-quadratic';\nimport newtonRaphson from 'newton-raphson';\n\n/*\n* @TODO\n*   -    better first guesses for newton-raphson\n*/\n/*\n* The key thing happening here is to convert a parameterized Bezier function\n* into a function of x\n*/\n\n/*\n* This function returns a function which is a bezier Cubic curve as a\n* function of x so that (x, f(x)) is a point on the bezier curve.\n* Bezier functions are defined as curves (x(t), y(t)) for a parameter t between 0 .. 1\n* but cannot be rephrased as (x, f(x)). Getting itin this f(x) form takes computational work\n*/\nexport const CubicBezier = function CubicBezier(P0, P1, P2, P3)\n{\n    const bezObj = new BezierCubic(P0, P1, P2, P3);\n\n    const parametricFunc = function (t)\n    {\n        return [bezObj.x_From_t(t), bezObj.y_From_t(t)];\n    };\n\n    const functionOfX = function (x_value)\n    {\n        // find the t value that corresponds to the x value\n        // get it by newton raphson\n\n        const f = function (t)\n        {\n            return (bezObj.x_From_t(t) - x_value);\n        };\n        const fPrime = function (t)\n        {\n            return bezObj.x_From_t_derivative(t);\n        };\n\n        const t_value = newtonRaphson(f, fPrime, 0.5, null);\n\n        if (t_value === false)\n        {\n            throw new Error('cannot find t for x in CubicBezier');\n        }\n        const check_x_value = bezObj.x_From_t(t_value);\n        // console.log(`x_value: ${x_value}  t_value: ${t_value} check_x_value: ${check_x_value}`)\n\n        // let x_value = bezObj.x_From_t(t)\n        const y_value = bezObj.y_From_t(t_value);\n\n        if (y_value == 0)\n        {\n            console.log('CubicBezier: y_value is zero');\n        }\n\n        return y_value;\n    };\n\n    return functionOfX;\n};\n/*\n* This function returns a function which is a bezier Quadratuc curve as a\n* function of x so that (x, f(x)) is a point on the bezier curve\n*/\nexport const QuadraticBezier = function QuadraticBezier(P0, P1, P2)\n {\n    const bezObj = new BezierQuadratic(P0, P1, P2);\n\n    // find the t value that corresponds to the x value\n    // get it by newton raphson\n\n    const parametricFunc = function (t)\n    {\n        return [bezObj.x_From_t(t), bezObj.y_From_t(t)];\n    };\n\n    const functionOfX = function (x_value)\n    {\n        const f = function (t)\n        {\n            return (bezObj.x_From_t(t) - x_value);\n        };\n        const fPrime = function (t)\n        {\n            return bezObj.x_From_t_derivative(t);\n        };\n\n        const t_value = newtonRaphson(f, fPrime, 0.5, null);\n\n        if (t_value === false)\n        {\n            console.log([P0, P1, P2]);\n            throw new Error(`cannot find t for x in QuadraticBezier x_value:${x_value}`);\n        }\n        const check_x_value = bezObj.x_From_t(t_value);\n        // console.log(`x_value: ${x_value}  t_value: ${t_value} check_x_value: ${check_x_value}`)\n\n        // let x = bezObj.x_From_t(t);\n        const y_value = bezObj.y_From_t(t_value);\n\n        if (y_value == 0)\n        {\n            console.log('CubicBezier: y_value is zero');\n        }\n\n        return y_value;\n    };\n\n    return functionOfX;\n};\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../src/bezier-functions.js\n// module id = 10\n// module chunks = 0","/**\n * Class for bezier quadratic class.\n */\nexport class BezierQuadratic\n{\n    /**\n     * Constructs the object.\n     *\n     * @param  {Float}  P0  Initial point\n     * @param  {Float}  P1  Attraction point\n     * @param  {Float}  P2  End point\n     */\n    constructor(P0, P1, P2)\n    {\n        this.P0 = P0;\n        this.P1 = P1;\n        this.P2 = P2;\n    }\n    derivative(t, p0, p1, p2)\n    {\n        function linear(p0, p1, t)\n        {\n            const res = p0 * (1.0 - t) + p1 * t;\n\n            return res;\n        }\n\n        const res = 2.0 * (linear(p1, p2, t) - linear(p0, p1, t));\n\n        return res;\n    }\n\n    bez_func(t, p0, p1, p2)\n    {\n        const res =   p0 * (1 - t) * (1 - t) + 2.0 * p1 * (1 - t) * t + p2 * t * t;\n\n        return res;\n    }\n\n    x_From_t(t)\n    {\n        const res = this.bez_func(t, this.P0[0], this.P1[0], this.P2[0]);\n\n        return res;\n    }\n\n    x_From_t_derivative(t)\n    {\n        const res = this.derivative(t, this.P0[0], this.P1[0], this.P2[0]);\n\n        return res;\n    }\n\n    y_From_t(t)\n    {\n        const res = this.bez_func(t, this.P0[1], this.P1[1], this.P2[1]);\n\n        return res;\n    }\n}\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../src/bezier-quadratic.js\n// module id = 11\n// module chunks = 0"],"sourceRoot":""}